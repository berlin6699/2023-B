
2023B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000765c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  080077f0  080077f0  000087f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bc8  08007bc8  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007bc8  08007bc8  00008bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bd0  08007bd0  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd0  08007bd0  00008bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bd4  08007bd4  00008bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007bd8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000002a8  200001d8  200001d8  000091d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000480  20000480  000091d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f426  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f7  00000000  00000000  0001862a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  0001ad28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b02  00000000  00000000  0001bb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f52  00000000  00000000  0001c66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011982  00000000  00000000  0003f5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfd2a  00000000  00000000  00050f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120c68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ad8  00000000  00000000  00120cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00125784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077d4 	.word	0x080077d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080077d4 	.word	0x080077d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <ADS8688_SPI_WB>:
uint16_t My_Ad[8]={0,0,};
float ad_real[2]={0.0,0.0};
uint8_t test;

void ADS8688_SPI_WB(uint8_t com)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	uint8_t com_temp=com,s;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	73fb      	strb	r3, [r7, #15]
	ADS_8688_nCS_L;
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f4c:	4818      	ldr	r0, [pc, #96]	@ (8000fb0 <ADS8688_SPI_WB+0x78>)
 8000f4e:	f001 fe3b 	bl	8002bc8 <HAL_GPIO_WritePin>
	for(s=0;s<8;s++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	73bb      	strb	r3, [r7, #14]
 8000f56:	e022      	b.n	8000f9e <ADS8688_SPI_WB+0x66>
	{
		if(com_temp&0x80)
 8000f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	da06      	bge.n	8000f6e <ADS8688_SPI_WB+0x36>
		{
			ADS_8688_SDI_H;
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f66:	4812      	ldr	r0, [pc, #72]	@ (8000fb0 <ADS8688_SPI_WB+0x78>)
 8000f68:	f001 fe2e 	bl	8002bc8 <HAL_GPIO_WritePin>
 8000f6c:	e005      	b.n	8000f7a <ADS8688_SPI_WB+0x42>
		}
		else
		{
			ADS_8688_SDI_L;
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f74:	480e      	ldr	r0, [pc, #56]	@ (8000fb0 <ADS8688_SPI_WB+0x78>)
 8000f76:	f001 fe27 	bl	8002bc8 <HAL_GPIO_WritePin>
		}
	ADS_8688_SCLK_H;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <ADS8688_SPI_WB+0x7c>)
 8000f82:	f001 fe21 	bl	8002bc8 <HAL_GPIO_WritePin>
	com_temp<<=1;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
	ADS_8688_SCLK_L;
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f92:	4808      	ldr	r0, [pc, #32]	@ (8000fb4 <ADS8688_SPI_WB+0x7c>)
 8000f94:	f001 fe18 	bl	8002bc8 <HAL_GPIO_WritePin>
	for(s=0;s<8;s++)
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	73bb      	strb	r3, [r7, #14]
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	2b07      	cmp	r3, #7
 8000fa2:	d9d9      	bls.n	8000f58 <ADS8688_SPI_WB+0x20>
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020800 	.word	0x40020800

08000fb8 <ADS8688_SPI_RB>:


uint8_t ADS8688_SPI_RB(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	uint8_t Rdata=0,s;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	//ADS_8688_nCS_L;
	for(s=0;s<8;s++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	71bb      	strb	r3, [r7, #6]
 8000fc6:	e022      	b.n	800100e <ADS8688_SPI_RB+0x56>
	{
		Rdata<<=1;
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	71fb      	strb	r3, [r7, #7]
		ADS_8688_SCLK_H;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fd4:	4812      	ldr	r0, [pc, #72]	@ (8001020 <ADS8688_SPI_RB+0x68>)
 8000fd6:	f001 fdf7 	bl	8002bc8 <HAL_GPIO_WritePin>
		if(ADS_8688_SDO)
 8000fda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fde:	4811      	ldr	r0, [pc, #68]	@ (8001024 <ADS8688_SPI_RB+0x6c>)
 8000fe0:	f001 fdda 	bl	8002b98 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d004      	beq.n	8000ff4 <ADS8688_SPI_RB+0x3c>
		{
			Rdata|=0x01;
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	e003      	b.n	8000ffc <ADS8688_SPI_RB+0x44>
		}
		else
		{
			Rdata&=0xFE;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f023 0301 	bic.w	r3, r3, #1
 8000ffa:	71fb      	strb	r3, [r7, #7]
		}
	ADS_8688_SCLK_L;
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001002:	4807      	ldr	r0, [pc, #28]	@ (8001020 <ADS8688_SPI_RB+0x68>)
 8001004:	f001 fde0 	bl	8002bc8 <HAL_GPIO_WritePin>
	for(s=0;s<8;s++)
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	3301      	adds	r3, #1
 800100c:	71bb      	strb	r3, [r7, #6]
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	2b07      	cmp	r3, #7
 8001012:	d9d9      	bls.n	8000fc8 <ADS8688_SPI_RB+0x10>
	}
	return Rdata;
 8001014:	79fb      	ldrb	r3, [r7, #7]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40020800 	.word	0x40020800
 8001024:	40020000 	.word	0x40020000

08001028 <ADS8688_WriteCommandReg>:


void ADS8688_WriteCommandReg(uint16_t command)//写ADS8688命令寄存器
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
	ADS_8688_nCS_L;
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001038:	480c      	ldr	r0, [pc, #48]	@ (800106c <ADS8688_WriteCommandReg+0x44>)
 800103a:	f001 fdc5 	bl	8002bc8 <HAL_GPIO_WritePin>
	ADS8688_SPI_WB(command>>8 & 0XFF);
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	b29b      	uxth	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff76 	bl	8000f38 <ADS8688_SPI_WB>
	ADS8688_SPI_WB(command & 0XFF);
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff71 	bl	8000f38 <ADS8688_SPI_WB>
	ADS_8688_nCS_H;
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800105c:	4803      	ldr	r0, [pc, #12]	@ (800106c <ADS8688_WriteCommandReg+0x44>)
 800105e:	f001 fdb3 	bl	8002bc8 <HAL_GPIO_WritePin>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40020000 	.word	0x40020000

08001070 <ADS8688_Write_Program_Register>:


void ADS8688_Write_Program_Register(uint8_t Addr,uint8_t data)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]
	ADS_8688_nCS_L;
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001086:	480d      	ldr	r0, [pc, #52]	@ (80010bc <ADS8688_Write_Program_Register+0x4c>)
 8001088:	f001 fd9e 	bl	8002bc8 <HAL_GPIO_WritePin>
	ADS8688_SPI_WB(Addr<<1| 0X01);
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	b25b      	sxtb	r3, r3
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	b25b      	sxtb	r3, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff4c 	bl	8000f38 <ADS8688_SPI_WB>
	ADS8688_SPI_WB(data);
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff48 	bl	8000f38 <ADS8688_SPI_WB>
	ADS_8688_nCS_H;
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ae:	4803      	ldr	r0, [pc, #12]	@ (80010bc <ADS8688_Write_Program_Register+0x4c>)
 80010b0:	f001 fd8a 	bl	8002bc8 <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40020000 	.word	0x40020000

080010c0 <ADS8688_READ_Program_Register>:


uint8_t ADS8688_READ_Program_Register(uint8_t Addr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
	ADS_8688_nCS_L;
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010d4:	480d      	ldr	r0, [pc, #52]	@ (800110c <ADS8688_READ_Program_Register+0x4c>)
 80010d6:	f001 fd77 	bl	8002bc8 <HAL_GPIO_WritePin>
	ADS8688_SPI_WB(Addr<<1);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff29 	bl	8000f38 <ADS8688_SPI_WB>
	data = ADS8688_SPI_RB();
 80010e6:	f7ff ff67 	bl	8000fb8 <ADS8688_SPI_RB>
 80010ea:	4603      	mov	r3, r0
 80010ec:	73fb      	strb	r3, [r7, #15]
	data = ADS8688_SPI_RB();
 80010ee:	f7ff ff63 	bl	8000fb8 <ADS8688_SPI_RB>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]
	ADS_8688_nCS_H;
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010fc:	4803      	ldr	r0, [pc, #12]	@ (800110c <ADS8688_READ_Program_Register+0x4c>)
 80010fe:	f001 fd63 	bl	8002bc8 <HAL_GPIO_WritePin>
	return data;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40020000 	.word	0x40020000

08001110 <Enter_RESET_MODE>:


 void Enter_RESET_MODE(void)//软件复位模式，复位 program registers
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
 ADS8688_WriteCommandReg(RST);
 8001114:	f44f 4005 	mov.w	r0, #34048	@ 0x8500
 8001118:	f7ff ff86 	bl	8001028 <ADS8688_WriteCommandReg>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <AUTO_RST_Mode>:

void AUTO_RST_Mode(void)//进入自动扫描模式
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	ADS8688_WriteCommandReg(AUTO_RST);
 8001124:	f44f 4020 	mov.w	r0, #40960	@ 0xa000
 8001128:	f7ff ff7e 	bl	8001028 <ADS8688_WriteCommandReg>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <MAN_Ch_n_Mode>:

void MAN_Ch_n_Mode(uint16_t ch)//手动模式
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
	ADS8688_WriteCommandReg(ch);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff73 	bl	8001028 <ADS8688_WriteCommandReg>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <Set_CH_Range_Select>:

void Set_CH_Range_Select(uint8_t ch,uint8_t range) //设置各个通道的范围
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	460a      	mov	r2, r1
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	4613      	mov	r3, r2
 8001158:	71bb      	strb	r3, [r7, #6]
	ADS8688_Write_Program_Register(ch,range);
 800115a:	79ba      	ldrb	r2, [r7, #6]
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff85 	bl	8001070 <ADS8688_Write_Program_Register>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <ADS8688_Init_Mult>:
	MAN_Ch_n_Mode(MAN_Ch_1);
	//HAL_Delay(300);
 }
*/
 void ADS8688_Init_Mult(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8001174:	f000 fa38 	bl	80015e8 <MX_GPIO_Init>
	ADS_8688_RST_PD_H;
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800117e:	4813      	ldr	r0, [pc, #76]	@ (80011cc <ADS8688_Init_Mult+0x5c>)
 8001180:	f001 fd22 	bl	8002bc8 <HAL_GPIO_WritePin>
	ADS_8688_DAISY_IN_L;
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800118a:	4811      	ldr	r0, [pc, #68]	@ (80011d0 <ADS8688_Init_Mult+0x60>)
 800118c:	f001 fd1c 	bl	8002bc8 <HAL_GPIO_WritePin>
	test=ADS8688_INIT();
 8001190:	f000 f822 	bl	80011d8 <ADS8688_INIT>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <ADS8688_Init_Mult+0x64>)
 800119a:	701a      	strb	r2, [r3, #0]
	//Enter_RESET_MODE();
	//进入配置
	//ADS8688_Write_Program_Register(0X00,0X00);
	//开启通道
	ADS8688_Write_Program_Register(0X02,0Xfc);
 800119c:	21fc      	movs	r1, #252	@ 0xfc
 800119e:	2002      	movs	r0, #2
 80011a0:	f7ff ff66 	bl	8001070 <ADS8688_Write_Program_Register>
	ADS8688_Write_Program_Register(0x01,0x03);//所有通道退出低功耗状态
 80011a4:	2103      	movs	r1, #3
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff ff62 	bl	8001070 <ADS8688_Write_Program_Register>


	Set_CH_Range_Select(CH1,0x01);//设置通道1的输入范围：+-1.25*Vref
 80011ac:	2101      	movs	r1, #1
 80011ae:	2005      	movs	r0, #5
 80011b0:	f7ff ffcb 	bl	800114a <Set_CH_Range_Select>
	Set_CH_Range_Select(CH2,0x01);
 80011b4:	2101      	movs	r1, #1
 80011b6:	2006      	movs	r0, #6
 80011b8:	f7ff ffc7 	bl	800114a <Set_CH_Range_Select>
	// //0x02 -> +-0.625*ref
	// //0x03 -> +2.5*ref
	// //0x04 -> +1.25*ref
	//AUTO_RST_Mode();//进入自动扫描模式
	//ADS8688_Write_Program_Register(0xa0,0x03);
	HAL_Delay(10);
 80011bc:	200a      	movs	r0, #10
 80011be:	f001 f99f 	bl	8002500 <HAL_Delay>
  AUTO_RST_Mode();
 80011c2:	f7ff ffad 	bl	8001120 <AUTO_RST_Mode>

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	200001f4 	.word	0x200001f4

080011d8 <ADS8688_INIT>:

 uint8_t ADS8688_INIT(void)
 {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
   uint8_t i;
 //	RST_PD_H;
 //  DAISY_IN_L;


   Enter_RESET_MODE();
 80011de:	f7ff ff97 	bl	8001110 <Enter_RESET_MODE>
   ADS8688_Write_Program_Register(0X01,0XFF);
 80011e2:	21ff      	movs	r1, #255	@ 0xff
 80011e4:	2001      	movs	r0, #1
 80011e6:	f7ff ff43 	bl	8001070 <ADS8688_Write_Program_Register>
   i = ADS8688_READ_Program_Register(0X01);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f7ff ff68 	bl	80010c0 <ADS8688_READ_Program_Register>
 80011f0:	4603      	mov	r3, r0
 80011f2:	71fb      	strb	r3, [r7, #7]
   return i;
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 }
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <Get_MAN_Ch_n_Mode_Data>:




uint16_t Get_MAN_Ch_n_Mode_Data(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
	uint8_t datah=0,datal=0;
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	2300      	movs	r3, #0
 800120c:	71bb      	strb	r3, [r7, #6]
	ADS_8688_nCS_L;
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001214:	4811      	ldr	r0, [pc, #68]	@ (800125c <Get_MAN_Ch_n_Mode_Data+0x5c>)
 8001216:	f001 fcd7 	bl	8002bc8 <HAL_GPIO_WritePin>
	ADS8688_SPI_WB(0X00);
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff fe8c 	bl	8000f38 <ADS8688_SPI_WB>
	ADS8688_SPI_WB(0X00);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fe89 	bl	8000f38 <ADS8688_SPI_WB>
	datah = ADS8688_SPI_RB();
 8001226:	f7ff fec7 	bl	8000fb8 <ADS8688_SPI_RB>
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	datal = ADS8688_SPI_RB();
 800122e:	f7ff fec3 	bl	8000fb8 <ADS8688_SPI_RB>
 8001232:	4603      	mov	r3, r0
 8001234:	71bb      	strb	r3, [r7, #6]
	ADS_8688_nCS_H;
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <Get_MAN_Ch_n_Mode_Data+0x5c>)
 800123e:	f001 fcc3 	bl	8002bc8 <HAL_GPIO_WritePin>
	return (datah<<8 | datal);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21a      	sxth	r2, r3
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21b      	sxth	r3, r3
 8001250:	b29b      	uxth	r3, r3
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40020000 	.word	0x40020000

08001260 <get_vol>:
	  real_val[0]=(float)((double)(get_val[0]-32762)/32767.0f*5.120f);
	  real_val[1]=(float)((double)(get_val[1]-32762)/32767.0f*5.120f);
}

float get_vol(uint16_t channel)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
  switch(channel)
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	2b07      	cmp	r3, #7
 800126e:	f200 813b 	bhi.w	80014e8 <get_vol+0x288>
 8001272:	a201      	add	r2, pc, #4	@ (adr r2, 8001278 <get_vol+0x18>)
 8001274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001278:	08001299 	.word	0x08001299
 800127c:	080012e3 	.word	0x080012e3
 8001280:	0800132d 	.word	0x0800132d
 8001284:	08001377 	.word	0x08001377
 8001288:	080013c1 	.word	0x080013c1
 800128c:	0800140b 	.word	0x0800140b
 8001290:	08001455 	.word	0x08001455
 8001294:	0800149f 	.word	0x0800149f
  {
    case 0:
	  MAN_Ch_n_Mode(MAN_Ch_1);
 8001298:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800129c:	f7ff ff48 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val1  = Get_MAN_Ch_n_Mode_Data();//获取通道0的值
 80012a0:	f7ff ffae 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 80012a4:	4603      	mov	r3, r0
 80012a6:	813b      	strh	r3, [r7, #8]
	  return (float)((double)(val1-32762)/32767.0f*5.120f);
 80012a8:	893b      	ldrh	r3, [r7, #8]
 80012aa:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 80012ae:	3b7a      	subs	r3, #122	@ 0x7a
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f937 	bl	8000524 <__aeabi_i2d>
 80012b6:	a391      	add	r3, pc, #580	@ (adr r3, 80014fc <get_vol+0x29c>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff fac6 	bl	800084c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	a38e      	add	r3, pc, #568	@ (adr r3, 8001504 <get_vol+0x2a4>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff f993 	bl	80005f8 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fc65 	bl	8000ba8 <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
 80012e0:	e103      	b.n	80014ea <get_vol+0x28a>
	  break;
	case 1:
	  MAN_Ch_n_Mode(MAN_Ch_2);
 80012e2:	f44f 4044 	mov.w	r0, #50176	@ 0xc400
 80012e6:	f7ff ff23 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val2 = Get_MAN_Ch_n_Mode_Data();//获取通道1的值
 80012ea:	f7ff ff89 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 80012ee:	4603      	mov	r3, r0
 80012f0:	817b      	strh	r3, [r7, #10]
	  return (float)((double)(val2-32762)/32767.0f*5.120f);
 80012f2:	897b      	ldrh	r3, [r7, #10]
 80012f4:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 80012f8:	3b7a      	subs	r3, #122	@ 0x7a
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f912 	bl	8000524 <__aeabi_i2d>
 8001300:	a37e      	add	r3, pc, #504	@ (adr r3, 80014fc <get_vol+0x29c>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff faa1 	bl	800084c <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	a37c      	add	r3, pc, #496	@ (adr r3, 8001504 <get_vol+0x2a4>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff f96e 	bl	80005f8 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fc40 	bl	8000ba8 <__aeabi_d2f>
 8001328:	4603      	mov	r3, r0
 800132a:	e0de      	b.n	80014ea <get_vol+0x28a>
	  break;
	case 2:
	  MAN_Ch_n_Mode(MAN_Ch_3);
 800132c:	f44f 4048 	mov.w	r0, #51200	@ 0xc800
 8001330:	f7ff fefe 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val3 = Get_MAN_Ch_n_Mode_Data();//获取通道2的值
 8001334:	f7ff ff64 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 8001338:	4603      	mov	r3, r0
 800133a:	81bb      	strh	r3, [r7, #12]
	  return (float)((double)(val3-32762)/32767.0f*5.120f);
 800133c:	89bb      	ldrh	r3, [r7, #12]
 800133e:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001342:	3b7a      	subs	r3, #122	@ 0x7a
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8ed 	bl	8000524 <__aeabi_i2d>
 800134a:	a36c      	add	r3, pc, #432	@ (adr r3, 80014fc <get_vol+0x29c>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff fa7c 	bl	800084c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	a369      	add	r3, pc, #420	@ (adr r3, 8001504 <get_vol+0x2a4>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff f949 	bl	80005f8 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fc1b 	bl	8000ba8 <__aeabi_d2f>
 8001372:	4603      	mov	r3, r0
 8001374:	e0b9      	b.n	80014ea <get_vol+0x28a>
	  break;
	case 3:
	  MAN_Ch_n_Mode(MAN_Ch_4);
 8001376:	f44f 404c 	mov.w	r0, #52224	@ 0xcc00
 800137a:	f7ff fed9 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val4 = Get_MAN_Ch_n_Mode_Data();//获取通道3的值
 800137e:	f7ff ff3f 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 8001382:	4603      	mov	r3, r0
 8001384:	81fb      	strh	r3, [r7, #14]
	  return (float)((double)(val4-32762)/32767.0f*5.120f);
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 800138c:	3b7a      	subs	r3, #122	@ 0x7a
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f8c8 	bl	8000524 <__aeabi_i2d>
 8001394:	a359      	add	r3, pc, #356	@ (adr r3, 80014fc <get_vol+0x29c>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f7ff fa57 	bl	800084c <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	a357      	add	r3, pc, #348	@ (adr r3, 8001504 <get_vol+0x2a4>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff f924 	bl	80005f8 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fbf6 	bl	8000ba8 <__aeabi_d2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	e094      	b.n	80014ea <get_vol+0x28a>
	  break;
	case 4:
	  MAN_Ch_n_Mode(MAN_Ch_5);
 80013c0:	f44f 4050 	mov.w	r0, #53248	@ 0xd000
 80013c4:	f7ff feb4 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val5 = Get_MAN_Ch_n_Mode_Data();//获取通道4的值
 80013c8:	f7ff ff1a 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 80013cc:	4603      	mov	r3, r0
 80013ce:	823b      	strh	r3, [r7, #16]
	  return (float)((double)(val5-32762)/32767.0f*5.120f);
 80013d0:	8a3b      	ldrh	r3, [r7, #16]
 80013d2:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 80013d6:	3b7a      	subs	r3, #122	@ 0x7a
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8a3 	bl	8000524 <__aeabi_i2d>
 80013de:	a347      	add	r3, pc, #284	@ (adr r3, 80014fc <get_vol+0x29c>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff fa32 	bl	800084c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	a344      	add	r3, pc, #272	@ (adr r3, 8001504 <get_vol+0x2a4>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f8ff 	bl	80005f8 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fbd1 	bl	8000ba8 <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
 8001408:	e06f      	b.n	80014ea <get_vol+0x28a>
	  break;
	case 5:
	  MAN_Ch_n_Mode(MAN_Ch_6);
 800140a:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 800140e:	f7ff fe8f 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val6 = Get_MAN_Ch_n_Mode_Data();//获取通道5的值
 8001412:	f7ff fef5 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 8001416:	4603      	mov	r3, r0
 8001418:	827b      	strh	r3, [r7, #18]
	  return (float)((double)(val6-32762)/32767.0f*5.120f);
 800141a:	8a7b      	ldrh	r3, [r7, #18]
 800141c:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001420:	3b7a      	subs	r3, #122	@ 0x7a
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f87e 	bl	8000524 <__aeabi_i2d>
 8001428:	a334      	add	r3, pc, #208	@ (adr r3, 80014fc <get_vol+0x29c>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff fa0d 	bl	800084c <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	a332      	add	r3, pc, #200	@ (adr r3, 8001504 <get_vol+0x2a4>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff f8da 	bl	80005f8 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fbac 	bl	8000ba8 <__aeabi_d2f>
 8001450:	4603      	mov	r3, r0
 8001452:	e04a      	b.n	80014ea <get_vol+0x28a>
	  break;
	case 6:
	  MAN_Ch_n_Mode(MAN_Ch_7);
 8001454:	f44f 4058 	mov.w	r0, #55296	@ 0xd800
 8001458:	f7ff fe6a 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val7 = Get_MAN_Ch_n_Mode_Data();//获取通道6的值
 800145c:	f7ff fed0 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 8001460:	4603      	mov	r3, r0
 8001462:	82bb      	strh	r3, [r7, #20]
	  return (float)((double)(val7-32762)/32767.0f*5.120f);
 8001464:	8abb      	ldrh	r3, [r7, #20]
 8001466:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 800146a:	3b7a      	subs	r3, #122	@ 0x7a
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f859 	bl	8000524 <__aeabi_i2d>
 8001472:	a322      	add	r3, pc, #136	@ (adr r3, 80014fc <get_vol+0x29c>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f9e8 	bl	800084c <__aeabi_ddiv>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	a31f      	add	r3, pc, #124	@ (adr r3, 8001504 <get_vol+0x2a4>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f8b5 	bl	80005f8 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fb87 	bl	8000ba8 <__aeabi_d2f>
 800149a:	4603      	mov	r3, r0
 800149c:	e025      	b.n	80014ea <get_vol+0x28a>
	  break;
	case 7:
	  MAN_Ch_n_Mode(MAN_Ch_8);
 800149e:	f44f 405c 	mov.w	r0, #56320	@ 0xdc00
 80014a2:	f7ff fe45 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val8 = Get_MAN_Ch_n_Mode_Data();//获取通道7的值
 80014a6:	f7ff feab 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 80014aa:	4603      	mov	r3, r0
 80014ac:	82fb      	strh	r3, [r7, #22]
	  return (float)((double)(val8-32762)/32767.0f*5.120f);
 80014ae:	8afb      	ldrh	r3, [r7, #22]
 80014b0:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 80014b4:	3b7a      	subs	r3, #122	@ 0x7a
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f834 	bl	8000524 <__aeabi_i2d>
 80014bc:	a30f      	add	r3, pc, #60	@ (adr r3, 80014fc <get_vol+0x29c>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f9c3 	bl	800084c <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	a30d      	add	r3, pc, #52	@ (adr r3, 8001504 <get_vol+0x2a4>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7ff f890 	bl	80005f8 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fb62 	bl	8000ba8 <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	e000      	b.n	80014ea <get_vol+0x28a>
	  break;
	default:
	  return 123.456;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <get_vol+0x298>)
  }
}
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eeb0 0a67 	vmov.f32	s0, s15
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	42f6e979 	.word	0x42f6e979
 80014fc:	00000000 	.word	0x00000000
 8001500:	40dfffc0 	.word	0x40dfffc0
 8001504:	40000000 	.word	0x40000000
 8001508:	40147ae1 	.word	0x40147ae1

0800150c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001512:	463b      	mov	r3, r7
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <MX_DAC_Init+0x4c>)
 800151c:	4a0f      	ldr	r2, [pc, #60]	@ (800155c <MX_DAC_Init+0x50>)
 800151e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001520:	480d      	ldr	r0, [pc, #52]	@ (8001558 <MX_DAC_Init+0x4c>)
 8001522:	f001 f922 	bl	800276a <HAL_DAC_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800152c:	f000 fc40 	bl	8001db0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001530:	233c      	movs	r3, #60	@ 0x3c
 8001532:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <MX_DAC_Init+0x4c>)
 8001540:	f001 f935 	bl	80027ae <HAL_DAC_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800154a:	f000 fc31 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200001f8 	.word	0x200001f8
 800155c:	40007400 	.word	0x40007400

08001560 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a17      	ldr	r2, [pc, #92]	@ (80015dc <HAL_DAC_MspInit+0x7c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d127      	bne.n	80015d2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <HAL_DAC_MspInit+0x80>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	4a15      	ldr	r2, [pc, #84]	@ (80015e0 <HAL_DAC_MspInit+0x80>)
 800158c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001590:	6413      	str	r3, [r2, #64]	@ 0x40
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <HAL_DAC_MspInit+0x80>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <HAL_DAC_MspInit+0x80>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a0e      	ldr	r2, [pc, #56]	@ (80015e0 <HAL_DAC_MspInit+0x80>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <HAL_DAC_MspInit+0x80>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ba:	2310      	movs	r3, #16
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015be:	2303      	movs	r3, #3
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <HAL_DAC_MspInit+0x84>)
 80015ce:	f001 f947 	bl	8002860 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	@ 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40007400 	.word	0x40007400
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000

080015e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	@ 0x30
 80015ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	4b69      	ldr	r3, [pc, #420]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a68      	ldr	r2, [pc, #416]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001608:	f043 0320 	orr.w	r3, r3, #32
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b66      	ldr	r3, [pc, #408]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	4b62      	ldr	r3, [pc, #392]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a61      	ldr	r2, [pc, #388]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b5f      	ldr	r3, [pc, #380]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b5b      	ldr	r3, [pc, #364]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a5a      	ldr	r2, [pc, #360]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b58      	ldr	r3, [pc, #352]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b54      	ldr	r3, [pc, #336]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a53      	ldr	r2, [pc, #332]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 800165c:	f043 0310 	orr.w	r3, r3, #16
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b51      	ldr	r3, [pc, #324]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b4d      	ldr	r3, [pc, #308]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a4c      	ldr	r2, [pc, #304]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b4a      	ldr	r3, [pc, #296]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b46      	ldr	r3, [pc, #280]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a45      	ldr	r2, [pc, #276]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b43      	ldr	r3, [pc, #268]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4b3f      	ldr	r3, [pc, #252]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a3e      	ldr	r2, [pc, #248]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b3c      	ldr	r3, [pc, #240]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80016c8:	4838      	ldr	r0, [pc, #224]	@ (80017ac <MX_GPIO_Init+0x1c4>)
 80016ca:	f001 fa7d 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relays_GPIO_Port, Relays_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016d4:	4836      	ldr	r0, [pc, #216]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 80016d6:	f001 fa77 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADS_RST_Pin|ADS_SCLK_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80016e0:	4834      	ldr	r0, [pc, #208]	@ (80017b4 <MX_GPIO_Init+0x1cc>)
 80016e2:	f001 fa71 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADS_DAISY_Pin|ADS_SDI_Pin|ADS_nCS_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 4111 	mov.w	r1, #37120	@ 0x9100
 80016ec:	4832      	ldr	r0, [pc, #200]	@ (80017b8 <MX_GPIO_Init+0x1d0>)
 80016ee:	f001 fa6b 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 80016f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001700:	2302      	movs	r3, #2
 8001702:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4619      	mov	r1, r3
 800170a:	4828      	ldr	r0, [pc, #160]	@ (80017ac <MX_GPIO_Init+0x1c4>)
 800170c:	f001 f8a8 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relays_Pin;
 8001710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Relays_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	4619      	mov	r1, r3
 8001728:	4821      	ldr	r0, [pc, #132]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 800172a:	f001 f899 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADS_RST_Pin|ADS_SCLK_Pin;
 800172e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	481b      	ldr	r0, [pc, #108]	@ (80017b4 <MX_GPIO_Init+0x1cc>)
 8001748:	f001 f88a 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ADS_DAISY_Pin|ADS_SDI_Pin|ADS_nCS_Pin;
 800174c:	f44f 4311 	mov.w	r3, #37120	@ 0x9100
 8001750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	2301      	movs	r3, #1
 8001754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	4814      	ldr	r0, [pc, #80]	@ (80017b8 <MX_GPIO_Init+0x1d0>)
 8001766:	f001 f87b 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADS_SDO_Pin;
 800176a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ADS_SDO_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	480e      	ldr	r0, [pc, #56]	@ (80017b8 <MX_GPIO_Init+0x1d0>)
 8001780:	f001 f86e 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8001784:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800178a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800178e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001790:	2301      	movs	r3, #1
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	4808      	ldr	r0, [pc, #32]	@ (80017bc <MX_GPIO_Init+0x1d4>)
 800179c:	f001 f860 	bl	8002860 <HAL_GPIO_Init>

}
 80017a0:	bf00      	nop
 80017a2:	3730      	adds	r7, #48	@ 0x30
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40021400 	.word	0x40021400
 80017b0:	40020c00 	.word	0x40020c00
 80017b4:	40020800 	.word	0x40020800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400

080017c0 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
//	__HAL_TIM_SET_COUNTER(&htim1,0);

	if(i==0)
 80017c8:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d110      	bne.n	80017f2 <HAL_TIM_IC_CaptureCallback+0x32>
	{
		time[i] = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_3);
 80017d0:	2108      	movs	r1, #8
 80017d2:	4815      	ldr	r0, [pc, #84]	@ (8001828 <HAL_TIM_IC_CaptureCallback+0x68>)
 80017d4:	f002 fb38 	bl	8003e48 <HAL_TIM_ReadCapturedValue>
 80017d8:	4602      	mov	r2, r0
 80017da:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4611      	mov	r1, r2
 80017e0:	4a12      	ldr	r2, [pc, #72]	@ (800182c <HAL_TIM_IC_CaptureCallback+0x6c>)
 80017e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		i++;
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	e015      	b.n	800181e <HAL_TIM_IC_CaptureCallback+0x5e>
	}
	else if(i==1)
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d110      	bne.n	800181c <HAL_TIM_IC_CaptureCallback+0x5c>
	{
		time[i] = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_3);
 80017fa:	2108      	movs	r1, #8
 80017fc:	480a      	ldr	r0, [pc, #40]	@ (8001828 <HAL_TIM_IC_CaptureCallback+0x68>)
 80017fe:	f002 fb23 	bl	8003e48 <HAL_TIM_ReadCapturedValue>
 8001802:	4602      	mov	r2, r0
 8001804:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4611      	mov	r1, r2
 800180a:	4a08      	ldr	r2, [pc, #32]	@ (800182c <HAL_TIM_IC_CaptureCallback+0x6c>)
 800180c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		i++;
 8001810:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	4a03      	ldr	r2, [pc, #12]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e000      	b.n	800181e <HAL_TIM_IC_CaptureCallback+0x5e>
	}
	else
	{
		return;
 800181c:	bf00      	nop
	}

}
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000218 	.word	0x20000218
 8001828:	20000258 	.word	0x20000258
 800182c:	2000020c 	.word	0x2000020c

08001830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b08a      	sub	sp, #40	@ 0x28
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001836:	f000 fdf1 	bl	800241c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800183a:	f000 f929 	bl	8001a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183e:	f7ff fed3 	bl	80015e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001842:	f000 fd1b 	bl	800227c <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001846:	f7ff fe61 	bl	800150c <MX_DAC_Init>
  MX_TIM3_Init();
 800184a:	f000 fc65 	bl	8002118 <MX_TIM3_Init>
  MX_TIM1_Init();
 800184e:	f000 fbef 	bl	8002030 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //初始化ADS8688
  ADS8688_Init_Mult();
 8001852:	f7ff fc8d 	bl	8001170 <ADS8688_Init_Mult>

  //初始化定时器一些参数
  HAL_TIM_Base_Start(&htim1);
 8001856:	4882      	ldr	r0, [pc, #520]	@ (8001a60 <main+0x230>)
 8001858:	f001 feb8 	bl	80035cc <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 800185c:	2108      	movs	r1, #8
 800185e:	4880      	ldr	r0, [pc, #512]	@ (8001a60 <main+0x230>)
 8001860:	f001 ff76 	bl	8003750 <HAL_TIM_IC_Start_IT>
  __HAL_TIM_SET_COUNTER(&htim1,0);
 8001864:	4b7e      	ldr	r3, [pc, #504]	@ (8001a60 <main+0x230>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2200      	movs	r2, #0
 800186a:	625a      	str	r2, [r3, #36]	@ 0x24

  //初始化继电器
  HAL_GPIO_WritePin(Relays_GPIO_Port, Relays_Pin, RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001872:	487c      	ldr	r0, [pc, #496]	@ (8001a64 <main+0x234>)
 8001874:	f001 f9a8 	bl	8002bc8 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //适当延时，使输入捕获频率测量完毕
  HAL_Delay(1000);
 8001878:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800187c:	f000 fe40 	bl	8002500 <HAL_Delay>
  //计算第一次的参数：freq,C,length
  calculate_length();
 8001880:	f000 f9a6 	bl	8001bd0 <calculate_length>

  HAL_Delay(1000);
 8001884:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001888:	f000 fe3a 	bl	8002500 <HAL_Delay>

  //进行第二次计算
  recalculate();
 800188c:	f000 fa4a 	bl	8001d24 <recalculate>
  //进行负载判断
  type = judge_type(connect_freq);
 8001890:	4b75      	ldr	r3, [pc, #468]	@ (8001a68 <main+0x238>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff f985 	bl	8000ba8 <__aeabi_d2f>
 800189e:	4603      	mov	r3, r0
 80018a0:	ee00 3a10 	vmov	s0, r3
 80018a4:	f000 f960 	bl	8001b68 <judge_type>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a70      	ldr	r2, [pc, #448]	@ (8001a6c <main+0x23c>)
 80018ac:	6013      	str	r3, [r2, #0]

  if(type == c_flag)
 80018ae:	4b6f      	ldr	r3, [pc, #444]	@ (8001a6c <main+0x23c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d16f      	bne.n	8001996 <main+0x166>
  {
	  double sum_connect = (-0.4052)*connect_freq/1000+60.846;
 80018b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001a68 <main+0x238>)
 80018b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018bc:	a35a      	add	r3, pc, #360	@ (adr r3, 8001a28 <main+0x1f8>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe fe99 	bl	80005f8 <__aeabi_dmul>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b67      	ldr	r3, [pc, #412]	@ (8001a70 <main+0x240>)
 80018d4:	f7fe ffba 	bl	800084c <__aeabi_ddiv>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	a353      	add	r3, pc, #332	@ (adr r3, 8001a30 <main+0x200>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe fcd1 	bl	800028c <__adddf3>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  double length_connect = sum_connect/(connect_freq/1000);
 80018f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a68 <main+0x238>)
 80018f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4b5c      	ldr	r3, [pc, #368]	@ (8001a70 <main+0x240>)
 80018fe:	f7fe ffa5 	bl	800084c <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800190a:	f7fe ff9f 	bl	800084c <__aeabi_ddiv>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  double C_connect = length_connect*46.167+18.992;
 8001916:	a348      	add	r3, pc, #288	@ (adr r3, 8001a38 <main+0x208>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001920:	f7fe fe6a 	bl	80005f8 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	a344      	add	r3, pc, #272	@ (adr r3, 8001a40 <main+0x210>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fcab 	bl	800028c <__adddf3>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  double real_c = 2.0755*(C_connect-C-add_C)+8.7644;
 800193e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a74 <main+0x244>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001948:	f7fe fc9e 	bl	8000288 <__aeabi_dsub>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	a33c      	add	r3, pc, #240	@ (adr r3, 8001a48 <main+0x218>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	f7fe fc95 	bl	8000288 <__aeabi_dsub>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	a33a      	add	r3, pc, #232	@ (adr r3, 8001a50 <main+0x220>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	f7fe fe44 	bl	80005f8 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	a337      	add	r3, pc, #220	@ (adr r3, 8001a58 <main+0x228>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fc85 	bl	800028c <__adddf3>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	e9c7 2300 	strd	r2, r3, [r7]
	  printf("newC=%f\r\n",real_c);
 800198a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800198e:	483a      	ldr	r0, [pc, #232]	@ (8001a78 <main+0x248>)
 8001990:	f003 ffa8 	bl	80058e4 <iprintf>
 8001994:	e043      	b.n	8001a1e <main+0x1ee>
  }
  else if(type == r_flag)
 8001996:	4b35      	ldr	r3, [pc, #212]	@ (8001a6c <main+0x23c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d13f      	bne.n	8001a1e <main+0x1ee>
  {
	 //写后续切换继电器操作
  	 HAL_GPIO_WritePin(Relays_GPIO_Port, Relays_Pin, SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019a4:	482f      	ldr	r0, [pc, #188]	@ (8001a64 <main+0x234>)
 80019a6:	f001 f90f 	bl	8002bc8 <HAL_GPIO_WritePin>
  	 HAL_Delay(100);
 80019aa:	2064      	movs	r0, #100	@ 0x64
 80019ac:	f000 fda8 	bl	8002500 <HAL_Delay>

  	 R_vol = get_vol(1);
 80019b0:	2001      	movs	r0, #1
 80019b2:	f7ff fc55 	bl	8001260 <get_vol>
 80019b6:	ee10 3a10 	vmov	r3, s0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fdc4 	bl	8000548 <__aeabi_f2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	492d      	ldr	r1, [pc, #180]	@ (8001a7c <main+0x24c>)
 80019c6:	e9c1 2300 	strd	r2, r3, [r1]
	 printf("R_vol=%f\r\n",R_vol);
 80019ca:	4b2c      	ldr	r3, [pc, #176]	@ (8001a7c <main+0x24c>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	482b      	ldr	r0, [pc, #172]	@ (8001a80 <main+0x250>)
 80019d2:	f003 ff87 	bl	80058e4 <iprintf>

 	 double R = (R_vol*Rs)/(5-R_vol);
 80019d6:	4b29      	ldr	r3, [pc, #164]	@ (8001a7c <main+0x24c>)
 80019d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4b28      	ldr	r3, [pc, #160]	@ (8001a84 <main+0x254>)
 80019e2:	f7fe fe09 	bl	80005f8 <__aeabi_dmul>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4614      	mov	r4, r2
 80019ec:	461d      	mov	r5, r3
 80019ee:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <main+0x24c>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f04f 0000 	mov.w	r0, #0
 80019f8:	4923      	ldr	r1, [pc, #140]	@ (8001a88 <main+0x258>)
 80019fa:	f7fe fc45 	bl	8000288 <__aeabi_dsub>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4620      	mov	r0, r4
 8001a04:	4629      	mov	r1, r5
 8001a06:	f7fe ff21 	bl	800084c <__aeabi_ddiv>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 	 printf("R=%f\r\n",R);
 8001a12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a16:	481d      	ldr	r0, [pc, #116]	@ (8001a8c <main+0x25c>)
 8001a18:	f003 ff64 	bl	80058e4 <iprintf>





    while (1)
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	e7fd      	b.n	8001a1e <main+0x1ee>
 8001a22:	bf00      	nop
 8001a24:	f3af 8000 	nop.w
 8001a28:	fb15b574 	.word	0xfb15b574
 8001a2c:	bfd9eecb 	.word	0xbfd9eecb
 8001a30:	ba5e353f 	.word	0xba5e353f
 8001a34:	404e6c49 	.word	0x404e6c49
 8001a38:	4189374c 	.word	0x4189374c
 8001a3c:	40471560 	.word	0x40471560
 8001a40:	b645a1cb 	.word	0xb645a1cb
 8001a44:	4032fdf3 	.word	0x4032fdf3
 8001a48:	66666666 	.word	0x66666666
 8001a4c:	3ffe6666 	.word	0x3ffe6666
 8001a50:	be76c8b4 	.word	0xbe76c8b4
 8001a54:	40009a9f 	.word	0x40009a9f
 8001a58:	6fd21ff3 	.word	0x6fd21ff3
 8001a5c:	4021875f 	.word	0x4021875f
 8001a60:	20000258 	.word	0x20000258
 8001a64:	40020c00 	.word	0x40020c00
 8001a68:	20000240 	.word	0x20000240
 8001a6c:	20000250 	.word	0x20000250
 8001a70:	408f4000 	.word	0x408f4000
 8001a74:	20000238 	.word	0x20000238
 8001a78:	080077f0 	.word	0x080077f0
 8001a7c:	20000248 	.word	0x20000248
 8001a80:	080077fc 	.word	0x080077fc
 8001a84:	40348000 	.word	0x40348000
 8001a88:	40140000 	.word	0x40140000
 8001a8c:	08007808 	.word	0x08007808

08001a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b094      	sub	sp, #80	@ 0x50
 8001a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a96:	f107 0320 	add.w	r3, r7, #32
 8001a9a:	2230      	movs	r2, #48	@ 0x30
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 ff75 	bl	800598e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <SystemClock_Config+0xcc>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	4a27      	ldr	r2, [pc, #156]	@ (8001b5c <SystemClock_Config+0xcc>)
 8001abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac4:	4b25      	ldr	r3, [pc, #148]	@ (8001b5c <SystemClock_Config+0xcc>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	4b22      	ldr	r3, [pc, #136]	@ (8001b60 <SystemClock_Config+0xd0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a21      	ldr	r2, [pc, #132]	@ (8001b60 <SystemClock_Config+0xd0>)
 8001ada:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b60 <SystemClock_Config+0xd0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aec:	2301      	movs	r3, #1
 8001aee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001af0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af6:	2302      	movs	r3, #2
 8001af8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001afa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b00:	2304      	movs	r3, #4
 8001b02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b04:	23a8      	movs	r3, #168	@ 0xa8
 8001b06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b10:	f107 0320 	add.w	r3, r7, #32
 8001b14:	4618      	mov	r0, r3
 8001b16:	f001 f871 	bl	8002bfc <HAL_RCC_OscConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b20:	f000 f946 	bl	8001db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b24:	230f      	movs	r3, #15
 8001b26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b30:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	2105      	movs	r1, #5
 8001b42:	4618      	mov	r0, r3
 8001b44:	f001 fad2 	bl	80030ec <HAL_RCC_ClockConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b4e:	f000 f92f 	bl	8001db0 <Error_Handler>
  }
}
 8001b52:	bf00      	nop
 8001b54:	3750      	adds	r7, #80	@ 0x50
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40007000 	.word	0x40007000
 8001b64:	00000000 	.word	0x00000000

08001b68 <judge_type>:

/* USER CODE BEGIN 4 */
int judge_type(float connect_freq)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	ed87 0a01 	vstr	s0, [r7, #4]
	//如果不震荡了，那就是接入了电阻
	if(connect_freq == 0)
 8001b72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7e:	d101      	bne.n	8001b84 <judge_type+0x1c>
	{
		return r_flag;
 8001b80:	2302      	movs	r3, #2
 8001b82:	e018      	b.n	8001bb6 <judge_type+0x4e>
	}
	//如果频率和开路的基本频率基本一样，那么就是开路
	else if((basic_freq-connect_freq)<40e3)
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7fe fcdf 	bl	8000548 <__aeabi_f2d>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	f04f 0000 	mov.w	r0, #0
 8001b92:	490d      	ldr	r1, [pc, #52]	@ (8001bc8 <judge_type+0x60>)
 8001b94:	f7fe fb78 	bl	8000288 <__aeabi_dsub>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	a307      	add	r3, pc, #28	@ (adr r3, 8001bc0 <judge_type+0x58>)
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	f7fe ff99 	bl	8000adc <__aeabi_dcmplt>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <judge_type+0x4c>
	{
		return open_flag;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e000      	b.n	8001bb6 <judge_type+0x4e>
	}
	//否则就是电容接入
	else
	{
		return c_flag;
 8001bb4:	2301      	movs	r3, #1
	}
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	40e38800 	.word	0x40e38800
 8001bc8:	41001d00 	.word	0x41001d00
 8001bcc:	00000000 	.word	0x00000000

08001bd0 <calculate_length>:


void calculate_length()
{
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	time[2]=time[1]-time[0];
 8001bd4:	4b48      	ldr	r3, [pc, #288]	@ (8001cf8 <calculate_length+0x128>)
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4b47      	ldr	r3, [pc, #284]	@ (8001cf8 <calculate_length+0x128>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	4a46      	ldr	r2, [pc, #280]	@ (8001cf8 <calculate_length+0x128>)
 8001be0:	6093      	str	r3, [r2, #8]
	printf("%d\r\n",time[2]);
 8001be2:	4b45      	ldr	r3, [pc, #276]	@ (8001cf8 <calculate_length+0x128>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	4619      	mov	r1, r3
 8001be8:	4844      	ldr	r0, [pc, #272]	@ (8001cfc <calculate_length+0x12c>)
 8001bea:	f003 fe7b 	bl	80058e4 <iprintf>
	freq= (84*1000000)/time[2];
 8001bee:	4b42      	ldr	r3, [pc, #264]	@ (8001cf8 <calculate_length+0x128>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	4a43      	ldr	r2, [pc, #268]	@ (8001d00 <calculate_length+0x130>)
 8001bf4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fc93 	bl	8000524 <__aeabi_i2d>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4940      	ldr	r1, [pc, #256]	@ (8001d04 <calculate_length+0x134>)
 8001c04:	e9c1 2300 	strd	r2, r3, [r1]
	printf("freq=%f k\r\n",freq/1000);
 8001c08:	4b3e      	ldr	r3, [pc, #248]	@ (8001d04 <calculate_length+0x134>)
 8001c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	4b3d      	ldr	r3, [pc, #244]	@ (8001d08 <calculate_length+0x138>)
 8001c14:	f7fe fe1a 	bl	800084c <__aeabi_ddiv>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	483b      	ldr	r0, [pc, #236]	@ (8001d0c <calculate_length+0x13c>)
 8001c1e:	f003 fe61 	bl	80058e4 <iprintf>
	sum = freq_slope*freq/1000+freq_intercept;
 8001c22:	4b38      	ldr	r3, [pc, #224]	@ (8001d04 <calculate_length+0x134>)
 8001c24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c28:	a32b      	add	r3, pc, #172	@ (adr r3, 8001cd8 <calculate_length+0x108>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	f7fe fce3 	bl	80005f8 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b32      	ldr	r3, [pc, #200]	@ (8001d08 <calculate_length+0x138>)
 8001c40:	f7fe fe04 	bl	800084c <__aeabi_ddiv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	a324      	add	r3, pc, #144	@ (adr r3, 8001ce0 <calculate_length+0x110>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fb1b 	bl	800028c <__adddf3>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	492d      	ldr	r1, [pc, #180]	@ (8001d10 <calculate_length+0x140>)
 8001c5c:	e9c1 2300 	strd	r2, r3, [r1]
	length = sum/(freq/1000);
 8001c60:	4b2b      	ldr	r3, [pc, #172]	@ (8001d10 <calculate_length+0x140>)
 8001c62:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001c66:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <calculate_length+0x134>)
 8001c68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <calculate_length+0x138>)
 8001c72:	f7fe fdeb 	bl	800084c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	f7fe fde5 	bl	800084c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4923      	ldr	r1, [pc, #140]	@ (8001d14 <calculate_length+0x144>)
 8001c88:	e9c1 2300 	strd	r2, r3, [r1]
	printf("length=%f\r\n",length);
 8001c8c:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <calculate_length+0x144>)
 8001c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c92:	4821      	ldr	r0, [pc, #132]	@ (8001d18 <calculate_length+0x148>)
 8001c94:	f003 fe26 	bl	80058e4 <iprintf>
	C = length*46.167+18.992;
 8001c98:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <calculate_length+0x144>)
 8001c9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c9e:	a312      	add	r3, pc, #72	@ (adr r3, 8001ce8 <calculate_length+0x118>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fca8 	bl	80005f8 <__aeabi_dmul>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	a30f      	add	r3, pc, #60	@ (adr r3, 8001cf0 <calculate_length+0x120>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f7fe fae9 	bl	800028c <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4917      	ldr	r1, [pc, #92]	@ (8001d1c <calculate_length+0x14c>)
 8001cc0:	e9c1 2300 	strd	r2, r3, [r1]
	printf("C=%f\r\n",C);
 8001cc4:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <calculate_length+0x14c>)
 8001cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cca:	4815      	ldr	r0, [pc, #84]	@ (8001d20 <calculate_length+0x150>)
 8001ccc:	f003 fe0a 	bl	80058e4 <iprintf>
}
 8001cd0:	bf00      	nop
 8001cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd4:	f3af 8000 	nop.w
 8001cd8:	5c28f5c3 	.word	0x5c28f5c3
 8001cdc:	bfddc28f 	.word	0xbfddc28f
 8001ce0:	b4395810 	.word	0xb4395810
 8001ce4:	404e66c8 	.word	0x404e66c8
 8001ce8:	4189374c 	.word	0x4189374c
 8001cec:	40471560 	.word	0x40471560
 8001cf0:	b645a1cb 	.word	0xb645a1cb
 8001cf4:	4032fdf3 	.word	0x4032fdf3
 8001cf8:	2000020c 	.word	0x2000020c
 8001cfc:	08007810 	.word	0x08007810
 8001d00:	0501bd00 	.word	0x0501bd00
 8001d04:	20000220 	.word	0x20000220
 8001d08:	408f4000 	.word	0x408f4000
 8001d0c:	08007818 	.word	0x08007818
 8001d10:	20000228 	.word	0x20000228
 8001d14:	20000230 	.word	0x20000230
 8001d18:	08007824 	.word	0x08007824
 8001d1c:	20000238 	.word	0x20000238
 8001d20:	08007830 	.word	0x08007830

08001d24 <recalculate>:

void recalculate()
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	//第二次计算
	time[1] = time[0] = 0;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <recalculate+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <recalculate+0x74>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a19      	ldr	r2, [pc, #100]	@ (8001d98 <recalculate+0x74>)
 8001d34:	6053      	str	r3, [r2, #4]
	i = 0;
 8001d36:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <recalculate+0x78>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8001d3c:	4b18      	ldr	r3, [pc, #96]	@ (8001da0 <recalculate+0x7c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2200      	movs	r2, #0
 8001d42:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_Delay(1000);
 8001d44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d48:	f000 fbda 	bl	8002500 <HAL_Delay>
	time[2]=time[1]-time[0];
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <recalculate+0x74>)
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <recalculate+0x74>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	4a10      	ldr	r2, [pc, #64]	@ (8001d98 <recalculate+0x74>)
 8001d58:	6093      	str	r3, [r2, #8]
	if(time[2] == 0)
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <recalculate+0x74>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10a      	bne.n	8001d78 <recalculate+0x54>
	{
		connect_freq = 0;
 8001d62:	4910      	ldr	r1, [pc, #64]	@ (8001da4 <recalculate+0x80>)
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	e9c1 2300 	strd	r2, r3, [r1]
		printf("电阻");
 8001d70:	480d      	ldr	r0, [pc, #52]	@ (8001da8 <recalculate+0x84>)
 8001d72:	f003 fdb7 	bl	80058e4 <iprintf>
	}
	else
	{
		connect_freq= (84*1000000)/time[2];
	}
}
 8001d76:	e00c      	b.n	8001d92 <recalculate+0x6e>
		connect_freq= (84*1000000)/time[2];
 8001d78:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <recalculate+0x74>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dac <recalculate+0x88>)
 8001d7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fbce 	bl	8000524 <__aeabi_i2d>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4905      	ldr	r1, [pc, #20]	@ (8001da4 <recalculate+0x80>)
 8001d8e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000020c 	.word	0x2000020c
 8001d9c:	20000218 	.word	0x20000218
 8001da0:	20000258 	.word	0x20000258
 8001da4:	20000240 	.word	0x20000240
 8001da8:	08007838 	.word	0x08007838
 8001dac:	0501bd00 	.word	0x0501bd00

08001db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db4:	b672      	cpsid	i
}
 8001db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <Error_Handler+0x8>

08001dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	4a0f      	ldr	r2, [pc, #60]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <NMI_Handler+0x4>

08001e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <HardFault_Handler+0x4>

08001e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <MemManage_Handler+0x4>

08001e24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e62:	f000 fb2d 	bl	80024c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <TIM1_CC_IRQHandler+0x10>)
 8001e72:	f001 fd95 	bl	80039a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000258 	.word	0x20000258

08001e80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return 1;
 8001e84:	2301      	movs	r3, #1
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_kill>:

int _kill(int pid, int sig)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e9a:	f003 fdcb 	bl	8005a34 <__errno>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2216      	movs	r2, #22
 8001ea2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_exit>:

void _exit (int status)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ffe7 	bl	8001e90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec2:	bf00      	nop
 8001ec4:	e7fd      	b.n	8001ec2 <_exit+0x12>

08001ec6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	e00a      	b.n	8001eee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ed8:	f000 fa54 	bl	8002384 <__io_getchar>
 8001edc:	4601      	mov	r1, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	60ba      	str	r2, [r7, #8]
 8001ee4:	b2ca      	uxtb	r2, r1
 8001ee6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3301      	adds	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dbf0      	blt.n	8001ed8 <_read+0x12>
  }

  return len;
 8001ef6:	687b      	ldr	r3, [r7, #4]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e009      	b.n	8001f26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	60ba      	str	r2, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fa20 	bl	8002360 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3301      	adds	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	dbf1      	blt.n	8001f12 <_write+0x12>
  }
  return len;
 8001f2e:	687b      	ldr	r3, [r7, #4]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_close>:

int _close(int file)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f60:	605a      	str	r2, [r3, #4]
  return 0;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <_isatty>:

int _isatty(int file)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f78:	2301      	movs	r3, #1
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	@ (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	@ (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd0:	f003 fd30 	bl	8005a34 <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e009      	b.n	8001ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a05      	ldr	r2, [pc, #20]	@ (8002004 <_sbrk+0x64>)
 8001ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20020000 	.word	0x20020000
 8002000:	00000400 	.word	0x00000400
 8002004:	20000254 	.word	0x20000254
 8002008:	20000480 	.word	0x20000480

0800200c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <SystemInit+0x20>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002016:	4a05      	ldr	r2, [pc, #20]	@ (800202c <SystemInit+0x20>)
 8002018:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800201c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	@ 0x28
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0318 	add.w	r3, r7, #24
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800204e:	463b      	mov	r3, r7
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800205a:	4b2d      	ldr	r3, [pc, #180]	@ (8002110 <MX_TIM1_Init+0xe0>)
 800205c:	4a2d      	ldr	r2, [pc, #180]	@ (8002114 <MX_TIM1_Init+0xe4>)
 800205e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8002060:	4b2b      	ldr	r3, [pc, #172]	@ (8002110 <MX_TIM1_Init+0xe0>)
 8002062:	2201      	movs	r2, #1
 8002064:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002066:	4b2a      	ldr	r3, [pc, #168]	@ (8002110 <MX_TIM1_Init+0xe0>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800206c:	4b28      	ldr	r3, [pc, #160]	@ (8002110 <MX_TIM1_Init+0xe0>)
 800206e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002072:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002074:	4b26      	ldr	r3, [pc, #152]	@ (8002110 <MX_TIM1_Init+0xe0>)
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800207a:	4b25      	ldr	r3, [pc, #148]	@ (8002110 <MX_TIM1_Init+0xe0>)
 800207c:	2200      	movs	r2, #0
 800207e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	4b23      	ldr	r3, [pc, #140]	@ (8002110 <MX_TIM1_Init+0xe0>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002086:	4822      	ldr	r0, [pc, #136]	@ (8002110 <MX_TIM1_Init+0xe0>)
 8002088:	f001 fa50 	bl	800352c <HAL_TIM_Base_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8002092:	f7ff fe8d 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800209a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800209c:	f107 0318 	add.w	r3, r7, #24
 80020a0:	4619      	mov	r1, r3
 80020a2:	481b      	ldr	r0, [pc, #108]	@ (8002110 <MX_TIM1_Init+0xe0>)
 80020a4:	f001 fe08 	bl	8003cb8 <HAL_TIM_ConfigClockSource>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80020ae:	f7ff fe7f 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80020b2:	4817      	ldr	r0, [pc, #92]	@ (8002110 <MX_TIM1_Init+0xe0>)
 80020b4:	f001 faf2 	bl	800369c <HAL_TIM_IC_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80020be:	f7ff fe77 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020ca:	f107 0310 	add.w	r3, r7, #16
 80020ce:	4619      	mov	r1, r3
 80020d0:	480f      	ldr	r0, [pc, #60]	@ (8002110 <MX_TIM1_Init+0xe0>)
 80020d2:	f002 f9bb 	bl	800444c <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80020dc:	f7ff fe68 	bl	8001db0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020e0:	2300      	movs	r3, #0
 80020e2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020e4:	2301      	movs	r3, #1
 80020e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80020f0:	463b      	mov	r3, r7
 80020f2:	2208      	movs	r2, #8
 80020f4:	4619      	mov	r1, r3
 80020f6:	4806      	ldr	r0, [pc, #24]	@ (8002110 <MX_TIM1_Init+0xe0>)
 80020f8:	f001 fd42 	bl	8003b80 <HAL_TIM_IC_ConfigChannel>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002102:	f7ff fe55 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	3728      	adds	r7, #40	@ 0x28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000258 	.word	0x20000258
 8002114:	40010000 	.word	0x40010000

08002118 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211e:	f107 0308 	add.w	r3, r7, #8
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212c:	463b      	mov	r3, r7
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002134:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <MX_TIM3_Init+0x90>)
 8002136:	4a1d      	ldr	r2, [pc, #116]	@ (80021ac <MX_TIM3_Init+0x94>)
 8002138:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 800213a:	4b1b      	ldr	r3, [pc, #108]	@ (80021a8 <MX_TIM3_Init+0x90>)
 800213c:	2209      	movs	r2, #9
 800213e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002140:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <MX_TIM3_Init+0x90>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8002146:	4b18      	ldr	r3, [pc, #96]	@ (80021a8 <MX_TIM3_Init+0x90>)
 8002148:	2201      	movs	r2, #1
 800214a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214c:	4b16      	ldr	r3, [pc, #88]	@ (80021a8 <MX_TIM3_Init+0x90>)
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002152:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <MX_TIM3_Init+0x90>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002158:	4813      	ldr	r0, [pc, #76]	@ (80021a8 <MX_TIM3_Init+0x90>)
 800215a:	f001 f9e7 	bl	800352c <HAL_TIM_Base_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002164:	f7ff fe24 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002168:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800216c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800216e:	f107 0308 	add.w	r3, r7, #8
 8002172:	4619      	mov	r1, r3
 8002174:	480c      	ldr	r0, [pc, #48]	@ (80021a8 <MX_TIM3_Init+0x90>)
 8002176:	f001 fd9f 	bl	8003cb8 <HAL_TIM_ConfigClockSource>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002180:	f7ff fe16 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002184:	2320      	movs	r3, #32
 8002186:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800218c:	463b      	mov	r3, r7
 800218e:	4619      	mov	r1, r3
 8002190:	4805      	ldr	r0, [pc, #20]	@ (80021a8 <MX_TIM3_Init+0x90>)
 8002192:	f002 f95b 	bl	800444c <HAL_TIMEx_MasterConfigSynchronization>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800219c:	f7ff fe08 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200002a0 	.word	0x200002a0
 80021ac:	40000400 	.word	0x40000400

080021b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	@ 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a27      	ldr	r2, [pc, #156]	@ (800226c <HAL_TIM_Base_MspInit+0xbc>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d135      	bne.n	800223e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	4b26      	ldr	r3, [pc, #152]	@ (8002270 <HAL_TIM_Base_MspInit+0xc0>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	4a25      	ldr	r2, [pc, #148]	@ (8002270 <HAL_TIM_Base_MspInit+0xc0>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e2:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <HAL_TIM_Base_MspInit+0xc0>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002270 <HAL_TIM_Base_MspInit+0xc0>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002270 <HAL_TIM_Base_MspInit+0xc0>)
 80021f8:	f043 0310 	orr.w	r3, r3, #16
 80021fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <HAL_TIM_Base_MspInit+0xc0>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800220a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800220e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800221c:	2301      	movs	r3, #1
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	4813      	ldr	r0, [pc, #76]	@ (8002274 <HAL_TIM_Base_MspInit+0xc4>)
 8002228:	f000 fb1a 	bl	8002860 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	201b      	movs	r0, #27
 8002232:	f000 fa64 	bl	80026fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002236:	201b      	movs	r0, #27
 8002238:	f000 fa7d 	bl	8002736 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800223c:	e012      	b.n	8002264 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a0d      	ldr	r2, [pc, #52]	@ (8002278 <HAL_TIM_Base_MspInit+0xc8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d10d      	bne.n	8002264 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	4b08      	ldr	r3, [pc, #32]	@ (8002270 <HAL_TIM_Base_MspInit+0xc0>)
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	4a07      	ldr	r2, [pc, #28]	@ (8002270 <HAL_TIM_Base_MspInit+0xc0>)
 8002252:	f043 0302 	orr.w	r3, r3, #2
 8002256:	6413      	str	r3, [r2, #64]	@ 0x40
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <HAL_TIM_Base_MspInit+0xc0>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
}
 8002264:	bf00      	nop
 8002266:	3728      	adds	r7, #40	@ 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40010000 	.word	0x40010000
 8002270:	40023800 	.word	0x40023800
 8002274:	40021000 	.word	0x40021000
 8002278:	40000400 	.word	0x40000400

0800227c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002280:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 8002282:	4a12      	ldr	r2, [pc, #72]	@ (80022cc <MX_USART1_UART_Init+0x50>)
 8002284:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002286:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 8002288:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800228c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800228e:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002294:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800229a:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022a0:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 80022a2:	220c      	movs	r2, #12
 80022a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a6:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022b2:	4805      	ldr	r0, [pc, #20]	@ (80022c8 <MX_USART1_UART_Init+0x4c>)
 80022b4:	f002 f95a 	bl	800456c <HAL_UART_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022be:	f7ff fd77 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200002e8 	.word	0x200002e8
 80022cc:	40011000 	.word	0x40011000

080022d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	@ 0x28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a19      	ldr	r2, [pc, #100]	@ (8002354 <HAL_UART_MspInit+0x84>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d12c      	bne.n	800234c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	4b18      	ldr	r3, [pc, #96]	@ (8002358 <HAL_UART_MspInit+0x88>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	4a17      	ldr	r2, [pc, #92]	@ (8002358 <HAL_UART_MspInit+0x88>)
 80022fc:	f043 0310 	orr.w	r3, r3, #16
 8002300:	6453      	str	r3, [r2, #68]	@ 0x44
 8002302:	4b15      	ldr	r3, [pc, #84]	@ (8002358 <HAL_UART_MspInit+0x88>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <HAL_UART_MspInit+0x88>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	4a10      	ldr	r2, [pc, #64]	@ (8002358 <HAL_UART_MspInit+0x88>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	@ 0x30
 800231e:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <HAL_UART_MspInit+0x88>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800232a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800232e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002338:	2303      	movs	r3, #3
 800233a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800233c:	2307      	movs	r3, #7
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	4619      	mov	r1, r3
 8002346:	4805      	ldr	r0, [pc, #20]	@ (800235c <HAL_UART_MspInit+0x8c>)
 8002348:	f000 fa8a 	bl	8002860 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800234c:	bf00      	nop
 800234e:	3728      	adds	r7, #40	@ 0x28
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40011000 	.word	0x40011000
 8002358:	40023800 	.word	0x40023800
 800235c:	40020000 	.word	0x40020000

08002360 <__io_putchar>:
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)

#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002368:	1d39      	adds	r1, r7, #4
 800236a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800236e:	2201      	movs	r2, #1
 8002370:	4803      	ldr	r0, [pc, #12]	@ (8002380 <__io_putchar+0x20>)
 8002372:	f002 f94b 	bl	800460c <HAL_UART_Transmit>

	return ch;
 8002376:	687b      	ldr	r3, [r7, #4]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	200002e8 	.word	0x200002e8

08002384 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	uint8_t ch = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Receive(&huart1,(uint8_t *)&ch, 1, 0xFFFF);
 8002390:	f107 010f 	add.w	r1, r7, #15
 8002394:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002398:	2201      	movs	r2, #1
 800239a:	480a      	ldr	r0, [pc, #40]	@ (80023c4 <__io_getchar+0x40>)
 800239c:	f002 f9c1 	bl	8004722 <HAL_UART_Receive>

	if (ch == '\r')
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b0d      	cmp	r3, #13
 80023a4:	d104      	bne.n	80023b0 <__io_getchar+0x2c>
	{
		__io_putchar('\r');
 80023a6:	200d      	movs	r0, #13
 80023a8:	f7ff ffda 	bl	8002360 <__io_putchar>
		ch = '\n';
 80023ac:	230a      	movs	r3, #10
 80023ae:	73fb      	strb	r3, [r7, #15]
	}


	return __io_putchar(ch);
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ffd4 	bl	8002360 <__io_putchar>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200002e8 	.word	0x200002e8

080023c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002400 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023cc:	f7ff fe1e 	bl	800200c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d0:	480c      	ldr	r0, [pc, #48]	@ (8002404 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023d2:	490d      	ldr	r1, [pc, #52]	@ (8002408 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023d4:	4a0d      	ldr	r2, [pc, #52]	@ (800240c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d8:	e002      	b.n	80023e0 <LoopCopyDataInit>

080023da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023de:	3304      	adds	r3, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e4:	d3f9      	bcc.n	80023da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002410 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002414 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ec:	e001      	b.n	80023f2 <LoopFillZerobss>

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f0:	3204      	adds	r2, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023f6:	f003 fb23 	bl	8005a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fa:	f7ff fa19 	bl	8001830 <main>
  bx  lr    
 80023fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002400:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002408:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800240c:	08007bd8 	.word	0x08007bd8
  ldr r2, =_sbss
 8002410:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002414:	20000480 	.word	0x20000480

08002418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC_IRQHandler>
	...

0800241c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002420:	4b0e      	ldr	r3, [pc, #56]	@ (800245c <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0d      	ldr	r2, [pc, #52]	@ (800245c <HAL_Init+0x40>)
 8002426:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800242a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800242c:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <HAL_Init+0x40>)
 8002432:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002438:	4b08      	ldr	r3, [pc, #32]	@ (800245c <HAL_Init+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a07      	ldr	r2, [pc, #28]	@ (800245c <HAL_Init+0x40>)
 800243e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002444:	2003      	movs	r0, #3
 8002446:	f000 f94f 	bl	80026e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800244a:	2000      	movs	r0, #0
 800244c:	f000 f808 	bl	8002460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002450:	f7ff fcb4 	bl	8001dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023c00 	.word	0x40023c00

08002460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002468:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <HAL_InitTick+0x54>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_InitTick+0x58>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4619      	mov	r1, r3
 8002472:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002476:	fbb3 f3f1 	udiv	r3, r3, r1
 800247a:	fbb2 f3f3 	udiv	r3, r2, r3
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f967 	bl	8002752 <HAL_SYSTICK_Config>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e00e      	b.n	80024ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b0f      	cmp	r3, #15
 8002492:	d80a      	bhi.n	80024aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002494:	2200      	movs	r2, #0
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f000 f92f 	bl	80026fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a0:	4a06      	ldr	r2, [pc, #24]	@ (80024bc <HAL_InitTick+0x5c>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e000      	b.n	80024ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000000 	.word	0x20000000
 80024b8:	20000008 	.word	0x20000008
 80024bc:	20000004 	.word	0x20000004

080024c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c4:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <HAL_IncTick+0x20>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_IncTick+0x24>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	4a04      	ldr	r2, [pc, #16]	@ (80024e4 <HAL_IncTick+0x24>)
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000008 	.word	0x20000008
 80024e4:	20000330 	.word	0x20000330

080024e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return uwTick;
 80024ec:	4b03      	ldr	r3, [pc, #12]	@ (80024fc <HAL_GetTick+0x14>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000330 	.word	0x20000330

08002500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff ffee 	bl	80024e8 <HAL_GetTick>
 800250c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d005      	beq.n	8002526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800251a:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <HAL_Delay+0x44>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4413      	add	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002526:	bf00      	nop
 8002528:	f7ff ffde 	bl	80024e8 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	429a      	cmp	r2, r3
 8002536:	d8f7      	bhi.n	8002528 <HAL_Delay+0x28>
  {
  }
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000008 	.word	0x20000008

08002548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002558:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002564:	4013      	ands	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002570:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257a:	4a04      	ldr	r2, [pc, #16]	@ (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	60d3      	str	r3, [r2, #12]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002594:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 0307 	and.w	r3, r3, #7
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	db0b      	blt.n	80025d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	f003 021f 	and.w	r2, r3, #31
 80025c4:	4907      	ldr	r1, [pc, #28]	@ (80025e4 <__NVIC_EnableIRQ+0x38>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	2001      	movs	r0, #1
 80025ce:	fa00 f202 	lsl.w	r2, r0, r2
 80025d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000e100 	.word	0xe000e100

080025e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	db0a      	blt.n	8002612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	490c      	ldr	r1, [pc, #48]	@ (8002634 <__NVIC_SetPriority+0x4c>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	0112      	lsls	r2, r2, #4
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	440b      	add	r3, r1
 800260c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002610:	e00a      	b.n	8002628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4908      	ldr	r1, [pc, #32]	@ (8002638 <__NVIC_SetPriority+0x50>)
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	3b04      	subs	r3, #4
 8002620:	0112      	lsls	r2, r2, #4
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	440b      	add	r3, r1
 8002626:	761a      	strb	r2, [r3, #24]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000e100 	.word	0xe000e100
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	@ 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f1c3 0307 	rsb	r3, r3, #7
 8002656:	2b04      	cmp	r3, #4
 8002658:	bf28      	it	cs
 800265a:	2304      	movcs	r3, #4
 800265c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3304      	adds	r3, #4
 8002662:	2b06      	cmp	r3, #6
 8002664:	d902      	bls.n	800266c <NVIC_EncodePriority+0x30>
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3b03      	subs	r3, #3
 800266a:	e000      	b.n	800266e <NVIC_EncodePriority+0x32>
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	f04f 32ff 	mov.w	r2, #4294967295
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43da      	mvns	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	401a      	ands	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002684:	f04f 31ff 	mov.w	r1, #4294967295
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43d9      	mvns	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	4313      	orrs	r3, r2
         );
}
 8002696:	4618      	mov	r0, r3
 8002698:	3724      	adds	r7, #36	@ 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026b4:	d301      	bcc.n	80026ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00f      	b.n	80026da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ba:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <SysTick_Config+0x40>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c2:	210f      	movs	r1, #15
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f7ff ff8e 	bl	80025e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <SysTick_Config+0x40>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d2:	4b04      	ldr	r3, [pc, #16]	@ (80026e4 <SysTick_Config+0x40>)
 80026d4:	2207      	movs	r2, #7
 80026d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	e000e010 	.word	0xe000e010

080026e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff29 	bl	8002548 <__NVIC_SetPriorityGrouping>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002710:	f7ff ff3e 	bl	8002590 <__NVIC_GetPriorityGrouping>
 8002714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7ff ff8e 	bl	800263c <NVIC_EncodePriority>
 8002720:	4602      	mov	r2, r0
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff5d 	bl	80025e8 <__NVIC_SetPriority>
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff31 	bl	80025ac <__NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ffa2 	bl	80026a4 <SysTick_Config>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e014      	b.n	80027a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	791b      	ldrb	r3, [r3, #4]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7fe fee7 	bl	8001560 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b089      	sub	sp, #36	@ 0x24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_DAC_ConfigChannel+0x1c>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e042      	b.n	8002854 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	795b      	ldrb	r3, [r3, #5]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_DAC_ConfigChannel+0x2c>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e03c      	b.n	8002854 <HAL_DAC_ConfigChannel+0xa6>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2202      	movs	r2, #2
 80027e4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	22c0      	movs	r2, #192	@ 0xc0
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43da      	mvns	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	400a      	ands	r2, r1
 8002844:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002852:	7ffb      	ldrb	r3, [r7, #31]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3724      	adds	r7, #36	@ 0x24
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	@ 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e16b      	b.n	8002b54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	f040 815a 	bne.w	8002b4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d005      	beq.n	80028b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d130      	bne.n	8002914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e8:	2201      	movs	r2, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 0201 	and.w	r2, r3, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b03      	cmp	r3, #3
 800291e:	d017      	beq.n	8002950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	2203      	movs	r2, #3
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d123      	bne.n	80029a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	08da      	lsrs	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	69b9      	ldr	r1, [r7, #24]
 80029a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0203 	and.w	r2, r3, #3
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80b4 	beq.w	8002b4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b60      	ldr	r3, [pc, #384]	@ (8002b6c <HAL_GPIO_Init+0x30c>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ee:	4a5f      	ldr	r2, [pc, #380]	@ (8002b6c <HAL_GPIO_Init+0x30c>)
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029f6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b6c <HAL_GPIO_Init+0x30c>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a02:	4a5b      	ldr	r2, [pc, #364]	@ (8002b70 <HAL_GPIO_Init+0x310>)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a52      	ldr	r2, [pc, #328]	@ (8002b74 <HAL_GPIO_Init+0x314>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d02b      	beq.n	8002a86 <HAL_GPIO_Init+0x226>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a51      	ldr	r2, [pc, #324]	@ (8002b78 <HAL_GPIO_Init+0x318>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d025      	beq.n	8002a82 <HAL_GPIO_Init+0x222>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a50      	ldr	r2, [pc, #320]	@ (8002b7c <HAL_GPIO_Init+0x31c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01f      	beq.n	8002a7e <HAL_GPIO_Init+0x21e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4f      	ldr	r2, [pc, #316]	@ (8002b80 <HAL_GPIO_Init+0x320>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d019      	beq.n	8002a7a <HAL_GPIO_Init+0x21a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4e      	ldr	r2, [pc, #312]	@ (8002b84 <HAL_GPIO_Init+0x324>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_GPIO_Init+0x216>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4d      	ldr	r2, [pc, #308]	@ (8002b88 <HAL_GPIO_Init+0x328>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00d      	beq.n	8002a72 <HAL_GPIO_Init+0x212>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4c      	ldr	r2, [pc, #304]	@ (8002b8c <HAL_GPIO_Init+0x32c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <HAL_GPIO_Init+0x20e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4b      	ldr	r2, [pc, #300]	@ (8002b90 <HAL_GPIO_Init+0x330>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_GPIO_Init+0x20a>
 8002a66:	2307      	movs	r3, #7
 8002a68:	e00e      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	e00c      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a6e:	2306      	movs	r3, #6
 8002a70:	e00a      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a72:	2305      	movs	r3, #5
 8002a74:	e008      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a76:	2304      	movs	r3, #4
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e004      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e002      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a86:	2300      	movs	r3, #0
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	f002 0203 	and.w	r2, r2, #3
 8002a8e:	0092      	lsls	r2, r2, #2
 8002a90:	4093      	lsls	r3, r2
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a98:	4935      	ldr	r1, [pc, #212]	@ (8002b70 <HAL_GPIO_Init+0x310>)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	089b      	lsrs	r3, r3, #2
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8002b94 <HAL_GPIO_Init+0x334>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aca:	4a32      	ldr	r2, [pc, #200]	@ (8002b94 <HAL_GPIO_Init+0x334>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad0:	4b30      	ldr	r3, [pc, #192]	@ (8002b94 <HAL_GPIO_Init+0x334>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af4:	4a27      	ldr	r2, [pc, #156]	@ (8002b94 <HAL_GPIO_Init+0x334>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002afa:	4b26      	ldr	r3, [pc, #152]	@ (8002b94 <HAL_GPIO_Init+0x334>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002b94 <HAL_GPIO_Init+0x334>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	@ (8002b94 <HAL_GPIO_Init+0x334>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b48:	4a12      	ldr	r2, [pc, #72]	@ (8002b94 <HAL_GPIO_Init+0x334>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3301      	adds	r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b0f      	cmp	r3, #15
 8002b58:	f67f ae90 	bls.w	800287c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3724      	adds	r7, #36	@ 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40013800 	.word	0x40013800
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	40020c00 	.word	0x40020c00
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40021400 	.word	0x40021400
 8002b8c:	40021800 	.word	0x40021800
 8002b90:	40021c00 	.word	0x40021c00
 8002b94:	40013c00 	.word	0x40013c00

08002b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	887b      	ldrh	r3, [r7, #2]
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	e001      	b.n	8002bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	807b      	strh	r3, [r7, #2]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd8:	787b      	ldrb	r3, [r7, #1]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002be4:	e003      	b.n	8002bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002be6:	887b      	ldrh	r3, [r7, #2]
 8002be8:	041a      	lsls	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	619a      	str	r2, [r3, #24]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e267      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d075      	beq.n	8002d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c1a:	4b88      	ldr	r3, [pc, #544]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d00c      	beq.n	8002c40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c26:	4b85      	ldr	r3, [pc, #532]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d112      	bne.n	8002c58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c32:	4b82      	ldr	r3, [pc, #520]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c3e:	d10b      	bne.n	8002c58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	4b7e      	ldr	r3, [pc, #504]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d05b      	beq.n	8002d04 <HAL_RCC_OscConfig+0x108>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d157      	bne.n	8002d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e242      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c60:	d106      	bne.n	8002c70 <HAL_RCC_OscConfig+0x74>
 8002c62:	4b76      	ldr	r3, [pc, #472]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a75      	ldr	r2, [pc, #468]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e01d      	b.n	8002cac <HAL_RCC_OscConfig+0xb0>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x98>
 8002c7a:	4b70      	ldr	r3, [pc, #448]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6f      	ldr	r2, [pc, #444]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	4b6d      	ldr	r3, [pc, #436]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a6c      	ldr	r2, [pc, #432]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e00b      	b.n	8002cac <HAL_RCC_OscConfig+0xb0>
 8002c94:	4b69      	ldr	r3, [pc, #420]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a68      	ldr	r2, [pc, #416]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b66      	ldr	r3, [pc, #408]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a65      	ldr	r2, [pc, #404]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7ff fc18 	bl	80024e8 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7ff fc14 	bl	80024e8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	@ 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e207      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	4b5b      	ldr	r3, [pc, #364]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0xc0>
 8002cda:	e014      	b.n	8002d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7ff fc04 	bl	80024e8 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7ff fc00 	bl	80024e8 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	@ 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e1f3      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf6:	4b51      	ldr	r3, [pc, #324]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0xe8>
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d063      	beq.n	8002dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d12:	4b4a      	ldr	r3, [pc, #296]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1e:	4b47      	ldr	r3, [pc, #284]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d11c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2a:	4b44      	ldr	r3, [pc, #272]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d116      	bne.n	8002d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	4b41      	ldr	r3, [pc, #260]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_RCC_OscConfig+0x152>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e1c7      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4937      	ldr	r1, [pc, #220]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d62:	e03a      	b.n	8002dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d020      	beq.n	8002dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d6c:	4b34      	ldr	r3, [pc, #208]	@ (8002e40 <HAL_RCC_OscConfig+0x244>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7ff fbb9 	bl	80024e8 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7a:	f7ff fbb5 	bl	80024e8 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e1a8      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d98:	4b28      	ldr	r3, [pc, #160]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4925      	ldr	r1, [pc, #148]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	600b      	str	r3, [r1, #0]
 8002dac:	e015      	b.n	8002dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dae:	4b24      	ldr	r3, [pc, #144]	@ (8002e40 <HAL_RCC_OscConfig+0x244>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7ff fb98 	bl	80024e8 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dbc:	f7ff fb94 	bl	80024e8 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e187      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	4b1b      	ldr	r3, [pc, #108]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d036      	beq.n	8002e54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dee:	4b15      	ldr	r3, [pc, #84]	@ (8002e44 <HAL_RCC_OscConfig+0x248>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7ff fb78 	bl	80024e8 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dfc:	f7ff fb74 	bl	80024e8 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e167      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x200>
 8002e1a:	e01b      	b.n	8002e54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e1c:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <HAL_RCC_OscConfig+0x248>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e22:	f7ff fb61 	bl	80024e8 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e28:	e00e      	b.n	8002e48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2a:	f7ff fb5d 	bl	80024e8 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d907      	bls.n	8002e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e150      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	42470000 	.word	0x42470000
 8002e44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	4b88      	ldr	r3, [pc, #544]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ea      	bne.n	8002e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8097 	beq.w	8002f90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e66:	4b81      	ldr	r3, [pc, #516]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10f      	bne.n	8002e92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	4b7d      	ldr	r3, [pc, #500]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	4a7c      	ldr	r2, [pc, #496]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e82:	4b7a      	ldr	r3, [pc, #488]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	4b77      	ldr	r3, [pc, #476]	@ (8003070 <HAL_RCC_OscConfig+0x474>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d118      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9e:	4b74      	ldr	r3, [pc, #464]	@ (8003070 <HAL_RCC_OscConfig+0x474>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a73      	ldr	r2, [pc, #460]	@ (8003070 <HAL_RCC_OscConfig+0x474>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eaa:	f7ff fb1d 	bl	80024e8 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb2:	f7ff fb19 	bl	80024e8 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e10c      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8003070 <HAL_RCC_OscConfig+0x474>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x2ea>
 8002ed8:	4b64      	ldr	r3, [pc, #400]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002edc:	4a63      	ldr	r2, [pc, #396]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee4:	e01c      	b.n	8002f20 <HAL_RCC_OscConfig+0x324>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x30c>
 8002eee:	4b5f      	ldr	r3, [pc, #380]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef2:	4a5e      	ldr	r2, [pc, #376]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002efa:	4b5c      	ldr	r3, [pc, #368]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efe:	4a5b      	ldr	r2, [pc, #364]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0x324>
 8002f08:	4b58      	ldr	r3, [pc, #352]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0c:	4a57      	ldr	r2, [pc, #348]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f14:	4b55      	ldr	r3, [pc, #340]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f18:	4a54      	ldr	r2, [pc, #336]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f1a:	f023 0304 	bic.w	r3, r3, #4
 8002f1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d015      	beq.n	8002f54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7ff fade 	bl	80024e8 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7ff fada 	bl	80024e8 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0cb      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f46:	4b49      	ldr	r3, [pc, #292]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0ee      	beq.n	8002f30 <HAL_RCC_OscConfig+0x334>
 8002f52:	e014      	b.n	8002f7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f54:	f7ff fac8 	bl	80024e8 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7ff fac4 	bl	80024e8 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0b5      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f72:	4b3e      	ldr	r3, [pc, #248]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1ee      	bne.n	8002f5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d105      	bne.n	8002f90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f84:	4b39      	ldr	r3, [pc, #228]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	4a38      	ldr	r2, [pc, #224]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80a1 	beq.w	80030dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f9a:	4b34      	ldr	r3, [pc, #208]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d05c      	beq.n	8003060 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d141      	bne.n	8003032 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fae:	4b31      	ldr	r3, [pc, #196]	@ (8003074 <HAL_RCC_OscConfig+0x478>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7ff fa98 	bl	80024e8 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7ff fa94 	bl	80024e8 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e087      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	4b27      	ldr	r3, [pc, #156]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	019b      	lsls	r3, r3, #6
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffc:	061b      	lsls	r3, r3, #24
 8002ffe:	491b      	ldr	r1, [pc, #108]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003004:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_RCC_OscConfig+0x478>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7ff fa6d 	bl	80024e8 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003012:	f7ff fa69 	bl	80024e8 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e05c      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003024:	4b11      	ldr	r3, [pc, #68]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x416>
 8003030:	e054      	b.n	80030dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b10      	ldr	r3, [pc, #64]	@ (8003074 <HAL_RCC_OscConfig+0x478>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7ff fa56 	bl	80024e8 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003040:	f7ff fa52 	bl	80024e8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e045      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	4b06      	ldr	r3, [pc, #24]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x444>
 800305e:	e03d      	b.n	80030dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d107      	bne.n	8003078 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e038      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
 800306c:	40023800 	.word	0x40023800
 8003070:	40007000 	.word	0x40007000
 8003074:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003078:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <HAL_RCC_OscConfig+0x4ec>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d028      	beq.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d121      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	429a      	cmp	r2, r3
 80030a0:	d11a      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030a8:	4013      	ands	r3, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d111      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030be:	085b      	lsrs	r3, r3, #1
 80030c0:	3b01      	subs	r3, #1
 80030c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800

080030ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0cc      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003100:	4b68      	ldr	r3, [pc, #416]	@ (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d90c      	bls.n	8003128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4b65      	ldr	r3, [pc, #404]	@ (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b63      	ldr	r3, [pc, #396]	@ (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0b8      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003140:	4b59      	ldr	r3, [pc, #356]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a58      	ldr	r2, [pc, #352]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800314a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003158:	4b53      	ldr	r3, [pc, #332]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a52      	ldr	r2, [pc, #328]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003164:	4b50      	ldr	r3, [pc, #320]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	494d      	ldr	r1, [pc, #308]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d044      	beq.n	800320c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b47      	ldr	r3, [pc, #284]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d119      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e07f      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d003      	beq.n	80031aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031aa:	4b3f      	ldr	r3, [pc, #252]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e06f      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ba:	4b3b      	ldr	r3, [pc, #236]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e067      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ca:	4b37      	ldr	r3, [pc, #220]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f023 0203 	bic.w	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4934      	ldr	r1, [pc, #208]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031dc:	f7ff f984 	bl	80024e8 <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e4:	f7ff f980 	bl	80024e8 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e04f      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	4b2b      	ldr	r3, [pc, #172]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 020c 	and.w	r2, r3, #12
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	429a      	cmp	r2, r3
 800320a:	d1eb      	bne.n	80031e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800320c:	4b25      	ldr	r3, [pc, #148]	@ (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d20c      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b22      	ldr	r3, [pc, #136]	@ (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b20      	ldr	r3, [pc, #128]	@ (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e032      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003240:	4b19      	ldr	r3, [pc, #100]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4916      	ldr	r1, [pc, #88]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800325e:	4b12      	ldr	r3, [pc, #72]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	490e      	ldr	r1, [pc, #56]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003272:	f000 f821 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003276:	4602      	mov	r2, r0
 8003278:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	490a      	ldr	r1, [pc, #40]	@ (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	5ccb      	ldrb	r3, [r1, r3]
 8003286:	fa22 f303 	lsr.w	r3, r2, r3
 800328a:	4a09      	ldr	r2, [pc, #36]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800328e:	4b09      	ldr	r3, [pc, #36]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff f8e4 	bl	8002460 <HAL_InitTick>

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023c00 	.word	0x40023c00
 80032a8:	40023800 	.word	0x40023800
 80032ac:	08007840 	.word	0x08007840
 80032b0:	20000000 	.word	0x20000000
 80032b4:	20000004 	.word	0x20000004

080032b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032bc:	b094      	sub	sp, #80	@ 0x50
 80032be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80032c4:	2300      	movs	r3, #0
 80032c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032c8:	2300      	movs	r3, #0
 80032ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032d0:	4b79      	ldr	r3, [pc, #484]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d00d      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x40>
 80032dc:	2b08      	cmp	r3, #8
 80032de:	f200 80e1 	bhi.w	80034a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x34>
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d003      	beq.n	80032f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ea:	e0db      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032ec:	4b73      	ldr	r3, [pc, #460]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x204>)
 80032ee:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80032f0:	e0db      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f2:	4b73      	ldr	r3, [pc, #460]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80032f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032f6:	e0d8      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f8:	4b6f      	ldr	r3, [pc, #444]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003300:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003302:	4b6d      	ldr	r3, [pc, #436]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d063      	beq.n	80033d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330e:	4b6a      	ldr	r3, [pc, #424]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	099b      	lsrs	r3, r3, #6
 8003314:	2200      	movs	r2, #0
 8003316:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003318:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800331a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003320:	633b      	str	r3, [r7, #48]	@ 0x30
 8003322:	2300      	movs	r3, #0
 8003324:	637b      	str	r3, [r7, #52]	@ 0x34
 8003326:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800332a:	4622      	mov	r2, r4
 800332c:	462b      	mov	r3, r5
 800332e:	f04f 0000 	mov.w	r0, #0
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	0159      	lsls	r1, r3, #5
 8003338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800333c:	0150      	lsls	r0, r2, #5
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4621      	mov	r1, r4
 8003344:	1a51      	subs	r1, r2, r1
 8003346:	6139      	str	r1, [r7, #16]
 8003348:	4629      	mov	r1, r5
 800334a:	eb63 0301 	sbc.w	r3, r3, r1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800335c:	4659      	mov	r1, fp
 800335e:	018b      	lsls	r3, r1, #6
 8003360:	4651      	mov	r1, sl
 8003362:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003366:	4651      	mov	r1, sl
 8003368:	018a      	lsls	r2, r1, #6
 800336a:	4651      	mov	r1, sl
 800336c:	ebb2 0801 	subs.w	r8, r2, r1
 8003370:	4659      	mov	r1, fp
 8003372:	eb63 0901 	sbc.w	r9, r3, r1
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800338a:	4690      	mov	r8, r2
 800338c:	4699      	mov	r9, r3
 800338e:	4623      	mov	r3, r4
 8003390:	eb18 0303 	adds.w	r3, r8, r3
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	462b      	mov	r3, r5
 8003398:	eb49 0303 	adc.w	r3, r9, r3
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033aa:	4629      	mov	r1, r5
 80033ac:	024b      	lsls	r3, r1, #9
 80033ae:	4621      	mov	r1, r4
 80033b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033b4:	4621      	mov	r1, r4
 80033b6:	024a      	lsls	r2, r1, #9
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033be:	2200      	movs	r2, #0
 80033c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033c8:	f7fd fc3e 	bl	8000c48 <__aeabi_uldivmod>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4613      	mov	r3, r2
 80033d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033d4:	e058      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d6:	4b38      	ldr	r3, [pc, #224]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	2200      	movs	r2, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	4611      	mov	r1, r2
 80033e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033e6:	623b      	str	r3, [r7, #32]
 80033e8:	2300      	movs	r3, #0
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033f0:	4642      	mov	r2, r8
 80033f2:	464b      	mov	r3, r9
 80033f4:	f04f 0000 	mov.w	r0, #0
 80033f8:	f04f 0100 	mov.w	r1, #0
 80033fc:	0159      	lsls	r1, r3, #5
 80033fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003402:	0150      	lsls	r0, r2, #5
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4641      	mov	r1, r8
 800340a:	ebb2 0a01 	subs.w	sl, r2, r1
 800340e:	4649      	mov	r1, r9
 8003410:	eb63 0b01 	sbc.w	fp, r3, r1
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003420:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003424:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003428:	ebb2 040a 	subs.w	r4, r2, sl
 800342c:	eb63 050b 	sbc.w	r5, r3, fp
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	00eb      	lsls	r3, r5, #3
 800343a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800343e:	00e2      	lsls	r2, r4, #3
 8003440:	4614      	mov	r4, r2
 8003442:	461d      	mov	r5, r3
 8003444:	4643      	mov	r3, r8
 8003446:	18e3      	adds	r3, r4, r3
 8003448:	603b      	str	r3, [r7, #0]
 800344a:	464b      	mov	r3, r9
 800344c:	eb45 0303 	adc.w	r3, r5, r3
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800345e:	4629      	mov	r1, r5
 8003460:	028b      	lsls	r3, r1, #10
 8003462:	4621      	mov	r1, r4
 8003464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003468:	4621      	mov	r1, r4
 800346a:	028a      	lsls	r2, r1, #10
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003472:	2200      	movs	r2, #0
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	61fa      	str	r2, [r7, #28]
 8003478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800347c:	f7fd fbe4 	bl	8000c48 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4613      	mov	r3, r2
 8003486:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003488:	4b0b      	ldr	r3, [pc, #44]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	3301      	adds	r3, #1
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003498:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800349a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034a2:	e002      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a4:	4b05      	ldr	r3, [pc, #20]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x204>)
 80034a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3750      	adds	r7, #80	@ 0x50
 80034b0:	46bd      	mov	sp, r7
 80034b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	00f42400 	.word	0x00f42400
 80034c0:	007a1200 	.word	0x007a1200

080034c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c8:	4b03      	ldr	r3, [pc, #12]	@ (80034d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000000 	.word	0x20000000

080034dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034e0:	f7ff fff0 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	0a9b      	lsrs	r3, r3, #10
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4903      	ldr	r1, [pc, #12]	@ (8003500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40023800 	.word	0x40023800
 8003500:	08007850 	.word	0x08007850

08003504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003508:	f7ff ffdc 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b05      	ldr	r3, [pc, #20]	@ (8003524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	0b5b      	lsrs	r3, r3, #13
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4903      	ldr	r1, [pc, #12]	@ (8003528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40023800 	.word	0x40023800
 8003528:	08007850 	.word	0x08007850

0800352c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e041      	b.n	80035c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe fe2c 	bl	80021b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f000 fcd8 	bl	8003f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d001      	beq.n	80035e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e046      	b.n	8003672 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a23      	ldr	r2, [pc, #140]	@ (8003680 <HAL_TIM_Base_Start+0xb4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d022      	beq.n	800363c <HAL_TIM_Base_Start+0x70>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035fe:	d01d      	beq.n	800363c <HAL_TIM_Base_Start+0x70>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1f      	ldr	r2, [pc, #124]	@ (8003684 <HAL_TIM_Base_Start+0xb8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d018      	beq.n	800363c <HAL_TIM_Base_Start+0x70>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1e      	ldr	r2, [pc, #120]	@ (8003688 <HAL_TIM_Base_Start+0xbc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d013      	beq.n	800363c <HAL_TIM_Base_Start+0x70>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1c      	ldr	r2, [pc, #112]	@ (800368c <HAL_TIM_Base_Start+0xc0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00e      	beq.n	800363c <HAL_TIM_Base_Start+0x70>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1b      	ldr	r2, [pc, #108]	@ (8003690 <HAL_TIM_Base_Start+0xc4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d009      	beq.n	800363c <HAL_TIM_Base_Start+0x70>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a19      	ldr	r2, [pc, #100]	@ (8003694 <HAL_TIM_Base_Start+0xc8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_TIM_Base_Start+0x70>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a18      	ldr	r2, [pc, #96]	@ (8003698 <HAL_TIM_Base_Start+0xcc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d111      	bne.n	8003660 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b06      	cmp	r3, #6
 800364c:	d010      	beq.n	8003670 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365e:	e007      	b.n	8003670 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40010000 	.word	0x40010000
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800
 800368c:	40000c00 	.word	0x40000c00
 8003690:	40010400 	.word	0x40010400
 8003694:	40014000 	.word	0x40014000
 8003698:	40001800 	.word	0x40001800

0800369c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e041      	b.n	8003732 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f839 	bl	800373a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3304      	adds	r3, #4
 80036d8:	4619      	mov	r1, r3
 80036da:	4610      	mov	r0, r2
 80036dc:	f000 fc20 	bl	8003f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <HAL_TIM_IC_Start_IT+0x1e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800376a:	b2db      	uxtb	r3, r3
 800376c:	e013      	b.n	8003796 <HAL_TIM_IC_Start_IT+0x46>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b04      	cmp	r3, #4
 8003772:	d104      	bne.n	800377e <HAL_TIM_IC_Start_IT+0x2e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800377a:	b2db      	uxtb	r3, r3
 800377c:	e00b      	b.n	8003796 <HAL_TIM_IC_Start_IT+0x46>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b08      	cmp	r3, #8
 8003782:	d104      	bne.n	800378e <HAL_TIM_IC_Start_IT+0x3e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800378a:	b2db      	uxtb	r3, r3
 800378c:	e003      	b.n	8003796 <HAL_TIM_IC_Start_IT+0x46>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003794:	b2db      	uxtb	r3, r3
 8003796:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d104      	bne.n	80037a8 <HAL_TIM_IC_Start_IT+0x58>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e013      	b.n	80037d0 <HAL_TIM_IC_Start_IT+0x80>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d104      	bne.n	80037b8 <HAL_TIM_IC_Start_IT+0x68>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	e00b      	b.n	80037d0 <HAL_TIM_IC_Start_IT+0x80>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d104      	bne.n	80037c8 <HAL_TIM_IC_Start_IT+0x78>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e003      	b.n	80037d0 <HAL_TIM_IC_Start_IT+0x80>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80037d2:	7bbb      	ldrb	r3, [r7, #14]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d102      	bne.n	80037de <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80037d8:	7b7b      	ldrb	r3, [r7, #13]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d001      	beq.n	80037e2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e0cc      	b.n	800397c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_IC_Start_IT+0xa2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f0:	e013      	b.n	800381a <HAL_TIM_IC_Start_IT+0xca>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_IC_Start_IT+0xb2>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003800:	e00b      	b.n	800381a <HAL_TIM_IC_Start_IT+0xca>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d104      	bne.n	8003812 <HAL_TIM_IC_Start_IT+0xc2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003810:	e003      	b.n	800381a <HAL_TIM_IC_Start_IT+0xca>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <HAL_TIM_IC_Start_IT+0xda>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003828:	e013      	b.n	8003852 <HAL_TIM_IC_Start_IT+0x102>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b04      	cmp	r3, #4
 800382e:	d104      	bne.n	800383a <HAL_TIM_IC_Start_IT+0xea>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003838:	e00b      	b.n	8003852 <HAL_TIM_IC_Start_IT+0x102>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b08      	cmp	r3, #8
 800383e:	d104      	bne.n	800384a <HAL_TIM_IC_Start_IT+0xfa>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003848:	e003      	b.n	8003852 <HAL_TIM_IC_Start_IT+0x102>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2202      	movs	r2, #2
 800384e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b0c      	cmp	r3, #12
 8003856:	d841      	bhi.n	80038dc <HAL_TIM_IC_Start_IT+0x18c>
 8003858:	a201      	add	r2, pc, #4	@ (adr r2, 8003860 <HAL_TIM_IC_Start_IT+0x110>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003895 	.word	0x08003895
 8003864:	080038dd 	.word	0x080038dd
 8003868:	080038dd 	.word	0x080038dd
 800386c:	080038dd 	.word	0x080038dd
 8003870:	080038a7 	.word	0x080038a7
 8003874:	080038dd 	.word	0x080038dd
 8003878:	080038dd 	.word	0x080038dd
 800387c:	080038dd 	.word	0x080038dd
 8003880:	080038b9 	.word	0x080038b9
 8003884:	080038dd 	.word	0x080038dd
 8003888:	080038dd 	.word	0x080038dd
 800388c:	080038dd 	.word	0x080038dd
 8003890:	080038cb 	.word	0x080038cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0202 	orr.w	r2, r2, #2
 80038a2:	60da      	str	r2, [r3, #12]
      break;
 80038a4:	e01d      	b.n	80038e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0204 	orr.w	r2, r2, #4
 80038b4:	60da      	str	r2, [r3, #12]
      break;
 80038b6:	e014      	b.n	80038e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0208 	orr.w	r2, r2, #8
 80038c6:	60da      	str	r2, [r3, #12]
      break;
 80038c8:	e00b      	b.n	80038e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0210 	orr.w	r2, r2, #16
 80038d8:	60da      	str	r2, [r3, #12]
      break;
 80038da:	e002      	b.n	80038e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      break;
 80038e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d148      	bne.n	800397a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2201      	movs	r2, #1
 80038ee:	6839      	ldr	r1, [r7, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fd85 	bl	8004400 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a22      	ldr	r2, [pc, #136]	@ (8003984 <HAL_TIM_IC_Start_IT+0x234>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d022      	beq.n	8003946 <HAL_TIM_IC_Start_IT+0x1f6>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003908:	d01d      	beq.n	8003946 <HAL_TIM_IC_Start_IT+0x1f6>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1e      	ldr	r2, [pc, #120]	@ (8003988 <HAL_TIM_IC_Start_IT+0x238>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d018      	beq.n	8003946 <HAL_TIM_IC_Start_IT+0x1f6>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1c      	ldr	r2, [pc, #112]	@ (800398c <HAL_TIM_IC_Start_IT+0x23c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d013      	beq.n	8003946 <HAL_TIM_IC_Start_IT+0x1f6>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1b      	ldr	r2, [pc, #108]	@ (8003990 <HAL_TIM_IC_Start_IT+0x240>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00e      	beq.n	8003946 <HAL_TIM_IC_Start_IT+0x1f6>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a19      	ldr	r2, [pc, #100]	@ (8003994 <HAL_TIM_IC_Start_IT+0x244>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d009      	beq.n	8003946 <HAL_TIM_IC_Start_IT+0x1f6>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a18      	ldr	r2, [pc, #96]	@ (8003998 <HAL_TIM_IC_Start_IT+0x248>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d004      	beq.n	8003946 <HAL_TIM_IC_Start_IT+0x1f6>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a16      	ldr	r2, [pc, #88]	@ (800399c <HAL_TIM_IC_Start_IT+0x24c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d111      	bne.n	800396a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b06      	cmp	r3, #6
 8003956:	d010      	beq.n	800397a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003968:	e007      	b.n	800397a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0201 	orr.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800397a:	7bfb      	ldrb	r3, [r7, #15]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40010000 	.word	0x40010000
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800
 8003990:	40000c00 	.word	0x40000c00
 8003994:	40010400 	.word	0x40010400
 8003998:	40014000 	.word	0x40014000
 800399c:	40001800 	.word	0x40001800

080039a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d020      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01b      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0202 	mvn.w	r2, #2
 80039d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd fee8 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 80039f0:	e005      	b.n	80039fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fa76 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fa7d 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d020      	beq.n	8003a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01b      	beq.n	8003a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0204 	mvn.w	r2, #4
 8003a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd fec2 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8003a3c:	e005      	b.n	8003a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa50 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fa57 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d020      	beq.n	8003a9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01b      	beq.n	8003a9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0208 	mvn.w	r2, #8
 8003a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2204      	movs	r2, #4
 8003a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd fe9c 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8003a88:	e005      	b.n	8003a96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fa2a 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fa31 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d020      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01b      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0210 	mvn.w	r2, #16
 8003ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2208      	movs	r2, #8
 8003abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd fe76 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8003ad4:	e005      	b.n	8003ae2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fa04 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fa0b 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0201 	mvn.w	r2, #1
 8003b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9e2 	bl	8003ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00c      	beq.n	8003b30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fd14 	bl	8004558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00c      	beq.n	8003b54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f9dc 	bl	8003f0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00c      	beq.n	8003b78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f06f 0220 	mvn.w	r2, #32
 8003b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fce6 	bl	8004544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b78:	bf00      	nop
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e088      	b.n	8003cb0 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d11b      	bne.n	8003be4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003bbc:	f000 fa5c 	bl	8004078 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 020c 	bic.w	r2, r2, #12
 8003bce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6999      	ldr	r1, [r3, #24]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	619a      	str	r2, [r3, #24]
 8003be2:	e060      	b.n	8003ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d11c      	bne.n	8003c24 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003bfa:	f000 fae0 	bl	80041be <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699a      	ldr	r2, [r3, #24]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6999      	ldr	r1, [r3, #24]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	021a      	lsls	r2, r3, #8
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	619a      	str	r2, [r3, #24]
 8003c22:	e040      	b.n	8003ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d11b      	bne.n	8003c62 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c3a:	f000 fb2d 	bl	8004298 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69da      	ldr	r2, [r3, #28]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 020c 	bic.w	r2, r2, #12
 8003c4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69d9      	ldr	r1, [r3, #28]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	61da      	str	r2, [r3, #28]
 8003c60:	e021      	b.n	8003ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	d11c      	bne.n	8003ca2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003c78:	f000 fb4a 	bl	8004310 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69da      	ldr	r2, [r3, #28]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c8a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69d9      	ldr	r1, [r3, #28]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	021a      	lsls	r2, r3, #8
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	61da      	str	r2, [r3, #28]
 8003ca0:	e001      	b.n	8003ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e0b4      	b.n	8003e3e <HAL_TIM_ConfigClockSource+0x186>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d0c:	d03e      	beq.n	8003d8c <HAL_TIM_ConfigClockSource+0xd4>
 8003d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d12:	f200 8087 	bhi.w	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d1a:	f000 8086 	beq.w	8003e2a <HAL_TIM_ConfigClockSource+0x172>
 8003d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d22:	d87f      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b70      	cmp	r3, #112	@ 0x70
 8003d26:	d01a      	beq.n	8003d5e <HAL_TIM_ConfigClockSource+0xa6>
 8003d28:	2b70      	cmp	r3, #112	@ 0x70
 8003d2a:	d87b      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d2c:	2b60      	cmp	r3, #96	@ 0x60
 8003d2e:	d050      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x11a>
 8003d30:	2b60      	cmp	r3, #96	@ 0x60
 8003d32:	d877      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d34:	2b50      	cmp	r3, #80	@ 0x50
 8003d36:	d03c      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0xfa>
 8003d38:	2b50      	cmp	r3, #80	@ 0x50
 8003d3a:	d873      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d3c:	2b40      	cmp	r3, #64	@ 0x40
 8003d3e:	d058      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x13a>
 8003d40:	2b40      	cmp	r3, #64	@ 0x40
 8003d42:	d86f      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d44:	2b30      	cmp	r3, #48	@ 0x30
 8003d46:	d064      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x15a>
 8003d48:	2b30      	cmp	r3, #48	@ 0x30
 8003d4a:	d86b      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d060      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x15a>
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d867      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d05c      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x15a>
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d05a      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x15a>
 8003d5c:	e062      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d6e:	f000 fb27 	bl	80043c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	609a      	str	r2, [r3, #8]
      break;
 8003d8a:	e04f      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d9c:	f000 fb10 	bl	80043c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dae:	609a      	str	r2, [r3, #8]
      break;
 8003db0:	e03c      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f000 f9ce 	bl	8004160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2150      	movs	r1, #80	@ 0x50
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fadd 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8003dd0:	e02c      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dde:	461a      	mov	r2, r3
 8003de0:	f000 fa2a 	bl	8004238 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2160      	movs	r1, #96	@ 0x60
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 facd 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8003df0:	e01c      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f000 f9ae 	bl	8004160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2140      	movs	r1, #64	@ 0x40
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fabd 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8003e10:	e00c      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f000 fab4 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8003e22:	e003      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
      break;
 8003e28:	e000      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	d831      	bhi.n	8003ec0 <HAL_TIM_ReadCapturedValue+0x78>
 8003e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e64 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003e99 	.word	0x08003e99
 8003e68:	08003ec1 	.word	0x08003ec1
 8003e6c:	08003ec1 	.word	0x08003ec1
 8003e70:	08003ec1 	.word	0x08003ec1
 8003e74:	08003ea3 	.word	0x08003ea3
 8003e78:	08003ec1 	.word	0x08003ec1
 8003e7c:	08003ec1 	.word	0x08003ec1
 8003e80:	08003ec1 	.word	0x08003ec1
 8003e84:	08003ead 	.word	0x08003ead
 8003e88:	08003ec1 	.word	0x08003ec1
 8003e8c:	08003ec1 	.word	0x08003ec1
 8003e90:	08003ec1 	.word	0x08003ec1
 8003e94:	08003eb7 	.word	0x08003eb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e9e:	60fb      	str	r3, [r7, #12]

      break;
 8003ea0:	e00f      	b.n	8003ec2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea8:	60fb      	str	r3, [r7, #12]

      break;
 8003eaa:	e00a      	b.n	8003ec2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb2:	60fb      	str	r3, [r7, #12]

      break;
 8003eb4:	e005      	b.n	8003ec2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	60fb      	str	r3, [r7, #12]

      break;
 8003ebe:	e000      	b.n	8003ec2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003ec0:	bf00      	nop
  }

  return tmpreg;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a46      	ldr	r2, [pc, #280]	@ (800404c <TIM_Base_SetConfig+0x12c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d013      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f3e:	d00f      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a43      	ldr	r2, [pc, #268]	@ (8004050 <TIM_Base_SetConfig+0x130>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00b      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a42      	ldr	r2, [pc, #264]	@ (8004054 <TIM_Base_SetConfig+0x134>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a41      	ldr	r2, [pc, #260]	@ (8004058 <TIM_Base_SetConfig+0x138>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a40      	ldr	r2, [pc, #256]	@ (800405c <TIM_Base_SetConfig+0x13c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d108      	bne.n	8003f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a35      	ldr	r2, [pc, #212]	@ (800404c <TIM_Base_SetConfig+0x12c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d02b      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f80:	d027      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a32      	ldr	r2, [pc, #200]	@ (8004050 <TIM_Base_SetConfig+0x130>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d023      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a31      	ldr	r2, [pc, #196]	@ (8004054 <TIM_Base_SetConfig+0x134>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01f      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a30      	ldr	r2, [pc, #192]	@ (8004058 <TIM_Base_SetConfig+0x138>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d01b      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a2f      	ldr	r2, [pc, #188]	@ (800405c <TIM_Base_SetConfig+0x13c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d017      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a2e      	ldr	r2, [pc, #184]	@ (8004060 <TIM_Base_SetConfig+0x140>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a2d      	ldr	r2, [pc, #180]	@ (8004064 <TIM_Base_SetConfig+0x144>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00f      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8004068 <TIM_Base_SetConfig+0x148>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00b      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800406c <TIM_Base_SetConfig+0x14c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d007      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8004070 <TIM_Base_SetConfig+0x150>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d003      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a29      	ldr	r2, [pc, #164]	@ (8004074 <TIM_Base_SetConfig+0x154>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d108      	bne.n	8003fe4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a10      	ldr	r2, [pc, #64]	@ (800404c <TIM_Base_SetConfig+0x12c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_Base_SetConfig+0xf8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a12      	ldr	r2, [pc, #72]	@ (800405c <TIM_Base_SetConfig+0x13c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d103      	bne.n	8004020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b01      	cmp	r3, #1
 8004030:	d105      	bne.n	800403e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f023 0201 	bic.w	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	611a      	str	r2, [r3, #16]
  }
}
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40010000 	.word	0x40010000
 8004050:	40000400 	.word	0x40000400
 8004054:	40000800 	.word	0x40000800
 8004058:	40000c00 	.word	0x40000c00
 800405c:	40010400 	.word	0x40010400
 8004060:	40014000 	.word	0x40014000
 8004064:	40014400 	.word	0x40014400
 8004068:	40014800 	.word	0x40014800
 800406c:	40001800 	.word	0x40001800
 8004070:	40001c00 	.word	0x40001c00
 8004074:	40002000 	.word	0x40002000

08004078 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f023 0201 	bic.w	r2, r3, #1
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a28      	ldr	r2, [pc, #160]	@ (8004144 <TIM_TI1_SetConfig+0xcc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01b      	beq.n	80040de <TIM_TI1_SetConfig+0x66>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ac:	d017      	beq.n	80040de <TIM_TI1_SetConfig+0x66>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4a25      	ldr	r2, [pc, #148]	@ (8004148 <TIM_TI1_SetConfig+0xd0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <TIM_TI1_SetConfig+0x66>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a24      	ldr	r2, [pc, #144]	@ (800414c <TIM_TI1_SetConfig+0xd4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00f      	beq.n	80040de <TIM_TI1_SetConfig+0x66>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4a23      	ldr	r2, [pc, #140]	@ (8004150 <TIM_TI1_SetConfig+0xd8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00b      	beq.n	80040de <TIM_TI1_SetConfig+0x66>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4a22      	ldr	r2, [pc, #136]	@ (8004154 <TIM_TI1_SetConfig+0xdc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d007      	beq.n	80040de <TIM_TI1_SetConfig+0x66>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a21      	ldr	r2, [pc, #132]	@ (8004158 <TIM_TI1_SetConfig+0xe0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d003      	beq.n	80040de <TIM_TI1_SetConfig+0x66>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4a20      	ldr	r2, [pc, #128]	@ (800415c <TIM_TI1_SetConfig+0xe4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <TIM_TI1_SetConfig+0x6a>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <TIM_TI1_SetConfig+0x6c>
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	e003      	b.n	8004102 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	b2db      	uxtb	r3, r3
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f023 030a 	bic.w	r3, r3, #10
 800411c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f003 030a 	and.w	r3, r3, #10
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	621a      	str	r2, [r3, #32]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40010000 	.word	0x40010000
 8004148:	40000400 	.word	0x40000400
 800414c:	40000800 	.word	0x40000800
 8004150:	40000c00 	.word	0x40000c00
 8004154:	40010400 	.word	0x40010400
 8004158:	40014000 	.word	0x40014000
 800415c:	40001800 	.word	0x40001800

08004160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f023 0201 	bic.w	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800418a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f023 030a 	bic.w	r3, r3, #10
 800419c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	621a      	str	r2, [r3, #32]
}
 80041b2:	bf00      	nop
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041be:	b480      	push	{r7}
 80041c0:	b087      	sub	sp, #28
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f023 0210 	bic.w	r2, r3, #16
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	031b      	lsls	r3, r3, #12
 8004202:	b29b      	uxth	r3, r3
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004210:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	621a      	str	r2, [r3, #32]
}
 800422c:	bf00      	nop
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f023 0210 	bic.w	r2, r3, #16
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	031b      	lsls	r3, r3, #12
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004274:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	621a      	str	r2, [r3, #32]
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f023 0303 	bic.w	r3, r3, #3
 80042c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80042e8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	621a      	str	r2, [r3, #32]
}
 8004304:	bf00      	nop
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800433c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800434e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	031b      	lsls	r3, r3, #12
 8004354:	b29b      	uxth	r3, r3
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004362:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	031b      	lsls	r3, r3, #12
 8004368:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f043 0307 	orr.w	r3, r3, #7
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	609a      	str	r2, [r3, #8]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	021a      	lsls	r2, r3, #8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	2201      	movs	r2, #1
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a1a      	ldr	r2, [r3, #32]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	43db      	mvns	r3, r3
 8004422:	401a      	ands	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a1a      	ldr	r2, [r3, #32]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	431a      	orrs	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	621a      	str	r2, [r3, #32]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004460:	2302      	movs	r3, #2
 8004462:	e05a      	b.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800448a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a21      	ldr	r2, [pc, #132]	@ (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d022      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b0:	d01d      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1d      	ldr	r2, [pc, #116]	@ (800452c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d018      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d013      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00e      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a18      	ldr	r2, [pc, #96]	@ (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d009      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a17      	ldr	r2, [pc, #92]	@ (800453c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d004      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a15      	ldr	r2, [pc, #84]	@ (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d10c      	bne.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40010000 	.word	0x40010000
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	40010400 	.word	0x40010400
 800453c:	40014000 	.word	0x40014000
 8004540:	40001800 	.word	0x40001800

08004544 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e042      	b.n	8004604 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fd fe9c 	bl	80022d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2224      	movs	r2, #36	@ 0x24
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fa09 	bl	80049c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695a      	ldr	r2, [r3, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	@ 0x28
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b20      	cmp	r3, #32
 800462a:	d175      	bne.n	8004718 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_UART_Transmit+0x2c>
 8004632:	88fb      	ldrh	r3, [r7, #6]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e06e      	b.n	800471a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2221      	movs	r2, #33	@ 0x21
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800464a:	f7fd ff4d 	bl	80024e8 <HAL_GetTick>
 800464e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	88fa      	ldrh	r2, [r7, #6]
 8004654:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	88fa      	ldrh	r2, [r7, #6]
 800465a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004664:	d108      	bne.n	8004678 <HAL_UART_Transmit+0x6c>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d104      	bne.n	8004678 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e003      	b.n	8004680 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004680:	e02e      	b.n	80046e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2200      	movs	r2, #0
 800468a:	2180      	movs	r1, #128	@ 0x80
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f8df 	bl	8004850 <UART_WaitOnFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e03a      	b.n	800471a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10b      	bne.n	80046c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	3302      	adds	r3, #2
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e007      	b.n	80046d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	3301      	adds	r3, #1
 80046d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1cb      	bne.n	8004682 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2200      	movs	r2, #0
 80046f2:	2140      	movs	r1, #64	@ 0x40
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f8ab 	bl	8004850 <UART_WaitOnFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e006      	b.n	800471a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	e000      	b.n	800471a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004718:	2302      	movs	r3, #2
  }
}
 800471a:	4618      	mov	r0, r3
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b08a      	sub	sp, #40	@ 0x28
 8004726:	af02      	add	r7, sp, #8
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b20      	cmp	r3, #32
 8004740:	f040 8081 	bne.w	8004846 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_UART_Receive+0x2e>
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e079      	b.n	8004848 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2222      	movs	r2, #34	@ 0x22
 800475e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004768:	f7fd febe 	bl	80024e8 <HAL_GetTick>
 800476c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	88fa      	ldrh	r2, [r7, #6]
 8004778:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004782:	d108      	bne.n	8004796 <HAL_UART_Receive+0x74>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800478c:	2300      	movs	r3, #0
 800478e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	e003      	b.n	800479e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800479e:	e047      	b.n	8004830 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2200      	movs	r2, #0
 80047a8:	2120      	movs	r1, #32
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f850 	bl	8004850 <UART_WaitOnFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e042      	b.n	8004848 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10c      	bne.n	80047e2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	3302      	adds	r3, #2
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	e01f      	b.n	8004822 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ea:	d007      	beq.n	80047fc <HAL_UART_Receive+0xda>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <HAL_UART_Receive+0xe8>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d106      	bne.n	800480a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	b2da      	uxtb	r2, r3
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	e008      	b.n	800481c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004816:	b2da      	uxtb	r2, r3
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1b2      	bne.n	80047a0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	e000      	b.n	8004848 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004846:	2302      	movs	r3, #2
  }
}
 8004848:	4618      	mov	r0, r3
 800484a:	3720      	adds	r7, #32
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004860:	e03b      	b.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d037      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486a:	f7fd fe3d 	bl	80024e8 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	6a3a      	ldr	r2, [r7, #32]
 8004876:	429a      	cmp	r2, r3
 8004878:	d302      	bcc.n	8004880 <UART_WaitOnFlagUntilTimeout+0x30>
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e03a      	b.n	80048fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	d023      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b80      	cmp	r3, #128	@ 0x80
 8004896:	d020      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b40      	cmp	r3, #64	@ 0x40
 800489c:	d01d      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d116      	bne.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f81d 	bl	8004902 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2208      	movs	r2, #8
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e00f      	b.n	80048fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4013      	ands	r3, r2
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	bf0c      	ite	eq
 80048ea:	2301      	moveq	r3, #1
 80048ec:	2300      	movne	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d0b4      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004902:	b480      	push	{r7}
 8004904:	b095      	sub	sp, #84	@ 0x54
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800491a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800492a:	643a      	str	r2, [r7, #64]	@ 0x40
 800492c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004930:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e5      	bne.n	800490a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3314      	adds	r3, #20
 8004944:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	61fb      	str	r3, [r7, #28]
   return(result);
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f023 0301 	bic.w	r3, r3, #1
 8004954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3314      	adds	r3, #20
 800495c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800495e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004960:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800496c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e5      	bne.n	800493e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	2b01      	cmp	r3, #1
 8004978:	d119      	bne.n	80049ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	330c      	adds	r3, #12
 8004980:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	60bb      	str	r3, [r7, #8]
   return(result);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f023 0310 	bic.w	r3, r3, #16
 8004990:	647b      	str	r3, [r7, #68]	@ 0x44
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	330c      	adds	r3, #12
 8004998:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800499a:	61ba      	str	r2, [r7, #24]
 800499c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6979      	ldr	r1, [r7, #20]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	613b      	str	r3, [r7, #16]
   return(result);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e5      	bne.n	800497a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049bc:	bf00      	nop
 80049be:	3754      	adds	r7, #84	@ 0x54
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049cc:	b0c0      	sub	sp, #256	@ 0x100
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e4:	68d9      	ldr	r1, [r3, #12]
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	ea40 0301 	orr.w	r3, r0, r1
 80049f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a20:	f021 010c 	bic.w	r1, r1, #12
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a42:	6999      	ldr	r1, [r3, #24]
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	ea40 0301 	orr.w	r3, r0, r1
 8004a4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b8f      	ldr	r3, [pc, #572]	@ (8004c94 <UART_SetConfig+0x2cc>)
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d005      	beq.n	8004a68 <UART_SetConfig+0xa0>
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b8d      	ldr	r3, [pc, #564]	@ (8004c98 <UART_SetConfig+0x2d0>)
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d104      	bne.n	8004a72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a68:	f7fe fd4c 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 8004a6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a70:	e003      	b.n	8004a7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a72:	f7fe fd33 	bl	80034dc <HAL_RCC_GetPCLK1Freq>
 8004a76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a84:	f040 810c 	bne.w	8004ca0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a9a:	4622      	mov	r2, r4
 8004a9c:	462b      	mov	r3, r5
 8004a9e:	1891      	adds	r1, r2, r2
 8004aa0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004aa2:	415b      	adcs	r3, r3
 8004aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004aaa:	4621      	mov	r1, r4
 8004aac:	eb12 0801 	adds.w	r8, r2, r1
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	eb43 0901 	adc.w	r9, r3, r1
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aca:	4690      	mov	r8, r2
 8004acc:	4699      	mov	r9, r3
 8004ace:	4623      	mov	r3, r4
 8004ad0:	eb18 0303 	adds.w	r3, r8, r3
 8004ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ad8:	462b      	mov	r3, r5
 8004ada:	eb49 0303 	adc.w	r3, r9, r3
 8004ade:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004aee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004af2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004af6:	460b      	mov	r3, r1
 8004af8:	18db      	adds	r3, r3, r3
 8004afa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004afc:	4613      	mov	r3, r2
 8004afe:	eb42 0303 	adc.w	r3, r2, r3
 8004b02:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b0c:	f7fc f89c 	bl	8000c48 <__aeabi_uldivmod>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4b61      	ldr	r3, [pc, #388]	@ (8004c9c <UART_SetConfig+0x2d4>)
 8004b16:	fba3 2302 	umull	r2, r3, r3, r2
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	011c      	lsls	r4, r3, #4
 8004b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b30:	4642      	mov	r2, r8
 8004b32:	464b      	mov	r3, r9
 8004b34:	1891      	adds	r1, r2, r2
 8004b36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b38:	415b      	adcs	r3, r3
 8004b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b40:	4641      	mov	r1, r8
 8004b42:	eb12 0a01 	adds.w	sl, r2, r1
 8004b46:	4649      	mov	r1, r9
 8004b48:	eb43 0b01 	adc.w	fp, r3, r1
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b60:	4692      	mov	sl, r2
 8004b62:	469b      	mov	fp, r3
 8004b64:	4643      	mov	r3, r8
 8004b66:	eb1a 0303 	adds.w	r3, sl, r3
 8004b6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b6e:	464b      	mov	r3, r9
 8004b70:	eb4b 0303 	adc.w	r3, fp, r3
 8004b74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	18db      	adds	r3, r3, r3
 8004b90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b92:	4613      	mov	r3, r2
 8004b94:	eb42 0303 	adc.w	r3, r2, r3
 8004b98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ba2:	f7fc f851 	bl	8000c48 <__aeabi_uldivmod>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4611      	mov	r1, r2
 8004bac:	4b3b      	ldr	r3, [pc, #236]	@ (8004c9c <UART_SetConfig+0x2d4>)
 8004bae:	fba3 2301 	umull	r2, r3, r3, r1
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	2264      	movs	r2, #100	@ 0x64
 8004bb6:	fb02 f303 	mul.w	r3, r2, r3
 8004bba:	1acb      	subs	r3, r1, r3
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bc2:	4b36      	ldr	r3, [pc, #216]	@ (8004c9c <UART_SetConfig+0x2d4>)
 8004bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004bd0:	441c      	add	r4, r3
 8004bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004be0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004be4:	4642      	mov	r2, r8
 8004be6:	464b      	mov	r3, r9
 8004be8:	1891      	adds	r1, r2, r2
 8004bea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bec:	415b      	adcs	r3, r3
 8004bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	1851      	adds	r1, r2, r1
 8004bf8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	414b      	adcs	r3, r1
 8004bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c0c:	4659      	mov	r1, fp
 8004c0e:	00cb      	lsls	r3, r1, #3
 8004c10:	4651      	mov	r1, sl
 8004c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c16:	4651      	mov	r1, sl
 8004c18:	00ca      	lsls	r2, r1, #3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4642      	mov	r2, r8
 8004c22:	189b      	adds	r3, r3, r2
 8004c24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c28:	464b      	mov	r3, r9
 8004c2a:	460a      	mov	r2, r1
 8004c2c:	eb42 0303 	adc.w	r3, r2, r3
 8004c30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c40:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c48:	460b      	mov	r3, r1
 8004c4a:	18db      	adds	r3, r3, r3
 8004c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c4e:	4613      	mov	r3, r2
 8004c50:	eb42 0303 	adc.w	r3, r2, r3
 8004c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c5e:	f7fb fff3 	bl	8000c48 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4b0d      	ldr	r3, [pc, #52]	@ (8004c9c <UART_SetConfig+0x2d4>)
 8004c68:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	2164      	movs	r1, #100	@ 0x64
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	3332      	adds	r3, #50	@ 0x32
 8004c7a:	4a08      	ldr	r2, [pc, #32]	@ (8004c9c <UART_SetConfig+0x2d4>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	f003 0207 	and.w	r2, r3, #7
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4422      	add	r2, r4
 8004c8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c90:	e106      	b.n	8004ea0 <UART_SetConfig+0x4d8>
 8004c92:	bf00      	nop
 8004c94:	40011000 	.word	0x40011000
 8004c98:	40011400 	.word	0x40011400
 8004c9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004caa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cb2:	4642      	mov	r2, r8
 8004cb4:	464b      	mov	r3, r9
 8004cb6:	1891      	adds	r1, r2, r2
 8004cb8:	6239      	str	r1, [r7, #32]
 8004cba:	415b      	adcs	r3, r3
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cc2:	4641      	mov	r1, r8
 8004cc4:	1854      	adds	r4, r2, r1
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	eb43 0501 	adc.w	r5, r3, r1
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	00eb      	lsls	r3, r5, #3
 8004cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cda:	00e2      	lsls	r2, r4, #3
 8004cdc:	4614      	mov	r4, r2
 8004cde:	461d      	mov	r5, r3
 8004ce0:	4643      	mov	r3, r8
 8004ce2:	18e3      	adds	r3, r4, r3
 8004ce4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ce8:	464b      	mov	r3, r9
 8004cea:	eb45 0303 	adc.w	r3, r5, r3
 8004cee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cfe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d0e:	4629      	mov	r1, r5
 8004d10:	008b      	lsls	r3, r1, #2
 8004d12:	4621      	mov	r1, r4
 8004d14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d18:	4621      	mov	r1, r4
 8004d1a:	008a      	lsls	r2, r1, #2
 8004d1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d20:	f7fb ff92 	bl	8000c48 <__aeabi_uldivmod>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4b60      	ldr	r3, [pc, #384]	@ (8004eac <UART_SetConfig+0x4e4>)
 8004d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	011c      	lsls	r4, r3, #4
 8004d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d44:	4642      	mov	r2, r8
 8004d46:	464b      	mov	r3, r9
 8004d48:	1891      	adds	r1, r2, r2
 8004d4a:	61b9      	str	r1, [r7, #24]
 8004d4c:	415b      	adcs	r3, r3
 8004d4e:	61fb      	str	r3, [r7, #28]
 8004d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d54:	4641      	mov	r1, r8
 8004d56:	1851      	adds	r1, r2, r1
 8004d58:	6139      	str	r1, [r7, #16]
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	414b      	adcs	r3, r1
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d6c:	4659      	mov	r1, fp
 8004d6e:	00cb      	lsls	r3, r1, #3
 8004d70:	4651      	mov	r1, sl
 8004d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d76:	4651      	mov	r1, sl
 8004d78:	00ca      	lsls	r2, r1, #3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4642      	mov	r2, r8
 8004d82:	189b      	adds	r3, r3, r2
 8004d84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d88:	464b      	mov	r3, r9
 8004d8a:	460a      	mov	r2, r1
 8004d8c:	eb42 0303 	adc.w	r3, r2, r3
 8004d90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004dac:	4649      	mov	r1, r9
 8004dae:	008b      	lsls	r3, r1, #2
 8004db0:	4641      	mov	r1, r8
 8004db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db6:	4641      	mov	r1, r8
 8004db8:	008a      	lsls	r2, r1, #2
 8004dba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004dbe:	f7fb ff43 	bl	8000c48 <__aeabi_uldivmod>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4b38      	ldr	r3, [pc, #224]	@ (8004eac <UART_SetConfig+0x4e4>)
 8004dca:	fba3 2301 	umull	r2, r3, r3, r1
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	2264      	movs	r2, #100	@ 0x64
 8004dd2:	fb02 f303 	mul.w	r3, r2, r3
 8004dd6:	1acb      	subs	r3, r1, r3
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	3332      	adds	r3, #50	@ 0x32
 8004ddc:	4a33      	ldr	r2, [pc, #204]	@ (8004eac <UART_SetConfig+0x4e4>)
 8004dde:	fba2 2303 	umull	r2, r3, r2, r3
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004de8:	441c      	add	r4, r3
 8004dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dee:	2200      	movs	r2, #0
 8004df0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004df2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004df4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004df8:	4642      	mov	r2, r8
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	1891      	adds	r1, r2, r2
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	415b      	adcs	r3, r3
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e08:	4641      	mov	r1, r8
 8004e0a:	1851      	adds	r1, r2, r1
 8004e0c:	6039      	str	r1, [r7, #0]
 8004e0e:	4649      	mov	r1, r9
 8004e10:	414b      	adcs	r3, r1
 8004e12:	607b      	str	r3, [r7, #4]
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e20:	4659      	mov	r1, fp
 8004e22:	00cb      	lsls	r3, r1, #3
 8004e24:	4651      	mov	r1, sl
 8004e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e2a:	4651      	mov	r1, sl
 8004e2c:	00ca      	lsls	r2, r1, #3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4619      	mov	r1, r3
 8004e32:	4603      	mov	r3, r0
 8004e34:	4642      	mov	r2, r8
 8004e36:	189b      	adds	r3, r3, r2
 8004e38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	460a      	mov	r2, r1
 8004e3e:	eb42 0303 	adc.w	r3, r2, r3
 8004e42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	008b      	lsls	r3, r1, #2
 8004e60:	4641      	mov	r1, r8
 8004e62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e66:	4641      	mov	r1, r8
 8004e68:	008a      	lsls	r2, r1, #2
 8004e6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e6e:	f7fb feeb 	bl	8000c48 <__aeabi_uldivmod>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4b0d      	ldr	r3, [pc, #52]	@ (8004eac <UART_SetConfig+0x4e4>)
 8004e78:	fba3 1302 	umull	r1, r3, r3, r2
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	2164      	movs	r1, #100	@ 0x64
 8004e80:	fb01 f303 	mul.w	r3, r1, r3
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	3332      	adds	r3, #50	@ 0x32
 8004e8a:	4a08      	ldr	r2, [pc, #32]	@ (8004eac <UART_SetConfig+0x4e4>)
 8004e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	f003 020f 	and.w	r2, r3, #15
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4422      	add	r2, r4
 8004e9e:	609a      	str	r2, [r3, #8]
}
 8004ea0:	bf00      	nop
 8004ea2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eac:	51eb851f 	.word	0x51eb851f

08004eb0 <__cvt>:
 8004eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb4:	ec57 6b10 	vmov	r6, r7, d0
 8004eb8:	2f00      	cmp	r7, #0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	bfbb      	ittet	lt
 8004ec2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004ec6:	461f      	movlt	r7, r3
 8004ec8:	2300      	movge	r3, #0
 8004eca:	232d      	movlt	r3, #45	@ 0x2d
 8004ecc:	700b      	strb	r3, [r1, #0]
 8004ece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ed0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004ed4:	4691      	mov	r9, r2
 8004ed6:	f023 0820 	bic.w	r8, r3, #32
 8004eda:	bfbc      	itt	lt
 8004edc:	4632      	movlt	r2, r6
 8004ede:	4616      	movlt	r6, r2
 8004ee0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ee4:	d005      	beq.n	8004ef2 <__cvt+0x42>
 8004ee6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004eea:	d100      	bne.n	8004eee <__cvt+0x3e>
 8004eec:	3401      	adds	r4, #1
 8004eee:	2102      	movs	r1, #2
 8004ef0:	e000      	b.n	8004ef4 <__cvt+0x44>
 8004ef2:	2103      	movs	r1, #3
 8004ef4:	ab03      	add	r3, sp, #12
 8004ef6:	9301      	str	r3, [sp, #4]
 8004ef8:	ab02      	add	r3, sp, #8
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	ec47 6b10 	vmov	d0, r6, r7
 8004f00:	4653      	mov	r3, sl
 8004f02:	4622      	mov	r2, r4
 8004f04:	f000 fe4c 	bl	8005ba0 <_dtoa_r>
 8004f08:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f0c:	4605      	mov	r5, r0
 8004f0e:	d119      	bne.n	8004f44 <__cvt+0x94>
 8004f10:	f019 0f01 	tst.w	r9, #1
 8004f14:	d00e      	beq.n	8004f34 <__cvt+0x84>
 8004f16:	eb00 0904 	add.w	r9, r0, r4
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4630      	mov	r0, r6
 8004f20:	4639      	mov	r1, r7
 8004f22:	f7fb fdd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f26:	b108      	cbz	r0, 8004f2c <__cvt+0x7c>
 8004f28:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f2c:	2230      	movs	r2, #48	@ 0x30
 8004f2e:	9b03      	ldr	r3, [sp, #12]
 8004f30:	454b      	cmp	r3, r9
 8004f32:	d31e      	bcc.n	8004f72 <__cvt+0xc2>
 8004f34:	9b03      	ldr	r3, [sp, #12]
 8004f36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f38:	1b5b      	subs	r3, r3, r5
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	b004      	add	sp, #16
 8004f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f48:	eb00 0904 	add.w	r9, r0, r4
 8004f4c:	d1e5      	bne.n	8004f1a <__cvt+0x6a>
 8004f4e:	7803      	ldrb	r3, [r0, #0]
 8004f50:	2b30      	cmp	r3, #48	@ 0x30
 8004f52:	d10a      	bne.n	8004f6a <__cvt+0xba>
 8004f54:	2200      	movs	r2, #0
 8004f56:	2300      	movs	r3, #0
 8004f58:	4630      	mov	r0, r6
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	f7fb fdb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f60:	b918      	cbnz	r0, 8004f6a <__cvt+0xba>
 8004f62:	f1c4 0401 	rsb	r4, r4, #1
 8004f66:	f8ca 4000 	str.w	r4, [sl]
 8004f6a:	f8da 3000 	ldr.w	r3, [sl]
 8004f6e:	4499      	add	r9, r3
 8004f70:	e7d3      	b.n	8004f1a <__cvt+0x6a>
 8004f72:	1c59      	adds	r1, r3, #1
 8004f74:	9103      	str	r1, [sp, #12]
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	e7d9      	b.n	8004f2e <__cvt+0x7e>

08004f7a <__exponent>:
 8004f7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	bfba      	itte	lt
 8004f80:	4249      	neglt	r1, r1
 8004f82:	232d      	movlt	r3, #45	@ 0x2d
 8004f84:	232b      	movge	r3, #43	@ 0x2b
 8004f86:	2909      	cmp	r1, #9
 8004f88:	7002      	strb	r2, [r0, #0]
 8004f8a:	7043      	strb	r3, [r0, #1]
 8004f8c:	dd29      	ble.n	8004fe2 <__exponent+0x68>
 8004f8e:	f10d 0307 	add.w	r3, sp, #7
 8004f92:	461d      	mov	r5, r3
 8004f94:	270a      	movs	r7, #10
 8004f96:	461a      	mov	r2, r3
 8004f98:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f9c:	fb07 1416 	mls	r4, r7, r6, r1
 8004fa0:	3430      	adds	r4, #48	@ 0x30
 8004fa2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	2c63      	cmp	r4, #99	@ 0x63
 8004faa:	f103 33ff 	add.w	r3, r3, #4294967295
 8004fae:	4631      	mov	r1, r6
 8004fb0:	dcf1      	bgt.n	8004f96 <__exponent+0x1c>
 8004fb2:	3130      	adds	r1, #48	@ 0x30
 8004fb4:	1e94      	subs	r4, r2, #2
 8004fb6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004fba:	1c41      	adds	r1, r0, #1
 8004fbc:	4623      	mov	r3, r4
 8004fbe:	42ab      	cmp	r3, r5
 8004fc0:	d30a      	bcc.n	8004fd8 <__exponent+0x5e>
 8004fc2:	f10d 0309 	add.w	r3, sp, #9
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	42ac      	cmp	r4, r5
 8004fca:	bf88      	it	hi
 8004fcc:	2300      	movhi	r3, #0
 8004fce:	3302      	adds	r3, #2
 8004fd0:	4403      	add	r3, r0
 8004fd2:	1a18      	subs	r0, r3, r0
 8004fd4:	b003      	add	sp, #12
 8004fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004fdc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004fe0:	e7ed      	b.n	8004fbe <__exponent+0x44>
 8004fe2:	2330      	movs	r3, #48	@ 0x30
 8004fe4:	3130      	adds	r1, #48	@ 0x30
 8004fe6:	7083      	strb	r3, [r0, #2]
 8004fe8:	70c1      	strb	r1, [r0, #3]
 8004fea:	1d03      	adds	r3, r0, #4
 8004fec:	e7f1      	b.n	8004fd2 <__exponent+0x58>
	...

08004ff0 <_printf_float>:
 8004ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	b08d      	sub	sp, #52	@ 0x34
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ffc:	4616      	mov	r6, r2
 8004ffe:	461f      	mov	r7, r3
 8005000:	4605      	mov	r5, r0
 8005002:	f000 fccd 	bl	80059a0 <_localeconv_r>
 8005006:	6803      	ldr	r3, [r0, #0]
 8005008:	9304      	str	r3, [sp, #16]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fb f930 	bl	8000270 <strlen>
 8005010:	2300      	movs	r3, #0
 8005012:	930a      	str	r3, [sp, #40]	@ 0x28
 8005014:	f8d8 3000 	ldr.w	r3, [r8]
 8005018:	9005      	str	r0, [sp, #20]
 800501a:	3307      	adds	r3, #7
 800501c:	f023 0307 	bic.w	r3, r3, #7
 8005020:	f103 0208 	add.w	r2, r3, #8
 8005024:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005028:	f8d4 b000 	ldr.w	fp, [r4]
 800502c:	f8c8 2000 	str.w	r2, [r8]
 8005030:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005034:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005038:	9307      	str	r3, [sp, #28]
 800503a:	f8cd 8018 	str.w	r8, [sp, #24]
 800503e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005046:	4b9c      	ldr	r3, [pc, #624]	@ (80052b8 <_printf_float+0x2c8>)
 8005048:	f04f 32ff 	mov.w	r2, #4294967295
 800504c:	f7fb fd6e 	bl	8000b2c <__aeabi_dcmpun>
 8005050:	bb70      	cbnz	r0, 80050b0 <_printf_float+0xc0>
 8005052:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005056:	4b98      	ldr	r3, [pc, #608]	@ (80052b8 <_printf_float+0x2c8>)
 8005058:	f04f 32ff 	mov.w	r2, #4294967295
 800505c:	f7fb fd48 	bl	8000af0 <__aeabi_dcmple>
 8005060:	bb30      	cbnz	r0, 80050b0 <_printf_float+0xc0>
 8005062:	2200      	movs	r2, #0
 8005064:	2300      	movs	r3, #0
 8005066:	4640      	mov	r0, r8
 8005068:	4649      	mov	r1, r9
 800506a:	f7fb fd37 	bl	8000adc <__aeabi_dcmplt>
 800506e:	b110      	cbz	r0, 8005076 <_printf_float+0x86>
 8005070:	232d      	movs	r3, #45	@ 0x2d
 8005072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005076:	4a91      	ldr	r2, [pc, #580]	@ (80052bc <_printf_float+0x2cc>)
 8005078:	4b91      	ldr	r3, [pc, #580]	@ (80052c0 <_printf_float+0x2d0>)
 800507a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800507e:	bf94      	ite	ls
 8005080:	4690      	movls	r8, r2
 8005082:	4698      	movhi	r8, r3
 8005084:	2303      	movs	r3, #3
 8005086:	6123      	str	r3, [r4, #16]
 8005088:	f02b 0304 	bic.w	r3, fp, #4
 800508c:	6023      	str	r3, [r4, #0]
 800508e:	f04f 0900 	mov.w	r9, #0
 8005092:	9700      	str	r7, [sp, #0]
 8005094:	4633      	mov	r3, r6
 8005096:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005098:	4621      	mov	r1, r4
 800509a:	4628      	mov	r0, r5
 800509c:	f000 f9d2 	bl	8005444 <_printf_common>
 80050a0:	3001      	adds	r0, #1
 80050a2:	f040 808d 	bne.w	80051c0 <_printf_float+0x1d0>
 80050a6:	f04f 30ff 	mov.w	r0, #4294967295
 80050aa:	b00d      	add	sp, #52	@ 0x34
 80050ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b0:	4642      	mov	r2, r8
 80050b2:	464b      	mov	r3, r9
 80050b4:	4640      	mov	r0, r8
 80050b6:	4649      	mov	r1, r9
 80050b8:	f7fb fd38 	bl	8000b2c <__aeabi_dcmpun>
 80050bc:	b140      	cbz	r0, 80050d0 <_printf_float+0xe0>
 80050be:	464b      	mov	r3, r9
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	bfbc      	itt	lt
 80050c4:	232d      	movlt	r3, #45	@ 0x2d
 80050c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80050ca:	4a7e      	ldr	r2, [pc, #504]	@ (80052c4 <_printf_float+0x2d4>)
 80050cc:	4b7e      	ldr	r3, [pc, #504]	@ (80052c8 <_printf_float+0x2d8>)
 80050ce:	e7d4      	b.n	800507a <_printf_float+0x8a>
 80050d0:	6863      	ldr	r3, [r4, #4]
 80050d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80050d6:	9206      	str	r2, [sp, #24]
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	d13b      	bne.n	8005154 <_printf_float+0x164>
 80050dc:	2306      	movs	r3, #6
 80050de:	6063      	str	r3, [r4, #4]
 80050e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80050e4:	2300      	movs	r3, #0
 80050e6:	6022      	str	r2, [r4, #0]
 80050e8:	9303      	str	r3, [sp, #12]
 80050ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80050ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80050f0:	ab09      	add	r3, sp, #36	@ 0x24
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	6861      	ldr	r1, [r4, #4]
 80050f6:	ec49 8b10 	vmov	d0, r8, r9
 80050fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80050fe:	4628      	mov	r0, r5
 8005100:	f7ff fed6 	bl	8004eb0 <__cvt>
 8005104:	9b06      	ldr	r3, [sp, #24]
 8005106:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005108:	2b47      	cmp	r3, #71	@ 0x47
 800510a:	4680      	mov	r8, r0
 800510c:	d129      	bne.n	8005162 <_printf_float+0x172>
 800510e:	1cc8      	adds	r0, r1, #3
 8005110:	db02      	blt.n	8005118 <_printf_float+0x128>
 8005112:	6863      	ldr	r3, [r4, #4]
 8005114:	4299      	cmp	r1, r3
 8005116:	dd41      	ble.n	800519c <_printf_float+0x1ac>
 8005118:	f1aa 0a02 	sub.w	sl, sl, #2
 800511c:	fa5f fa8a 	uxtb.w	sl, sl
 8005120:	3901      	subs	r1, #1
 8005122:	4652      	mov	r2, sl
 8005124:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005128:	9109      	str	r1, [sp, #36]	@ 0x24
 800512a:	f7ff ff26 	bl	8004f7a <__exponent>
 800512e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005130:	1813      	adds	r3, r2, r0
 8005132:	2a01      	cmp	r2, #1
 8005134:	4681      	mov	r9, r0
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	dc02      	bgt.n	8005140 <_printf_float+0x150>
 800513a:	6822      	ldr	r2, [r4, #0]
 800513c:	07d2      	lsls	r2, r2, #31
 800513e:	d501      	bpl.n	8005144 <_printf_float+0x154>
 8005140:	3301      	adds	r3, #1
 8005142:	6123      	str	r3, [r4, #16]
 8005144:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0a2      	beq.n	8005092 <_printf_float+0xa2>
 800514c:	232d      	movs	r3, #45	@ 0x2d
 800514e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005152:	e79e      	b.n	8005092 <_printf_float+0xa2>
 8005154:	9a06      	ldr	r2, [sp, #24]
 8005156:	2a47      	cmp	r2, #71	@ 0x47
 8005158:	d1c2      	bne.n	80050e0 <_printf_float+0xf0>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1c0      	bne.n	80050e0 <_printf_float+0xf0>
 800515e:	2301      	movs	r3, #1
 8005160:	e7bd      	b.n	80050de <_printf_float+0xee>
 8005162:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005166:	d9db      	bls.n	8005120 <_printf_float+0x130>
 8005168:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800516c:	d118      	bne.n	80051a0 <_printf_float+0x1b0>
 800516e:	2900      	cmp	r1, #0
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	dd0b      	ble.n	800518c <_printf_float+0x19c>
 8005174:	6121      	str	r1, [r4, #16]
 8005176:	b913      	cbnz	r3, 800517e <_printf_float+0x18e>
 8005178:	6822      	ldr	r2, [r4, #0]
 800517a:	07d0      	lsls	r0, r2, #31
 800517c:	d502      	bpl.n	8005184 <_printf_float+0x194>
 800517e:	3301      	adds	r3, #1
 8005180:	440b      	add	r3, r1
 8005182:	6123      	str	r3, [r4, #16]
 8005184:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005186:	f04f 0900 	mov.w	r9, #0
 800518a:	e7db      	b.n	8005144 <_printf_float+0x154>
 800518c:	b913      	cbnz	r3, 8005194 <_printf_float+0x1a4>
 800518e:	6822      	ldr	r2, [r4, #0]
 8005190:	07d2      	lsls	r2, r2, #31
 8005192:	d501      	bpl.n	8005198 <_printf_float+0x1a8>
 8005194:	3302      	adds	r3, #2
 8005196:	e7f4      	b.n	8005182 <_printf_float+0x192>
 8005198:	2301      	movs	r3, #1
 800519a:	e7f2      	b.n	8005182 <_printf_float+0x192>
 800519c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80051a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051a2:	4299      	cmp	r1, r3
 80051a4:	db05      	blt.n	80051b2 <_printf_float+0x1c2>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	6121      	str	r1, [r4, #16]
 80051aa:	07d8      	lsls	r0, r3, #31
 80051ac:	d5ea      	bpl.n	8005184 <_printf_float+0x194>
 80051ae:	1c4b      	adds	r3, r1, #1
 80051b0:	e7e7      	b.n	8005182 <_printf_float+0x192>
 80051b2:	2900      	cmp	r1, #0
 80051b4:	bfd4      	ite	le
 80051b6:	f1c1 0202 	rsble	r2, r1, #2
 80051ba:	2201      	movgt	r2, #1
 80051bc:	4413      	add	r3, r2
 80051be:	e7e0      	b.n	8005182 <_printf_float+0x192>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	055a      	lsls	r2, r3, #21
 80051c4:	d407      	bmi.n	80051d6 <_printf_float+0x1e6>
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	4642      	mov	r2, r8
 80051ca:	4631      	mov	r1, r6
 80051cc:	4628      	mov	r0, r5
 80051ce:	47b8      	blx	r7
 80051d0:	3001      	adds	r0, #1
 80051d2:	d12b      	bne.n	800522c <_printf_float+0x23c>
 80051d4:	e767      	b.n	80050a6 <_printf_float+0xb6>
 80051d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051da:	f240 80dd 	bls.w	8005398 <_printf_float+0x3a8>
 80051de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80051e2:	2200      	movs	r2, #0
 80051e4:	2300      	movs	r3, #0
 80051e6:	f7fb fc6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d033      	beq.n	8005256 <_printf_float+0x266>
 80051ee:	4a37      	ldr	r2, [pc, #220]	@ (80052cc <_printf_float+0x2dc>)
 80051f0:	2301      	movs	r3, #1
 80051f2:	4631      	mov	r1, r6
 80051f4:	4628      	mov	r0, r5
 80051f6:	47b8      	blx	r7
 80051f8:	3001      	adds	r0, #1
 80051fa:	f43f af54 	beq.w	80050a6 <_printf_float+0xb6>
 80051fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005202:	4543      	cmp	r3, r8
 8005204:	db02      	blt.n	800520c <_printf_float+0x21c>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	07d8      	lsls	r0, r3, #31
 800520a:	d50f      	bpl.n	800522c <_printf_float+0x23c>
 800520c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005210:	4631      	mov	r1, r6
 8005212:	4628      	mov	r0, r5
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	f43f af45 	beq.w	80050a6 <_printf_float+0xb6>
 800521c:	f04f 0900 	mov.w	r9, #0
 8005220:	f108 38ff 	add.w	r8, r8, #4294967295
 8005224:	f104 0a1a 	add.w	sl, r4, #26
 8005228:	45c8      	cmp	r8, r9
 800522a:	dc09      	bgt.n	8005240 <_printf_float+0x250>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	079b      	lsls	r3, r3, #30
 8005230:	f100 8103 	bmi.w	800543a <_printf_float+0x44a>
 8005234:	68e0      	ldr	r0, [r4, #12]
 8005236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005238:	4298      	cmp	r0, r3
 800523a:	bfb8      	it	lt
 800523c:	4618      	movlt	r0, r3
 800523e:	e734      	b.n	80050aa <_printf_float+0xba>
 8005240:	2301      	movs	r3, #1
 8005242:	4652      	mov	r2, sl
 8005244:	4631      	mov	r1, r6
 8005246:	4628      	mov	r0, r5
 8005248:	47b8      	blx	r7
 800524a:	3001      	adds	r0, #1
 800524c:	f43f af2b 	beq.w	80050a6 <_printf_float+0xb6>
 8005250:	f109 0901 	add.w	r9, r9, #1
 8005254:	e7e8      	b.n	8005228 <_printf_float+0x238>
 8005256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	dc39      	bgt.n	80052d0 <_printf_float+0x2e0>
 800525c:	4a1b      	ldr	r2, [pc, #108]	@ (80052cc <_printf_float+0x2dc>)
 800525e:	2301      	movs	r3, #1
 8005260:	4631      	mov	r1, r6
 8005262:	4628      	mov	r0, r5
 8005264:	47b8      	blx	r7
 8005266:	3001      	adds	r0, #1
 8005268:	f43f af1d 	beq.w	80050a6 <_printf_float+0xb6>
 800526c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005270:	ea59 0303 	orrs.w	r3, r9, r3
 8005274:	d102      	bne.n	800527c <_printf_float+0x28c>
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	07d9      	lsls	r1, r3, #31
 800527a:	d5d7      	bpl.n	800522c <_printf_float+0x23c>
 800527c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f af0d 	beq.w	80050a6 <_printf_float+0xb6>
 800528c:	f04f 0a00 	mov.w	sl, #0
 8005290:	f104 0b1a 	add.w	fp, r4, #26
 8005294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005296:	425b      	negs	r3, r3
 8005298:	4553      	cmp	r3, sl
 800529a:	dc01      	bgt.n	80052a0 <_printf_float+0x2b0>
 800529c:	464b      	mov	r3, r9
 800529e:	e793      	b.n	80051c8 <_printf_float+0x1d8>
 80052a0:	2301      	movs	r3, #1
 80052a2:	465a      	mov	r2, fp
 80052a4:	4631      	mov	r1, r6
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	f43f aefb 	beq.w	80050a6 <_printf_float+0xb6>
 80052b0:	f10a 0a01 	add.w	sl, sl, #1
 80052b4:	e7ee      	b.n	8005294 <_printf_float+0x2a4>
 80052b6:	bf00      	nop
 80052b8:	7fefffff 	.word	0x7fefffff
 80052bc:	08007858 	.word	0x08007858
 80052c0:	0800785c 	.word	0x0800785c
 80052c4:	08007860 	.word	0x08007860
 80052c8:	08007864 	.word	0x08007864
 80052cc:	08007868 	.word	0x08007868
 80052d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80052d6:	4553      	cmp	r3, sl
 80052d8:	bfa8      	it	ge
 80052da:	4653      	movge	r3, sl
 80052dc:	2b00      	cmp	r3, #0
 80052de:	4699      	mov	r9, r3
 80052e0:	dc36      	bgt.n	8005350 <_printf_float+0x360>
 80052e2:	f04f 0b00 	mov.w	fp, #0
 80052e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052ea:	f104 021a 	add.w	r2, r4, #26
 80052ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052f0:	9306      	str	r3, [sp, #24]
 80052f2:	eba3 0309 	sub.w	r3, r3, r9
 80052f6:	455b      	cmp	r3, fp
 80052f8:	dc31      	bgt.n	800535e <_printf_float+0x36e>
 80052fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052fc:	459a      	cmp	sl, r3
 80052fe:	dc3a      	bgt.n	8005376 <_printf_float+0x386>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	07da      	lsls	r2, r3, #31
 8005304:	d437      	bmi.n	8005376 <_printf_float+0x386>
 8005306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005308:	ebaa 0903 	sub.w	r9, sl, r3
 800530c:	9b06      	ldr	r3, [sp, #24]
 800530e:	ebaa 0303 	sub.w	r3, sl, r3
 8005312:	4599      	cmp	r9, r3
 8005314:	bfa8      	it	ge
 8005316:	4699      	movge	r9, r3
 8005318:	f1b9 0f00 	cmp.w	r9, #0
 800531c:	dc33      	bgt.n	8005386 <_printf_float+0x396>
 800531e:	f04f 0800 	mov.w	r8, #0
 8005322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005326:	f104 0b1a 	add.w	fp, r4, #26
 800532a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800532c:	ebaa 0303 	sub.w	r3, sl, r3
 8005330:	eba3 0309 	sub.w	r3, r3, r9
 8005334:	4543      	cmp	r3, r8
 8005336:	f77f af79 	ble.w	800522c <_printf_float+0x23c>
 800533a:	2301      	movs	r3, #1
 800533c:	465a      	mov	r2, fp
 800533e:	4631      	mov	r1, r6
 8005340:	4628      	mov	r0, r5
 8005342:	47b8      	blx	r7
 8005344:	3001      	adds	r0, #1
 8005346:	f43f aeae 	beq.w	80050a6 <_printf_float+0xb6>
 800534a:	f108 0801 	add.w	r8, r8, #1
 800534e:	e7ec      	b.n	800532a <_printf_float+0x33a>
 8005350:	4642      	mov	r2, r8
 8005352:	4631      	mov	r1, r6
 8005354:	4628      	mov	r0, r5
 8005356:	47b8      	blx	r7
 8005358:	3001      	adds	r0, #1
 800535a:	d1c2      	bne.n	80052e2 <_printf_float+0x2f2>
 800535c:	e6a3      	b.n	80050a6 <_printf_float+0xb6>
 800535e:	2301      	movs	r3, #1
 8005360:	4631      	mov	r1, r6
 8005362:	4628      	mov	r0, r5
 8005364:	9206      	str	r2, [sp, #24]
 8005366:	47b8      	blx	r7
 8005368:	3001      	adds	r0, #1
 800536a:	f43f ae9c 	beq.w	80050a6 <_printf_float+0xb6>
 800536e:	9a06      	ldr	r2, [sp, #24]
 8005370:	f10b 0b01 	add.w	fp, fp, #1
 8005374:	e7bb      	b.n	80052ee <_printf_float+0x2fe>
 8005376:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800537a:	4631      	mov	r1, r6
 800537c:	4628      	mov	r0, r5
 800537e:	47b8      	blx	r7
 8005380:	3001      	adds	r0, #1
 8005382:	d1c0      	bne.n	8005306 <_printf_float+0x316>
 8005384:	e68f      	b.n	80050a6 <_printf_float+0xb6>
 8005386:	9a06      	ldr	r2, [sp, #24]
 8005388:	464b      	mov	r3, r9
 800538a:	4442      	add	r2, r8
 800538c:	4631      	mov	r1, r6
 800538e:	4628      	mov	r0, r5
 8005390:	47b8      	blx	r7
 8005392:	3001      	adds	r0, #1
 8005394:	d1c3      	bne.n	800531e <_printf_float+0x32e>
 8005396:	e686      	b.n	80050a6 <_printf_float+0xb6>
 8005398:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800539c:	f1ba 0f01 	cmp.w	sl, #1
 80053a0:	dc01      	bgt.n	80053a6 <_printf_float+0x3b6>
 80053a2:	07db      	lsls	r3, r3, #31
 80053a4:	d536      	bpl.n	8005414 <_printf_float+0x424>
 80053a6:	2301      	movs	r3, #1
 80053a8:	4642      	mov	r2, r8
 80053aa:	4631      	mov	r1, r6
 80053ac:	4628      	mov	r0, r5
 80053ae:	47b8      	blx	r7
 80053b0:	3001      	adds	r0, #1
 80053b2:	f43f ae78 	beq.w	80050a6 <_printf_float+0xb6>
 80053b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ba:	4631      	mov	r1, r6
 80053bc:	4628      	mov	r0, r5
 80053be:	47b8      	blx	r7
 80053c0:	3001      	adds	r0, #1
 80053c2:	f43f ae70 	beq.w	80050a6 <_printf_float+0xb6>
 80053c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80053ca:	2200      	movs	r2, #0
 80053cc:	2300      	movs	r3, #0
 80053ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053d2:	f7fb fb79 	bl	8000ac8 <__aeabi_dcmpeq>
 80053d6:	b9c0      	cbnz	r0, 800540a <_printf_float+0x41a>
 80053d8:	4653      	mov	r3, sl
 80053da:	f108 0201 	add.w	r2, r8, #1
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	47b8      	blx	r7
 80053e4:	3001      	adds	r0, #1
 80053e6:	d10c      	bne.n	8005402 <_printf_float+0x412>
 80053e8:	e65d      	b.n	80050a6 <_printf_float+0xb6>
 80053ea:	2301      	movs	r3, #1
 80053ec:	465a      	mov	r2, fp
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b8      	blx	r7
 80053f4:	3001      	adds	r0, #1
 80053f6:	f43f ae56 	beq.w	80050a6 <_printf_float+0xb6>
 80053fa:	f108 0801 	add.w	r8, r8, #1
 80053fe:	45d0      	cmp	r8, sl
 8005400:	dbf3      	blt.n	80053ea <_printf_float+0x3fa>
 8005402:	464b      	mov	r3, r9
 8005404:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005408:	e6df      	b.n	80051ca <_printf_float+0x1da>
 800540a:	f04f 0800 	mov.w	r8, #0
 800540e:	f104 0b1a 	add.w	fp, r4, #26
 8005412:	e7f4      	b.n	80053fe <_printf_float+0x40e>
 8005414:	2301      	movs	r3, #1
 8005416:	4642      	mov	r2, r8
 8005418:	e7e1      	b.n	80053de <_printf_float+0x3ee>
 800541a:	2301      	movs	r3, #1
 800541c:	464a      	mov	r2, r9
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	f43f ae3e 	beq.w	80050a6 <_printf_float+0xb6>
 800542a:	f108 0801 	add.w	r8, r8, #1
 800542e:	68e3      	ldr	r3, [r4, #12]
 8005430:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005432:	1a5b      	subs	r3, r3, r1
 8005434:	4543      	cmp	r3, r8
 8005436:	dcf0      	bgt.n	800541a <_printf_float+0x42a>
 8005438:	e6fc      	b.n	8005234 <_printf_float+0x244>
 800543a:	f04f 0800 	mov.w	r8, #0
 800543e:	f104 0919 	add.w	r9, r4, #25
 8005442:	e7f4      	b.n	800542e <_printf_float+0x43e>

08005444 <_printf_common>:
 8005444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005448:	4616      	mov	r6, r2
 800544a:	4698      	mov	r8, r3
 800544c:	688a      	ldr	r2, [r1, #8]
 800544e:	690b      	ldr	r3, [r1, #16]
 8005450:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005454:	4293      	cmp	r3, r2
 8005456:	bfb8      	it	lt
 8005458:	4613      	movlt	r3, r2
 800545a:	6033      	str	r3, [r6, #0]
 800545c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005460:	4607      	mov	r7, r0
 8005462:	460c      	mov	r4, r1
 8005464:	b10a      	cbz	r2, 800546a <_printf_common+0x26>
 8005466:	3301      	adds	r3, #1
 8005468:	6033      	str	r3, [r6, #0]
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	0699      	lsls	r1, r3, #26
 800546e:	bf42      	ittt	mi
 8005470:	6833      	ldrmi	r3, [r6, #0]
 8005472:	3302      	addmi	r3, #2
 8005474:	6033      	strmi	r3, [r6, #0]
 8005476:	6825      	ldr	r5, [r4, #0]
 8005478:	f015 0506 	ands.w	r5, r5, #6
 800547c:	d106      	bne.n	800548c <_printf_common+0x48>
 800547e:	f104 0a19 	add.w	sl, r4, #25
 8005482:	68e3      	ldr	r3, [r4, #12]
 8005484:	6832      	ldr	r2, [r6, #0]
 8005486:	1a9b      	subs	r3, r3, r2
 8005488:	42ab      	cmp	r3, r5
 800548a:	dc26      	bgt.n	80054da <_printf_common+0x96>
 800548c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005490:	6822      	ldr	r2, [r4, #0]
 8005492:	3b00      	subs	r3, #0
 8005494:	bf18      	it	ne
 8005496:	2301      	movne	r3, #1
 8005498:	0692      	lsls	r2, r2, #26
 800549a:	d42b      	bmi.n	80054f4 <_printf_common+0xb0>
 800549c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054a0:	4641      	mov	r1, r8
 80054a2:	4638      	mov	r0, r7
 80054a4:	47c8      	blx	r9
 80054a6:	3001      	adds	r0, #1
 80054a8:	d01e      	beq.n	80054e8 <_printf_common+0xa4>
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	6922      	ldr	r2, [r4, #16]
 80054ae:	f003 0306 	and.w	r3, r3, #6
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	bf02      	ittt	eq
 80054b6:	68e5      	ldreq	r5, [r4, #12]
 80054b8:	6833      	ldreq	r3, [r6, #0]
 80054ba:	1aed      	subeq	r5, r5, r3
 80054bc:	68a3      	ldr	r3, [r4, #8]
 80054be:	bf0c      	ite	eq
 80054c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054c4:	2500      	movne	r5, #0
 80054c6:	4293      	cmp	r3, r2
 80054c8:	bfc4      	itt	gt
 80054ca:	1a9b      	subgt	r3, r3, r2
 80054cc:	18ed      	addgt	r5, r5, r3
 80054ce:	2600      	movs	r6, #0
 80054d0:	341a      	adds	r4, #26
 80054d2:	42b5      	cmp	r5, r6
 80054d4:	d11a      	bne.n	800550c <_printf_common+0xc8>
 80054d6:	2000      	movs	r0, #0
 80054d8:	e008      	b.n	80054ec <_printf_common+0xa8>
 80054da:	2301      	movs	r3, #1
 80054dc:	4652      	mov	r2, sl
 80054de:	4641      	mov	r1, r8
 80054e0:	4638      	mov	r0, r7
 80054e2:	47c8      	blx	r9
 80054e4:	3001      	adds	r0, #1
 80054e6:	d103      	bne.n	80054f0 <_printf_common+0xac>
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f0:	3501      	adds	r5, #1
 80054f2:	e7c6      	b.n	8005482 <_printf_common+0x3e>
 80054f4:	18e1      	adds	r1, r4, r3
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	2030      	movs	r0, #48	@ 0x30
 80054fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054fe:	4422      	add	r2, r4
 8005500:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005504:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005508:	3302      	adds	r3, #2
 800550a:	e7c7      	b.n	800549c <_printf_common+0x58>
 800550c:	2301      	movs	r3, #1
 800550e:	4622      	mov	r2, r4
 8005510:	4641      	mov	r1, r8
 8005512:	4638      	mov	r0, r7
 8005514:	47c8      	blx	r9
 8005516:	3001      	adds	r0, #1
 8005518:	d0e6      	beq.n	80054e8 <_printf_common+0xa4>
 800551a:	3601      	adds	r6, #1
 800551c:	e7d9      	b.n	80054d2 <_printf_common+0x8e>
	...

08005520 <_printf_i>:
 8005520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005524:	7e0f      	ldrb	r7, [r1, #24]
 8005526:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005528:	2f78      	cmp	r7, #120	@ 0x78
 800552a:	4691      	mov	r9, r2
 800552c:	4680      	mov	r8, r0
 800552e:	460c      	mov	r4, r1
 8005530:	469a      	mov	sl, r3
 8005532:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005536:	d807      	bhi.n	8005548 <_printf_i+0x28>
 8005538:	2f62      	cmp	r7, #98	@ 0x62
 800553a:	d80a      	bhi.n	8005552 <_printf_i+0x32>
 800553c:	2f00      	cmp	r7, #0
 800553e:	f000 80d2 	beq.w	80056e6 <_printf_i+0x1c6>
 8005542:	2f58      	cmp	r7, #88	@ 0x58
 8005544:	f000 80b9 	beq.w	80056ba <_printf_i+0x19a>
 8005548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800554c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005550:	e03a      	b.n	80055c8 <_printf_i+0xa8>
 8005552:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005556:	2b15      	cmp	r3, #21
 8005558:	d8f6      	bhi.n	8005548 <_printf_i+0x28>
 800555a:	a101      	add	r1, pc, #4	@ (adr r1, 8005560 <_printf_i+0x40>)
 800555c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005560:	080055b9 	.word	0x080055b9
 8005564:	080055cd 	.word	0x080055cd
 8005568:	08005549 	.word	0x08005549
 800556c:	08005549 	.word	0x08005549
 8005570:	08005549 	.word	0x08005549
 8005574:	08005549 	.word	0x08005549
 8005578:	080055cd 	.word	0x080055cd
 800557c:	08005549 	.word	0x08005549
 8005580:	08005549 	.word	0x08005549
 8005584:	08005549 	.word	0x08005549
 8005588:	08005549 	.word	0x08005549
 800558c:	080056cd 	.word	0x080056cd
 8005590:	080055f7 	.word	0x080055f7
 8005594:	08005687 	.word	0x08005687
 8005598:	08005549 	.word	0x08005549
 800559c:	08005549 	.word	0x08005549
 80055a0:	080056ef 	.word	0x080056ef
 80055a4:	08005549 	.word	0x08005549
 80055a8:	080055f7 	.word	0x080055f7
 80055ac:	08005549 	.word	0x08005549
 80055b0:	08005549 	.word	0x08005549
 80055b4:	0800568f 	.word	0x0800568f
 80055b8:	6833      	ldr	r3, [r6, #0]
 80055ba:	1d1a      	adds	r2, r3, #4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6032      	str	r2, [r6, #0]
 80055c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055c8:	2301      	movs	r3, #1
 80055ca:	e09d      	b.n	8005708 <_printf_i+0x1e8>
 80055cc:	6833      	ldr	r3, [r6, #0]
 80055ce:	6820      	ldr	r0, [r4, #0]
 80055d0:	1d19      	adds	r1, r3, #4
 80055d2:	6031      	str	r1, [r6, #0]
 80055d4:	0606      	lsls	r6, r0, #24
 80055d6:	d501      	bpl.n	80055dc <_printf_i+0xbc>
 80055d8:	681d      	ldr	r5, [r3, #0]
 80055da:	e003      	b.n	80055e4 <_printf_i+0xc4>
 80055dc:	0645      	lsls	r5, r0, #25
 80055de:	d5fb      	bpl.n	80055d8 <_printf_i+0xb8>
 80055e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055e4:	2d00      	cmp	r5, #0
 80055e6:	da03      	bge.n	80055f0 <_printf_i+0xd0>
 80055e8:	232d      	movs	r3, #45	@ 0x2d
 80055ea:	426d      	negs	r5, r5
 80055ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055f0:	4859      	ldr	r0, [pc, #356]	@ (8005758 <_printf_i+0x238>)
 80055f2:	230a      	movs	r3, #10
 80055f4:	e011      	b.n	800561a <_printf_i+0xfa>
 80055f6:	6821      	ldr	r1, [r4, #0]
 80055f8:	6833      	ldr	r3, [r6, #0]
 80055fa:	0608      	lsls	r0, r1, #24
 80055fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005600:	d402      	bmi.n	8005608 <_printf_i+0xe8>
 8005602:	0649      	lsls	r1, r1, #25
 8005604:	bf48      	it	mi
 8005606:	b2ad      	uxthmi	r5, r5
 8005608:	2f6f      	cmp	r7, #111	@ 0x6f
 800560a:	4853      	ldr	r0, [pc, #332]	@ (8005758 <_printf_i+0x238>)
 800560c:	6033      	str	r3, [r6, #0]
 800560e:	bf14      	ite	ne
 8005610:	230a      	movne	r3, #10
 8005612:	2308      	moveq	r3, #8
 8005614:	2100      	movs	r1, #0
 8005616:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800561a:	6866      	ldr	r6, [r4, #4]
 800561c:	60a6      	str	r6, [r4, #8]
 800561e:	2e00      	cmp	r6, #0
 8005620:	bfa2      	ittt	ge
 8005622:	6821      	ldrge	r1, [r4, #0]
 8005624:	f021 0104 	bicge.w	r1, r1, #4
 8005628:	6021      	strge	r1, [r4, #0]
 800562a:	b90d      	cbnz	r5, 8005630 <_printf_i+0x110>
 800562c:	2e00      	cmp	r6, #0
 800562e:	d04b      	beq.n	80056c8 <_printf_i+0x1a8>
 8005630:	4616      	mov	r6, r2
 8005632:	fbb5 f1f3 	udiv	r1, r5, r3
 8005636:	fb03 5711 	mls	r7, r3, r1, r5
 800563a:	5dc7      	ldrb	r7, [r0, r7]
 800563c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005640:	462f      	mov	r7, r5
 8005642:	42bb      	cmp	r3, r7
 8005644:	460d      	mov	r5, r1
 8005646:	d9f4      	bls.n	8005632 <_printf_i+0x112>
 8005648:	2b08      	cmp	r3, #8
 800564a:	d10b      	bne.n	8005664 <_printf_i+0x144>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	07df      	lsls	r7, r3, #31
 8005650:	d508      	bpl.n	8005664 <_printf_i+0x144>
 8005652:	6923      	ldr	r3, [r4, #16]
 8005654:	6861      	ldr	r1, [r4, #4]
 8005656:	4299      	cmp	r1, r3
 8005658:	bfde      	ittt	le
 800565a:	2330      	movle	r3, #48	@ 0x30
 800565c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005660:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005664:	1b92      	subs	r2, r2, r6
 8005666:	6122      	str	r2, [r4, #16]
 8005668:	f8cd a000 	str.w	sl, [sp]
 800566c:	464b      	mov	r3, r9
 800566e:	aa03      	add	r2, sp, #12
 8005670:	4621      	mov	r1, r4
 8005672:	4640      	mov	r0, r8
 8005674:	f7ff fee6 	bl	8005444 <_printf_common>
 8005678:	3001      	adds	r0, #1
 800567a:	d14a      	bne.n	8005712 <_printf_i+0x1f2>
 800567c:	f04f 30ff 	mov.w	r0, #4294967295
 8005680:	b004      	add	sp, #16
 8005682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	f043 0320 	orr.w	r3, r3, #32
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	4833      	ldr	r0, [pc, #204]	@ (800575c <_printf_i+0x23c>)
 8005690:	2778      	movs	r7, #120	@ 0x78
 8005692:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	6831      	ldr	r1, [r6, #0]
 800569a:	061f      	lsls	r7, r3, #24
 800569c:	f851 5b04 	ldr.w	r5, [r1], #4
 80056a0:	d402      	bmi.n	80056a8 <_printf_i+0x188>
 80056a2:	065f      	lsls	r7, r3, #25
 80056a4:	bf48      	it	mi
 80056a6:	b2ad      	uxthmi	r5, r5
 80056a8:	6031      	str	r1, [r6, #0]
 80056aa:	07d9      	lsls	r1, r3, #31
 80056ac:	bf44      	itt	mi
 80056ae:	f043 0320 	orrmi.w	r3, r3, #32
 80056b2:	6023      	strmi	r3, [r4, #0]
 80056b4:	b11d      	cbz	r5, 80056be <_printf_i+0x19e>
 80056b6:	2310      	movs	r3, #16
 80056b8:	e7ac      	b.n	8005614 <_printf_i+0xf4>
 80056ba:	4827      	ldr	r0, [pc, #156]	@ (8005758 <_printf_i+0x238>)
 80056bc:	e7e9      	b.n	8005692 <_printf_i+0x172>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	f023 0320 	bic.w	r3, r3, #32
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	e7f6      	b.n	80056b6 <_printf_i+0x196>
 80056c8:	4616      	mov	r6, r2
 80056ca:	e7bd      	b.n	8005648 <_printf_i+0x128>
 80056cc:	6833      	ldr	r3, [r6, #0]
 80056ce:	6825      	ldr	r5, [r4, #0]
 80056d0:	6961      	ldr	r1, [r4, #20]
 80056d2:	1d18      	adds	r0, r3, #4
 80056d4:	6030      	str	r0, [r6, #0]
 80056d6:	062e      	lsls	r6, r5, #24
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	d501      	bpl.n	80056e0 <_printf_i+0x1c0>
 80056dc:	6019      	str	r1, [r3, #0]
 80056de:	e002      	b.n	80056e6 <_printf_i+0x1c6>
 80056e0:	0668      	lsls	r0, r5, #25
 80056e2:	d5fb      	bpl.n	80056dc <_printf_i+0x1bc>
 80056e4:	8019      	strh	r1, [r3, #0]
 80056e6:	2300      	movs	r3, #0
 80056e8:	6123      	str	r3, [r4, #16]
 80056ea:	4616      	mov	r6, r2
 80056ec:	e7bc      	b.n	8005668 <_printf_i+0x148>
 80056ee:	6833      	ldr	r3, [r6, #0]
 80056f0:	1d1a      	adds	r2, r3, #4
 80056f2:	6032      	str	r2, [r6, #0]
 80056f4:	681e      	ldr	r6, [r3, #0]
 80056f6:	6862      	ldr	r2, [r4, #4]
 80056f8:	2100      	movs	r1, #0
 80056fa:	4630      	mov	r0, r6
 80056fc:	f7fa fd68 	bl	80001d0 <memchr>
 8005700:	b108      	cbz	r0, 8005706 <_printf_i+0x1e6>
 8005702:	1b80      	subs	r0, r0, r6
 8005704:	6060      	str	r0, [r4, #4]
 8005706:	6863      	ldr	r3, [r4, #4]
 8005708:	6123      	str	r3, [r4, #16]
 800570a:	2300      	movs	r3, #0
 800570c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005710:	e7aa      	b.n	8005668 <_printf_i+0x148>
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	4632      	mov	r2, r6
 8005716:	4649      	mov	r1, r9
 8005718:	4640      	mov	r0, r8
 800571a:	47d0      	blx	sl
 800571c:	3001      	adds	r0, #1
 800571e:	d0ad      	beq.n	800567c <_printf_i+0x15c>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	079b      	lsls	r3, r3, #30
 8005724:	d413      	bmi.n	800574e <_printf_i+0x22e>
 8005726:	68e0      	ldr	r0, [r4, #12]
 8005728:	9b03      	ldr	r3, [sp, #12]
 800572a:	4298      	cmp	r0, r3
 800572c:	bfb8      	it	lt
 800572e:	4618      	movlt	r0, r3
 8005730:	e7a6      	b.n	8005680 <_printf_i+0x160>
 8005732:	2301      	movs	r3, #1
 8005734:	4632      	mov	r2, r6
 8005736:	4649      	mov	r1, r9
 8005738:	4640      	mov	r0, r8
 800573a:	47d0      	blx	sl
 800573c:	3001      	adds	r0, #1
 800573e:	d09d      	beq.n	800567c <_printf_i+0x15c>
 8005740:	3501      	adds	r5, #1
 8005742:	68e3      	ldr	r3, [r4, #12]
 8005744:	9903      	ldr	r1, [sp, #12]
 8005746:	1a5b      	subs	r3, r3, r1
 8005748:	42ab      	cmp	r3, r5
 800574a:	dcf2      	bgt.n	8005732 <_printf_i+0x212>
 800574c:	e7eb      	b.n	8005726 <_printf_i+0x206>
 800574e:	2500      	movs	r5, #0
 8005750:	f104 0619 	add.w	r6, r4, #25
 8005754:	e7f5      	b.n	8005742 <_printf_i+0x222>
 8005756:	bf00      	nop
 8005758:	0800786a 	.word	0x0800786a
 800575c:	0800787b 	.word	0x0800787b

08005760 <std>:
 8005760:	2300      	movs	r3, #0
 8005762:	b510      	push	{r4, lr}
 8005764:	4604      	mov	r4, r0
 8005766:	e9c0 3300 	strd	r3, r3, [r0]
 800576a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800576e:	6083      	str	r3, [r0, #8]
 8005770:	8181      	strh	r1, [r0, #12]
 8005772:	6643      	str	r3, [r0, #100]	@ 0x64
 8005774:	81c2      	strh	r2, [r0, #14]
 8005776:	6183      	str	r3, [r0, #24]
 8005778:	4619      	mov	r1, r3
 800577a:	2208      	movs	r2, #8
 800577c:	305c      	adds	r0, #92	@ 0x5c
 800577e:	f000 f906 	bl	800598e <memset>
 8005782:	4b0d      	ldr	r3, [pc, #52]	@ (80057b8 <std+0x58>)
 8005784:	6263      	str	r3, [r4, #36]	@ 0x24
 8005786:	4b0d      	ldr	r3, [pc, #52]	@ (80057bc <std+0x5c>)
 8005788:	62a3      	str	r3, [r4, #40]	@ 0x28
 800578a:	4b0d      	ldr	r3, [pc, #52]	@ (80057c0 <std+0x60>)
 800578c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800578e:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <std+0x64>)
 8005790:	6323      	str	r3, [r4, #48]	@ 0x30
 8005792:	4b0d      	ldr	r3, [pc, #52]	@ (80057c8 <std+0x68>)
 8005794:	6224      	str	r4, [r4, #32]
 8005796:	429c      	cmp	r4, r3
 8005798:	d006      	beq.n	80057a8 <std+0x48>
 800579a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800579e:	4294      	cmp	r4, r2
 80057a0:	d002      	beq.n	80057a8 <std+0x48>
 80057a2:	33d0      	adds	r3, #208	@ 0xd0
 80057a4:	429c      	cmp	r4, r3
 80057a6:	d105      	bne.n	80057b4 <std+0x54>
 80057a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b0:	f000 b96a 	b.w	8005a88 <__retarget_lock_init_recursive>
 80057b4:	bd10      	pop	{r4, pc}
 80057b6:	bf00      	nop
 80057b8:	08005909 	.word	0x08005909
 80057bc:	0800592b 	.word	0x0800592b
 80057c0:	08005963 	.word	0x08005963
 80057c4:	08005987 	.word	0x08005987
 80057c8:	20000334 	.word	0x20000334

080057cc <stdio_exit_handler>:
 80057cc:	4a02      	ldr	r2, [pc, #8]	@ (80057d8 <stdio_exit_handler+0xc>)
 80057ce:	4903      	ldr	r1, [pc, #12]	@ (80057dc <stdio_exit_handler+0x10>)
 80057d0:	4803      	ldr	r0, [pc, #12]	@ (80057e0 <stdio_exit_handler+0x14>)
 80057d2:	f000 b869 	b.w	80058a8 <_fwalk_sglue>
 80057d6:	bf00      	nop
 80057d8:	2000000c 	.word	0x2000000c
 80057dc:	080073b9 	.word	0x080073b9
 80057e0:	2000001c 	.word	0x2000001c

080057e4 <cleanup_stdio>:
 80057e4:	6841      	ldr	r1, [r0, #4]
 80057e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <cleanup_stdio+0x34>)
 80057e8:	4299      	cmp	r1, r3
 80057ea:	b510      	push	{r4, lr}
 80057ec:	4604      	mov	r4, r0
 80057ee:	d001      	beq.n	80057f4 <cleanup_stdio+0x10>
 80057f0:	f001 fde2 	bl	80073b8 <_fflush_r>
 80057f4:	68a1      	ldr	r1, [r4, #8]
 80057f6:	4b09      	ldr	r3, [pc, #36]	@ (800581c <cleanup_stdio+0x38>)
 80057f8:	4299      	cmp	r1, r3
 80057fa:	d002      	beq.n	8005802 <cleanup_stdio+0x1e>
 80057fc:	4620      	mov	r0, r4
 80057fe:	f001 fddb 	bl	80073b8 <_fflush_r>
 8005802:	68e1      	ldr	r1, [r4, #12]
 8005804:	4b06      	ldr	r3, [pc, #24]	@ (8005820 <cleanup_stdio+0x3c>)
 8005806:	4299      	cmp	r1, r3
 8005808:	d004      	beq.n	8005814 <cleanup_stdio+0x30>
 800580a:	4620      	mov	r0, r4
 800580c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005810:	f001 bdd2 	b.w	80073b8 <_fflush_r>
 8005814:	bd10      	pop	{r4, pc}
 8005816:	bf00      	nop
 8005818:	20000334 	.word	0x20000334
 800581c:	2000039c 	.word	0x2000039c
 8005820:	20000404 	.word	0x20000404

08005824 <global_stdio_init.part.0>:
 8005824:	b510      	push	{r4, lr}
 8005826:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <global_stdio_init.part.0+0x30>)
 8005828:	4c0b      	ldr	r4, [pc, #44]	@ (8005858 <global_stdio_init.part.0+0x34>)
 800582a:	4a0c      	ldr	r2, [pc, #48]	@ (800585c <global_stdio_init.part.0+0x38>)
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	4620      	mov	r0, r4
 8005830:	2200      	movs	r2, #0
 8005832:	2104      	movs	r1, #4
 8005834:	f7ff ff94 	bl	8005760 <std>
 8005838:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800583c:	2201      	movs	r2, #1
 800583e:	2109      	movs	r1, #9
 8005840:	f7ff ff8e 	bl	8005760 <std>
 8005844:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005848:	2202      	movs	r2, #2
 800584a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800584e:	2112      	movs	r1, #18
 8005850:	f7ff bf86 	b.w	8005760 <std>
 8005854:	2000046c 	.word	0x2000046c
 8005858:	20000334 	.word	0x20000334
 800585c:	080057cd 	.word	0x080057cd

08005860 <__sfp_lock_acquire>:
 8005860:	4801      	ldr	r0, [pc, #4]	@ (8005868 <__sfp_lock_acquire+0x8>)
 8005862:	f000 b912 	b.w	8005a8a <__retarget_lock_acquire_recursive>
 8005866:	bf00      	nop
 8005868:	20000475 	.word	0x20000475

0800586c <__sfp_lock_release>:
 800586c:	4801      	ldr	r0, [pc, #4]	@ (8005874 <__sfp_lock_release+0x8>)
 800586e:	f000 b90d 	b.w	8005a8c <__retarget_lock_release_recursive>
 8005872:	bf00      	nop
 8005874:	20000475 	.word	0x20000475

08005878 <__sinit>:
 8005878:	b510      	push	{r4, lr}
 800587a:	4604      	mov	r4, r0
 800587c:	f7ff fff0 	bl	8005860 <__sfp_lock_acquire>
 8005880:	6a23      	ldr	r3, [r4, #32]
 8005882:	b11b      	cbz	r3, 800588c <__sinit+0x14>
 8005884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005888:	f7ff bff0 	b.w	800586c <__sfp_lock_release>
 800588c:	4b04      	ldr	r3, [pc, #16]	@ (80058a0 <__sinit+0x28>)
 800588e:	6223      	str	r3, [r4, #32]
 8005890:	4b04      	ldr	r3, [pc, #16]	@ (80058a4 <__sinit+0x2c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f5      	bne.n	8005884 <__sinit+0xc>
 8005898:	f7ff ffc4 	bl	8005824 <global_stdio_init.part.0>
 800589c:	e7f2      	b.n	8005884 <__sinit+0xc>
 800589e:	bf00      	nop
 80058a0:	080057e5 	.word	0x080057e5
 80058a4:	2000046c 	.word	0x2000046c

080058a8 <_fwalk_sglue>:
 80058a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058ac:	4607      	mov	r7, r0
 80058ae:	4688      	mov	r8, r1
 80058b0:	4614      	mov	r4, r2
 80058b2:	2600      	movs	r6, #0
 80058b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058b8:	f1b9 0901 	subs.w	r9, r9, #1
 80058bc:	d505      	bpl.n	80058ca <_fwalk_sglue+0x22>
 80058be:	6824      	ldr	r4, [r4, #0]
 80058c0:	2c00      	cmp	r4, #0
 80058c2:	d1f7      	bne.n	80058b4 <_fwalk_sglue+0xc>
 80058c4:	4630      	mov	r0, r6
 80058c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ca:	89ab      	ldrh	r3, [r5, #12]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d907      	bls.n	80058e0 <_fwalk_sglue+0x38>
 80058d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058d4:	3301      	adds	r3, #1
 80058d6:	d003      	beq.n	80058e0 <_fwalk_sglue+0x38>
 80058d8:	4629      	mov	r1, r5
 80058da:	4638      	mov	r0, r7
 80058dc:	47c0      	blx	r8
 80058de:	4306      	orrs	r6, r0
 80058e0:	3568      	adds	r5, #104	@ 0x68
 80058e2:	e7e9      	b.n	80058b8 <_fwalk_sglue+0x10>

080058e4 <iprintf>:
 80058e4:	b40f      	push	{r0, r1, r2, r3}
 80058e6:	b507      	push	{r0, r1, r2, lr}
 80058e8:	4906      	ldr	r1, [pc, #24]	@ (8005904 <iprintf+0x20>)
 80058ea:	ab04      	add	r3, sp, #16
 80058ec:	6808      	ldr	r0, [r1, #0]
 80058ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80058f2:	6881      	ldr	r1, [r0, #8]
 80058f4:	9301      	str	r3, [sp, #4]
 80058f6:	f001 fbc3 	bl	8007080 <_vfiprintf_r>
 80058fa:	b003      	add	sp, #12
 80058fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005900:	b004      	add	sp, #16
 8005902:	4770      	bx	lr
 8005904:	20000018 	.word	0x20000018

08005908 <__sread>:
 8005908:	b510      	push	{r4, lr}
 800590a:	460c      	mov	r4, r1
 800590c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005910:	f000 f86c 	bl	80059ec <_read_r>
 8005914:	2800      	cmp	r0, #0
 8005916:	bfab      	itete	ge
 8005918:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800591a:	89a3      	ldrhlt	r3, [r4, #12]
 800591c:	181b      	addge	r3, r3, r0
 800591e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005922:	bfac      	ite	ge
 8005924:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005926:	81a3      	strhlt	r3, [r4, #12]
 8005928:	bd10      	pop	{r4, pc}

0800592a <__swrite>:
 800592a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592e:	461f      	mov	r7, r3
 8005930:	898b      	ldrh	r3, [r1, #12]
 8005932:	05db      	lsls	r3, r3, #23
 8005934:	4605      	mov	r5, r0
 8005936:	460c      	mov	r4, r1
 8005938:	4616      	mov	r6, r2
 800593a:	d505      	bpl.n	8005948 <__swrite+0x1e>
 800593c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005940:	2302      	movs	r3, #2
 8005942:	2200      	movs	r2, #0
 8005944:	f000 f840 	bl	80059c8 <_lseek_r>
 8005948:	89a3      	ldrh	r3, [r4, #12]
 800594a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800594e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005952:	81a3      	strh	r3, [r4, #12]
 8005954:	4632      	mov	r2, r6
 8005956:	463b      	mov	r3, r7
 8005958:	4628      	mov	r0, r5
 800595a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800595e:	f000 b857 	b.w	8005a10 <_write_r>

08005962 <__sseek>:
 8005962:	b510      	push	{r4, lr}
 8005964:	460c      	mov	r4, r1
 8005966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800596a:	f000 f82d 	bl	80059c8 <_lseek_r>
 800596e:	1c43      	adds	r3, r0, #1
 8005970:	89a3      	ldrh	r3, [r4, #12]
 8005972:	bf15      	itete	ne
 8005974:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005976:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800597a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800597e:	81a3      	strheq	r3, [r4, #12]
 8005980:	bf18      	it	ne
 8005982:	81a3      	strhne	r3, [r4, #12]
 8005984:	bd10      	pop	{r4, pc}

08005986 <__sclose>:
 8005986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800598a:	f000 b80d 	b.w	80059a8 <_close_r>

0800598e <memset>:
 800598e:	4402      	add	r2, r0
 8005990:	4603      	mov	r3, r0
 8005992:	4293      	cmp	r3, r2
 8005994:	d100      	bne.n	8005998 <memset+0xa>
 8005996:	4770      	bx	lr
 8005998:	f803 1b01 	strb.w	r1, [r3], #1
 800599c:	e7f9      	b.n	8005992 <memset+0x4>
	...

080059a0 <_localeconv_r>:
 80059a0:	4800      	ldr	r0, [pc, #0]	@ (80059a4 <_localeconv_r+0x4>)
 80059a2:	4770      	bx	lr
 80059a4:	20000158 	.word	0x20000158

080059a8 <_close_r>:
 80059a8:	b538      	push	{r3, r4, r5, lr}
 80059aa:	4d06      	ldr	r5, [pc, #24]	@ (80059c4 <_close_r+0x1c>)
 80059ac:	2300      	movs	r3, #0
 80059ae:	4604      	mov	r4, r0
 80059b0:	4608      	mov	r0, r1
 80059b2:	602b      	str	r3, [r5, #0]
 80059b4:	f7fc fac0 	bl	8001f38 <_close>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d102      	bne.n	80059c2 <_close_r+0x1a>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b103      	cbz	r3, 80059c2 <_close_r+0x1a>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	20000470 	.word	0x20000470

080059c8 <_lseek_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4d07      	ldr	r5, [pc, #28]	@ (80059e8 <_lseek_r+0x20>)
 80059cc:	4604      	mov	r4, r0
 80059ce:	4608      	mov	r0, r1
 80059d0:	4611      	mov	r1, r2
 80059d2:	2200      	movs	r2, #0
 80059d4:	602a      	str	r2, [r5, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f7fc fad5 	bl	8001f86 <_lseek>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d102      	bne.n	80059e6 <_lseek_r+0x1e>
 80059e0:	682b      	ldr	r3, [r5, #0]
 80059e2:	b103      	cbz	r3, 80059e6 <_lseek_r+0x1e>
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	bd38      	pop	{r3, r4, r5, pc}
 80059e8:	20000470 	.word	0x20000470

080059ec <_read_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	4d07      	ldr	r5, [pc, #28]	@ (8005a0c <_read_r+0x20>)
 80059f0:	4604      	mov	r4, r0
 80059f2:	4608      	mov	r0, r1
 80059f4:	4611      	mov	r1, r2
 80059f6:	2200      	movs	r2, #0
 80059f8:	602a      	str	r2, [r5, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	f7fc fa63 	bl	8001ec6 <_read>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_read_r+0x1e>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_read_r+0x1e>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	20000470 	.word	0x20000470

08005a10 <_write_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4d07      	ldr	r5, [pc, #28]	@ (8005a30 <_write_r+0x20>)
 8005a14:	4604      	mov	r4, r0
 8005a16:	4608      	mov	r0, r1
 8005a18:	4611      	mov	r1, r2
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	602a      	str	r2, [r5, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f7fc fa6e 	bl	8001f00 <_write>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_write_r+0x1e>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_write_r+0x1e>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	20000470 	.word	0x20000470

08005a34 <__errno>:
 8005a34:	4b01      	ldr	r3, [pc, #4]	@ (8005a3c <__errno+0x8>)
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	20000018 	.word	0x20000018

08005a40 <__libc_init_array>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	4d0d      	ldr	r5, [pc, #52]	@ (8005a78 <__libc_init_array+0x38>)
 8005a44:	4c0d      	ldr	r4, [pc, #52]	@ (8005a7c <__libc_init_array+0x3c>)
 8005a46:	1b64      	subs	r4, r4, r5
 8005a48:	10a4      	asrs	r4, r4, #2
 8005a4a:	2600      	movs	r6, #0
 8005a4c:	42a6      	cmp	r6, r4
 8005a4e:	d109      	bne.n	8005a64 <__libc_init_array+0x24>
 8005a50:	4d0b      	ldr	r5, [pc, #44]	@ (8005a80 <__libc_init_array+0x40>)
 8005a52:	4c0c      	ldr	r4, [pc, #48]	@ (8005a84 <__libc_init_array+0x44>)
 8005a54:	f001 febe 	bl	80077d4 <_init>
 8005a58:	1b64      	subs	r4, r4, r5
 8005a5a:	10a4      	asrs	r4, r4, #2
 8005a5c:	2600      	movs	r6, #0
 8005a5e:	42a6      	cmp	r6, r4
 8005a60:	d105      	bne.n	8005a6e <__libc_init_array+0x2e>
 8005a62:	bd70      	pop	{r4, r5, r6, pc}
 8005a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a68:	4798      	blx	r3
 8005a6a:	3601      	adds	r6, #1
 8005a6c:	e7ee      	b.n	8005a4c <__libc_init_array+0xc>
 8005a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a72:	4798      	blx	r3
 8005a74:	3601      	adds	r6, #1
 8005a76:	e7f2      	b.n	8005a5e <__libc_init_array+0x1e>
 8005a78:	08007bd0 	.word	0x08007bd0
 8005a7c:	08007bd0 	.word	0x08007bd0
 8005a80:	08007bd0 	.word	0x08007bd0
 8005a84:	08007bd4 	.word	0x08007bd4

08005a88 <__retarget_lock_init_recursive>:
 8005a88:	4770      	bx	lr

08005a8a <__retarget_lock_acquire_recursive>:
 8005a8a:	4770      	bx	lr

08005a8c <__retarget_lock_release_recursive>:
 8005a8c:	4770      	bx	lr

08005a8e <quorem>:
 8005a8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a92:	6903      	ldr	r3, [r0, #16]
 8005a94:	690c      	ldr	r4, [r1, #16]
 8005a96:	42a3      	cmp	r3, r4
 8005a98:	4607      	mov	r7, r0
 8005a9a:	db7e      	blt.n	8005b9a <quorem+0x10c>
 8005a9c:	3c01      	subs	r4, #1
 8005a9e:	f101 0814 	add.w	r8, r1, #20
 8005aa2:	00a3      	lsls	r3, r4, #2
 8005aa4:	f100 0514 	add.w	r5, r0, #20
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aae:	9301      	str	r3, [sp, #4]
 8005ab0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ab4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	429a      	cmp	r2, r3
 8005abc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ac0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ac4:	d32e      	bcc.n	8005b24 <quorem+0x96>
 8005ac6:	f04f 0a00 	mov.w	sl, #0
 8005aca:	46c4      	mov	ip, r8
 8005acc:	46ae      	mov	lr, r5
 8005ace:	46d3      	mov	fp, sl
 8005ad0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ad4:	b298      	uxth	r0, r3
 8005ad6:	fb06 a000 	mla	r0, r6, r0, sl
 8005ada:	0c02      	lsrs	r2, r0, #16
 8005adc:	0c1b      	lsrs	r3, r3, #16
 8005ade:	fb06 2303 	mla	r3, r6, r3, r2
 8005ae2:	f8de 2000 	ldr.w	r2, [lr]
 8005ae6:	b280      	uxth	r0, r0
 8005ae8:	b292      	uxth	r2, r2
 8005aea:	1a12      	subs	r2, r2, r0
 8005aec:	445a      	add	r2, fp
 8005aee:	f8de 0000 	ldr.w	r0, [lr]
 8005af2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005afc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b00:	b292      	uxth	r2, r2
 8005b02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b06:	45e1      	cmp	r9, ip
 8005b08:	f84e 2b04 	str.w	r2, [lr], #4
 8005b0c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b10:	d2de      	bcs.n	8005ad0 <quorem+0x42>
 8005b12:	9b00      	ldr	r3, [sp, #0]
 8005b14:	58eb      	ldr	r3, [r5, r3]
 8005b16:	b92b      	cbnz	r3, 8005b24 <quorem+0x96>
 8005b18:	9b01      	ldr	r3, [sp, #4]
 8005b1a:	3b04      	subs	r3, #4
 8005b1c:	429d      	cmp	r5, r3
 8005b1e:	461a      	mov	r2, r3
 8005b20:	d32f      	bcc.n	8005b82 <quorem+0xf4>
 8005b22:	613c      	str	r4, [r7, #16]
 8005b24:	4638      	mov	r0, r7
 8005b26:	f001 f979 	bl	8006e1c <__mcmp>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	db25      	blt.n	8005b7a <quorem+0xec>
 8005b2e:	4629      	mov	r1, r5
 8005b30:	2000      	movs	r0, #0
 8005b32:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b36:	f8d1 c000 	ldr.w	ip, [r1]
 8005b3a:	fa1f fe82 	uxth.w	lr, r2
 8005b3e:	fa1f f38c 	uxth.w	r3, ip
 8005b42:	eba3 030e 	sub.w	r3, r3, lr
 8005b46:	4403      	add	r3, r0
 8005b48:	0c12      	lsrs	r2, r2, #16
 8005b4a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005b4e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b58:	45c1      	cmp	r9, r8
 8005b5a:	f841 3b04 	str.w	r3, [r1], #4
 8005b5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b62:	d2e6      	bcs.n	8005b32 <quorem+0xa4>
 8005b64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b6c:	b922      	cbnz	r2, 8005b78 <quorem+0xea>
 8005b6e:	3b04      	subs	r3, #4
 8005b70:	429d      	cmp	r5, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	d30b      	bcc.n	8005b8e <quorem+0x100>
 8005b76:	613c      	str	r4, [r7, #16]
 8005b78:	3601      	adds	r6, #1
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	b003      	add	sp, #12
 8005b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	3b04      	subs	r3, #4
 8005b86:	2a00      	cmp	r2, #0
 8005b88:	d1cb      	bne.n	8005b22 <quorem+0x94>
 8005b8a:	3c01      	subs	r4, #1
 8005b8c:	e7c6      	b.n	8005b1c <quorem+0x8e>
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	3b04      	subs	r3, #4
 8005b92:	2a00      	cmp	r2, #0
 8005b94:	d1ef      	bne.n	8005b76 <quorem+0xe8>
 8005b96:	3c01      	subs	r4, #1
 8005b98:	e7ea      	b.n	8005b70 <quorem+0xe2>
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	e7ee      	b.n	8005b7c <quorem+0xee>
	...

08005ba0 <_dtoa_r>:
 8005ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba4:	69c7      	ldr	r7, [r0, #28]
 8005ba6:	b099      	sub	sp, #100	@ 0x64
 8005ba8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005bac:	ec55 4b10 	vmov	r4, r5, d0
 8005bb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005bb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005bb4:	4683      	mov	fp, r0
 8005bb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005bb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005bba:	b97f      	cbnz	r7, 8005bdc <_dtoa_r+0x3c>
 8005bbc:	2010      	movs	r0, #16
 8005bbe:	f000 fdfd 	bl	80067bc <malloc>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	f8cb 001c 	str.w	r0, [fp, #28]
 8005bc8:	b920      	cbnz	r0, 8005bd4 <_dtoa_r+0x34>
 8005bca:	4ba7      	ldr	r3, [pc, #668]	@ (8005e68 <_dtoa_r+0x2c8>)
 8005bcc:	21ef      	movs	r1, #239	@ 0xef
 8005bce:	48a7      	ldr	r0, [pc, #668]	@ (8005e6c <_dtoa_r+0x2cc>)
 8005bd0:	f001 fccc 	bl	800756c <__assert_func>
 8005bd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005bd8:	6007      	str	r7, [r0, #0]
 8005bda:	60c7      	str	r7, [r0, #12]
 8005bdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005be0:	6819      	ldr	r1, [r3, #0]
 8005be2:	b159      	cbz	r1, 8005bfc <_dtoa_r+0x5c>
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	604a      	str	r2, [r1, #4]
 8005be8:	2301      	movs	r3, #1
 8005bea:	4093      	lsls	r3, r2
 8005bec:	608b      	str	r3, [r1, #8]
 8005bee:	4658      	mov	r0, fp
 8005bf0:	f000 feda 	bl	80069a8 <_Bfree>
 8005bf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	1e2b      	subs	r3, r5, #0
 8005bfe:	bfb9      	ittee	lt
 8005c00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c04:	9303      	strlt	r3, [sp, #12]
 8005c06:	2300      	movge	r3, #0
 8005c08:	6033      	strge	r3, [r6, #0]
 8005c0a:	9f03      	ldr	r7, [sp, #12]
 8005c0c:	4b98      	ldr	r3, [pc, #608]	@ (8005e70 <_dtoa_r+0x2d0>)
 8005c0e:	bfbc      	itt	lt
 8005c10:	2201      	movlt	r2, #1
 8005c12:	6032      	strlt	r2, [r6, #0]
 8005c14:	43bb      	bics	r3, r7
 8005c16:	d112      	bne.n	8005c3e <_dtoa_r+0x9e>
 8005c18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005c1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c24:	4323      	orrs	r3, r4
 8005c26:	f000 854d 	beq.w	80066c4 <_dtoa_r+0xb24>
 8005c2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005e84 <_dtoa_r+0x2e4>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 854f 	beq.w	80066d4 <_dtoa_r+0xb34>
 8005c36:	f10a 0303 	add.w	r3, sl, #3
 8005c3a:	f000 bd49 	b.w	80066d0 <_dtoa_r+0xb30>
 8005c3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c42:	2200      	movs	r2, #0
 8005c44:	ec51 0b17 	vmov	r0, r1, d7
 8005c48:	2300      	movs	r3, #0
 8005c4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005c4e:	f7fa ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c52:	4680      	mov	r8, r0
 8005c54:	b158      	cbz	r0, 8005c6e <_dtoa_r+0xce>
 8005c56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005c58:	2301      	movs	r3, #1
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c5e:	b113      	cbz	r3, 8005c66 <_dtoa_r+0xc6>
 8005c60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005c62:	4b84      	ldr	r3, [pc, #528]	@ (8005e74 <_dtoa_r+0x2d4>)
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005e88 <_dtoa_r+0x2e8>
 8005c6a:	f000 bd33 	b.w	80066d4 <_dtoa_r+0xb34>
 8005c6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005c72:	aa16      	add	r2, sp, #88	@ 0x58
 8005c74:	a917      	add	r1, sp, #92	@ 0x5c
 8005c76:	4658      	mov	r0, fp
 8005c78:	f001 f980 	bl	8006f7c <__d2b>
 8005c7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005c80:	4681      	mov	r9, r0
 8005c82:	2e00      	cmp	r6, #0
 8005c84:	d077      	beq.n	8005d76 <_dtoa_r+0x1d6>
 8005c86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005c98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005c9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	4b74      	ldr	r3, [pc, #464]	@ (8005e78 <_dtoa_r+0x2d8>)
 8005ca6:	f7fa faef 	bl	8000288 <__aeabi_dsub>
 8005caa:	a369      	add	r3, pc, #420	@ (adr r3, 8005e50 <_dtoa_r+0x2b0>)
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f7fa fca2 	bl	80005f8 <__aeabi_dmul>
 8005cb4:	a368      	add	r3, pc, #416	@ (adr r3, 8005e58 <_dtoa_r+0x2b8>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f7fa fae7 	bl	800028c <__adddf3>
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	460d      	mov	r5, r1
 8005cc4:	f7fa fc2e 	bl	8000524 <__aeabi_i2d>
 8005cc8:	a365      	add	r3, pc, #404	@ (adr r3, 8005e60 <_dtoa_r+0x2c0>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f7fa fc93 	bl	80005f8 <__aeabi_dmul>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	4629      	mov	r1, r5
 8005cda:	f7fa fad7 	bl	800028c <__adddf3>
 8005cde:	4604      	mov	r4, r0
 8005ce0:	460d      	mov	r5, r1
 8005ce2:	f7fa ff39 	bl	8000b58 <__aeabi_d2iz>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	4607      	mov	r7, r0
 8005cea:	2300      	movs	r3, #0
 8005cec:	4620      	mov	r0, r4
 8005cee:	4629      	mov	r1, r5
 8005cf0:	f7fa fef4 	bl	8000adc <__aeabi_dcmplt>
 8005cf4:	b140      	cbz	r0, 8005d08 <_dtoa_r+0x168>
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	f7fa fc14 	bl	8000524 <__aeabi_i2d>
 8005cfc:	4622      	mov	r2, r4
 8005cfe:	462b      	mov	r3, r5
 8005d00:	f7fa fee2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d04:	b900      	cbnz	r0, 8005d08 <_dtoa_r+0x168>
 8005d06:	3f01      	subs	r7, #1
 8005d08:	2f16      	cmp	r7, #22
 8005d0a:	d851      	bhi.n	8005db0 <_dtoa_r+0x210>
 8005d0c:	4b5b      	ldr	r3, [pc, #364]	@ (8005e7c <_dtoa_r+0x2dc>)
 8005d0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d1a:	f7fa fedf 	bl	8000adc <__aeabi_dcmplt>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d048      	beq.n	8005db4 <_dtoa_r+0x214>
 8005d22:	3f01      	subs	r7, #1
 8005d24:	2300      	movs	r3, #0
 8005d26:	9312      	str	r3, [sp, #72]	@ 0x48
 8005d28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005d2a:	1b9b      	subs	r3, r3, r6
 8005d2c:	1e5a      	subs	r2, r3, #1
 8005d2e:	bf44      	itt	mi
 8005d30:	f1c3 0801 	rsbmi	r8, r3, #1
 8005d34:	2300      	movmi	r3, #0
 8005d36:	9208      	str	r2, [sp, #32]
 8005d38:	bf54      	ite	pl
 8005d3a:	f04f 0800 	movpl.w	r8, #0
 8005d3e:	9308      	strmi	r3, [sp, #32]
 8005d40:	2f00      	cmp	r7, #0
 8005d42:	db39      	blt.n	8005db8 <_dtoa_r+0x218>
 8005d44:	9b08      	ldr	r3, [sp, #32]
 8005d46:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005d48:	443b      	add	r3, r7
 8005d4a:	9308      	str	r3, [sp, #32]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d52:	2b09      	cmp	r3, #9
 8005d54:	d864      	bhi.n	8005e20 <_dtoa_r+0x280>
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	bfc4      	itt	gt
 8005d5a:	3b04      	subgt	r3, #4
 8005d5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d60:	f1a3 0302 	sub.w	r3, r3, #2
 8005d64:	bfcc      	ite	gt
 8005d66:	2400      	movgt	r4, #0
 8005d68:	2401      	movle	r4, #1
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d863      	bhi.n	8005e36 <_dtoa_r+0x296>
 8005d6e:	e8df f003 	tbb	[pc, r3]
 8005d72:	372a      	.short	0x372a
 8005d74:	5535      	.short	0x5535
 8005d76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005d7a:	441e      	add	r6, r3
 8005d7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	bfc1      	itttt	gt
 8005d84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005d88:	409f      	lslgt	r7, r3
 8005d8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005d8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005d92:	bfd6      	itet	le
 8005d94:	f1c3 0320 	rsble	r3, r3, #32
 8005d98:	ea47 0003 	orrgt.w	r0, r7, r3
 8005d9c:	fa04 f003 	lslle.w	r0, r4, r3
 8005da0:	f7fa fbb0 	bl	8000504 <__aeabi_ui2d>
 8005da4:	2201      	movs	r2, #1
 8005da6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005daa:	3e01      	subs	r6, #1
 8005dac:	9214      	str	r2, [sp, #80]	@ 0x50
 8005dae:	e777      	b.n	8005ca0 <_dtoa_r+0x100>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e7b8      	b.n	8005d26 <_dtoa_r+0x186>
 8005db4:	9012      	str	r0, [sp, #72]	@ 0x48
 8005db6:	e7b7      	b.n	8005d28 <_dtoa_r+0x188>
 8005db8:	427b      	negs	r3, r7
 8005dba:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	eba8 0807 	sub.w	r8, r8, r7
 8005dc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005dc4:	e7c4      	b.n	8005d50 <_dtoa_r+0x1b0>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	dc35      	bgt.n	8005e3c <_dtoa_r+0x29c>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	9307      	str	r3, [sp, #28]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005dda:	e00b      	b.n	8005df4 <_dtoa_r+0x254>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e7f3      	b.n	8005dc8 <_dtoa_r+0x228>
 8005de0:	2300      	movs	r3, #0
 8005de2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	3301      	adds	r3, #1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	9307      	str	r3, [sp, #28]
 8005df0:	bfb8      	it	lt
 8005df2:	2301      	movlt	r3, #1
 8005df4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005df8:	2100      	movs	r1, #0
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	f102 0514 	add.w	r5, r2, #20
 8005e00:	429d      	cmp	r5, r3
 8005e02:	d91f      	bls.n	8005e44 <_dtoa_r+0x2a4>
 8005e04:	6041      	str	r1, [r0, #4]
 8005e06:	4658      	mov	r0, fp
 8005e08:	f000 fd8e 	bl	8006928 <_Balloc>
 8005e0c:	4682      	mov	sl, r0
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d13c      	bne.n	8005e8c <_dtoa_r+0x2ec>
 8005e12:	4b1b      	ldr	r3, [pc, #108]	@ (8005e80 <_dtoa_r+0x2e0>)
 8005e14:	4602      	mov	r2, r0
 8005e16:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e1a:	e6d8      	b.n	8005bce <_dtoa_r+0x2e>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e7e0      	b.n	8005de2 <_dtoa_r+0x242>
 8005e20:	2401      	movs	r4, #1
 8005e22:	2300      	movs	r3, #0
 8005e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e28:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	9307      	str	r3, [sp, #28]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2312      	movs	r3, #18
 8005e34:	e7d0      	b.n	8005dd8 <_dtoa_r+0x238>
 8005e36:	2301      	movs	r3, #1
 8005e38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e3a:	e7f5      	b.n	8005e28 <_dtoa_r+0x288>
 8005e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	9307      	str	r3, [sp, #28]
 8005e42:	e7d7      	b.n	8005df4 <_dtoa_r+0x254>
 8005e44:	3101      	adds	r1, #1
 8005e46:	0052      	lsls	r2, r2, #1
 8005e48:	e7d8      	b.n	8005dfc <_dtoa_r+0x25c>
 8005e4a:	bf00      	nop
 8005e4c:	f3af 8000 	nop.w
 8005e50:	636f4361 	.word	0x636f4361
 8005e54:	3fd287a7 	.word	0x3fd287a7
 8005e58:	8b60c8b3 	.word	0x8b60c8b3
 8005e5c:	3fc68a28 	.word	0x3fc68a28
 8005e60:	509f79fb 	.word	0x509f79fb
 8005e64:	3fd34413 	.word	0x3fd34413
 8005e68:	08007899 	.word	0x08007899
 8005e6c:	080078b0 	.word	0x080078b0
 8005e70:	7ff00000 	.word	0x7ff00000
 8005e74:	08007869 	.word	0x08007869
 8005e78:	3ff80000 	.word	0x3ff80000
 8005e7c:	080079a8 	.word	0x080079a8
 8005e80:	08007908 	.word	0x08007908
 8005e84:	08007895 	.word	0x08007895
 8005e88:	08007868 	.word	0x08007868
 8005e8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e90:	6018      	str	r0, [r3, #0]
 8005e92:	9b07      	ldr	r3, [sp, #28]
 8005e94:	2b0e      	cmp	r3, #14
 8005e96:	f200 80a4 	bhi.w	8005fe2 <_dtoa_r+0x442>
 8005e9a:	2c00      	cmp	r4, #0
 8005e9c:	f000 80a1 	beq.w	8005fe2 <_dtoa_r+0x442>
 8005ea0:	2f00      	cmp	r7, #0
 8005ea2:	dd33      	ble.n	8005f0c <_dtoa_r+0x36c>
 8005ea4:	4bad      	ldr	r3, [pc, #692]	@ (800615c <_dtoa_r+0x5bc>)
 8005ea6:	f007 020f 	and.w	r2, r7, #15
 8005eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eae:	ed93 7b00 	vldr	d7, [r3]
 8005eb2:	05f8      	lsls	r0, r7, #23
 8005eb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005eb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005ebc:	d516      	bpl.n	8005eec <_dtoa_r+0x34c>
 8005ebe:	4ba8      	ldr	r3, [pc, #672]	@ (8006160 <_dtoa_r+0x5c0>)
 8005ec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ec8:	f7fa fcc0 	bl	800084c <__aeabi_ddiv>
 8005ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ed0:	f004 040f 	and.w	r4, r4, #15
 8005ed4:	2603      	movs	r6, #3
 8005ed6:	4da2      	ldr	r5, [pc, #648]	@ (8006160 <_dtoa_r+0x5c0>)
 8005ed8:	b954      	cbnz	r4, 8005ef0 <_dtoa_r+0x350>
 8005eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ee2:	f7fa fcb3 	bl	800084c <__aeabi_ddiv>
 8005ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eea:	e028      	b.n	8005f3e <_dtoa_r+0x39e>
 8005eec:	2602      	movs	r6, #2
 8005eee:	e7f2      	b.n	8005ed6 <_dtoa_r+0x336>
 8005ef0:	07e1      	lsls	r1, r4, #31
 8005ef2:	d508      	bpl.n	8005f06 <_dtoa_r+0x366>
 8005ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ef8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005efc:	f7fa fb7c 	bl	80005f8 <__aeabi_dmul>
 8005f00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f04:	3601      	adds	r6, #1
 8005f06:	1064      	asrs	r4, r4, #1
 8005f08:	3508      	adds	r5, #8
 8005f0a:	e7e5      	b.n	8005ed8 <_dtoa_r+0x338>
 8005f0c:	f000 80d2 	beq.w	80060b4 <_dtoa_r+0x514>
 8005f10:	427c      	negs	r4, r7
 8005f12:	4b92      	ldr	r3, [pc, #584]	@ (800615c <_dtoa_r+0x5bc>)
 8005f14:	4d92      	ldr	r5, [pc, #584]	@ (8006160 <_dtoa_r+0x5c0>)
 8005f16:	f004 020f 	and.w	r2, r4, #15
 8005f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f26:	f7fa fb67 	bl	80005f8 <__aeabi_dmul>
 8005f2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f2e:	1124      	asrs	r4, r4, #4
 8005f30:	2300      	movs	r3, #0
 8005f32:	2602      	movs	r6, #2
 8005f34:	2c00      	cmp	r4, #0
 8005f36:	f040 80b2 	bne.w	800609e <_dtoa_r+0x4fe>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1d3      	bne.n	8005ee6 <_dtoa_r+0x346>
 8005f3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80b7 	beq.w	80060b8 <_dtoa_r+0x518>
 8005f4a:	4b86      	ldr	r3, [pc, #536]	@ (8006164 <_dtoa_r+0x5c4>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4620      	mov	r0, r4
 8005f50:	4629      	mov	r1, r5
 8005f52:	f7fa fdc3 	bl	8000adc <__aeabi_dcmplt>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	f000 80ae 	beq.w	80060b8 <_dtoa_r+0x518>
 8005f5c:	9b07      	ldr	r3, [sp, #28]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80aa 	beq.w	80060b8 <_dtoa_r+0x518>
 8005f64:	9b00      	ldr	r3, [sp, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	dd37      	ble.n	8005fda <_dtoa_r+0x43a>
 8005f6a:	1e7b      	subs	r3, r7, #1
 8005f6c:	9304      	str	r3, [sp, #16]
 8005f6e:	4620      	mov	r0, r4
 8005f70:	4b7d      	ldr	r3, [pc, #500]	@ (8006168 <_dtoa_r+0x5c8>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	4629      	mov	r1, r5
 8005f76:	f7fa fb3f 	bl	80005f8 <__aeabi_dmul>
 8005f7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f7e:	9c00      	ldr	r4, [sp, #0]
 8005f80:	3601      	adds	r6, #1
 8005f82:	4630      	mov	r0, r6
 8005f84:	f7fa face 	bl	8000524 <__aeabi_i2d>
 8005f88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f8c:	f7fa fb34 	bl	80005f8 <__aeabi_dmul>
 8005f90:	4b76      	ldr	r3, [pc, #472]	@ (800616c <_dtoa_r+0x5cc>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	f7fa f97a 	bl	800028c <__adddf3>
 8005f98:	4605      	mov	r5, r0
 8005f9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005f9e:	2c00      	cmp	r4, #0
 8005fa0:	f040 808d 	bne.w	80060be <_dtoa_r+0x51e>
 8005fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fa8:	4b71      	ldr	r3, [pc, #452]	@ (8006170 <_dtoa_r+0x5d0>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	f7fa f96c 	bl	8000288 <__aeabi_dsub>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fb8:	462a      	mov	r2, r5
 8005fba:	4633      	mov	r3, r6
 8005fbc:	f7fa fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	f040 828b 	bne.w	80064dc <_dtoa_r+0x93c>
 8005fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fca:	462a      	mov	r2, r5
 8005fcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005fd0:	f7fa fd84 	bl	8000adc <__aeabi_dcmplt>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	f040 8128 	bne.w	800622a <_dtoa_r+0x68a>
 8005fda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005fde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005fe2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f2c0 815a 	blt.w	800629e <_dtoa_r+0x6fe>
 8005fea:	2f0e      	cmp	r7, #14
 8005fec:	f300 8157 	bgt.w	800629e <_dtoa_r+0x6fe>
 8005ff0:	4b5a      	ldr	r3, [pc, #360]	@ (800615c <_dtoa_r+0x5bc>)
 8005ff2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ff6:	ed93 7b00 	vldr	d7, [r3]
 8005ffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	ed8d 7b00 	vstr	d7, [sp]
 8006002:	da03      	bge.n	800600c <_dtoa_r+0x46c>
 8006004:	9b07      	ldr	r3, [sp, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	f340 8101 	ble.w	800620e <_dtoa_r+0x66e>
 800600c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006010:	4656      	mov	r6, sl
 8006012:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa fc17 	bl	800084c <__aeabi_ddiv>
 800601e:	f7fa fd9b 	bl	8000b58 <__aeabi_d2iz>
 8006022:	4680      	mov	r8, r0
 8006024:	f7fa fa7e 	bl	8000524 <__aeabi_i2d>
 8006028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800602c:	f7fa fae4 	bl	80005f8 <__aeabi_dmul>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4620      	mov	r0, r4
 8006036:	4629      	mov	r1, r5
 8006038:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800603c:	f7fa f924 	bl	8000288 <__aeabi_dsub>
 8006040:	f806 4b01 	strb.w	r4, [r6], #1
 8006044:	9d07      	ldr	r5, [sp, #28]
 8006046:	eba6 040a 	sub.w	r4, r6, sl
 800604a:	42a5      	cmp	r5, r4
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	f040 8117 	bne.w	8006282 <_dtoa_r+0x6e2>
 8006054:	f7fa f91a 	bl	800028c <__adddf3>
 8006058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800605c:	4604      	mov	r4, r0
 800605e:	460d      	mov	r5, r1
 8006060:	f7fa fd5a 	bl	8000b18 <__aeabi_dcmpgt>
 8006064:	2800      	cmp	r0, #0
 8006066:	f040 80f9 	bne.w	800625c <_dtoa_r+0x6bc>
 800606a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800606e:	4620      	mov	r0, r4
 8006070:	4629      	mov	r1, r5
 8006072:	f7fa fd29 	bl	8000ac8 <__aeabi_dcmpeq>
 8006076:	b118      	cbz	r0, 8006080 <_dtoa_r+0x4e0>
 8006078:	f018 0f01 	tst.w	r8, #1
 800607c:	f040 80ee 	bne.w	800625c <_dtoa_r+0x6bc>
 8006080:	4649      	mov	r1, r9
 8006082:	4658      	mov	r0, fp
 8006084:	f000 fc90 	bl	80069a8 <_Bfree>
 8006088:	2300      	movs	r3, #0
 800608a:	7033      	strb	r3, [r6, #0]
 800608c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800608e:	3701      	adds	r7, #1
 8006090:	601f      	str	r7, [r3, #0]
 8006092:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 831d 	beq.w	80066d4 <_dtoa_r+0xb34>
 800609a:	601e      	str	r6, [r3, #0]
 800609c:	e31a      	b.n	80066d4 <_dtoa_r+0xb34>
 800609e:	07e2      	lsls	r2, r4, #31
 80060a0:	d505      	bpl.n	80060ae <_dtoa_r+0x50e>
 80060a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060a6:	f7fa faa7 	bl	80005f8 <__aeabi_dmul>
 80060aa:	3601      	adds	r6, #1
 80060ac:	2301      	movs	r3, #1
 80060ae:	1064      	asrs	r4, r4, #1
 80060b0:	3508      	adds	r5, #8
 80060b2:	e73f      	b.n	8005f34 <_dtoa_r+0x394>
 80060b4:	2602      	movs	r6, #2
 80060b6:	e742      	b.n	8005f3e <_dtoa_r+0x39e>
 80060b8:	9c07      	ldr	r4, [sp, #28]
 80060ba:	9704      	str	r7, [sp, #16]
 80060bc:	e761      	b.n	8005f82 <_dtoa_r+0x3e2>
 80060be:	4b27      	ldr	r3, [pc, #156]	@ (800615c <_dtoa_r+0x5bc>)
 80060c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060ca:	4454      	add	r4, sl
 80060cc:	2900      	cmp	r1, #0
 80060ce:	d053      	beq.n	8006178 <_dtoa_r+0x5d8>
 80060d0:	4928      	ldr	r1, [pc, #160]	@ (8006174 <_dtoa_r+0x5d4>)
 80060d2:	2000      	movs	r0, #0
 80060d4:	f7fa fbba 	bl	800084c <__aeabi_ddiv>
 80060d8:	4633      	mov	r3, r6
 80060da:	462a      	mov	r2, r5
 80060dc:	f7fa f8d4 	bl	8000288 <__aeabi_dsub>
 80060e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80060e4:	4656      	mov	r6, sl
 80060e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ea:	f7fa fd35 	bl	8000b58 <__aeabi_d2iz>
 80060ee:	4605      	mov	r5, r0
 80060f0:	f7fa fa18 	bl	8000524 <__aeabi_i2d>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060fc:	f7fa f8c4 	bl	8000288 <__aeabi_dsub>
 8006100:	3530      	adds	r5, #48	@ 0x30
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800610a:	f806 5b01 	strb.w	r5, [r6], #1
 800610e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006112:	f7fa fce3 	bl	8000adc <__aeabi_dcmplt>
 8006116:	2800      	cmp	r0, #0
 8006118:	d171      	bne.n	80061fe <_dtoa_r+0x65e>
 800611a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800611e:	4911      	ldr	r1, [pc, #68]	@ (8006164 <_dtoa_r+0x5c4>)
 8006120:	2000      	movs	r0, #0
 8006122:	f7fa f8b1 	bl	8000288 <__aeabi_dsub>
 8006126:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800612a:	f7fa fcd7 	bl	8000adc <__aeabi_dcmplt>
 800612e:	2800      	cmp	r0, #0
 8006130:	f040 8095 	bne.w	800625e <_dtoa_r+0x6be>
 8006134:	42a6      	cmp	r6, r4
 8006136:	f43f af50 	beq.w	8005fda <_dtoa_r+0x43a>
 800613a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800613e:	4b0a      	ldr	r3, [pc, #40]	@ (8006168 <_dtoa_r+0x5c8>)
 8006140:	2200      	movs	r2, #0
 8006142:	f7fa fa59 	bl	80005f8 <__aeabi_dmul>
 8006146:	4b08      	ldr	r3, [pc, #32]	@ (8006168 <_dtoa_r+0x5c8>)
 8006148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800614c:	2200      	movs	r2, #0
 800614e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006152:	f7fa fa51 	bl	80005f8 <__aeabi_dmul>
 8006156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800615a:	e7c4      	b.n	80060e6 <_dtoa_r+0x546>
 800615c:	080079a8 	.word	0x080079a8
 8006160:	08007980 	.word	0x08007980
 8006164:	3ff00000 	.word	0x3ff00000
 8006168:	40240000 	.word	0x40240000
 800616c:	401c0000 	.word	0x401c0000
 8006170:	40140000 	.word	0x40140000
 8006174:	3fe00000 	.word	0x3fe00000
 8006178:	4631      	mov	r1, r6
 800617a:	4628      	mov	r0, r5
 800617c:	f7fa fa3c 	bl	80005f8 <__aeabi_dmul>
 8006180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006184:	9415      	str	r4, [sp, #84]	@ 0x54
 8006186:	4656      	mov	r6, sl
 8006188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618c:	f7fa fce4 	bl	8000b58 <__aeabi_d2iz>
 8006190:	4605      	mov	r5, r0
 8006192:	f7fa f9c7 	bl	8000524 <__aeabi_i2d>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800619e:	f7fa f873 	bl	8000288 <__aeabi_dsub>
 80061a2:	3530      	adds	r5, #48	@ 0x30
 80061a4:	f806 5b01 	strb.w	r5, [r6], #1
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	42a6      	cmp	r6, r4
 80061ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	d124      	bne.n	8006202 <_dtoa_r+0x662>
 80061b8:	4bac      	ldr	r3, [pc, #688]	@ (800646c <_dtoa_r+0x8cc>)
 80061ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061be:	f7fa f865 	bl	800028c <__adddf3>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ca:	f7fa fca5 	bl	8000b18 <__aeabi_dcmpgt>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d145      	bne.n	800625e <_dtoa_r+0x6be>
 80061d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061d6:	49a5      	ldr	r1, [pc, #660]	@ (800646c <_dtoa_r+0x8cc>)
 80061d8:	2000      	movs	r0, #0
 80061da:	f7fa f855 	bl	8000288 <__aeabi_dsub>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e6:	f7fa fc79 	bl	8000adc <__aeabi_dcmplt>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	f43f aef5 	beq.w	8005fda <_dtoa_r+0x43a>
 80061f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80061f2:	1e73      	subs	r3, r6, #1
 80061f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80061f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80061fa:	2b30      	cmp	r3, #48	@ 0x30
 80061fc:	d0f8      	beq.n	80061f0 <_dtoa_r+0x650>
 80061fe:	9f04      	ldr	r7, [sp, #16]
 8006200:	e73e      	b.n	8006080 <_dtoa_r+0x4e0>
 8006202:	4b9b      	ldr	r3, [pc, #620]	@ (8006470 <_dtoa_r+0x8d0>)
 8006204:	f7fa f9f8 	bl	80005f8 <__aeabi_dmul>
 8006208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800620c:	e7bc      	b.n	8006188 <_dtoa_r+0x5e8>
 800620e:	d10c      	bne.n	800622a <_dtoa_r+0x68a>
 8006210:	4b98      	ldr	r3, [pc, #608]	@ (8006474 <_dtoa_r+0x8d4>)
 8006212:	2200      	movs	r2, #0
 8006214:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006218:	f7fa f9ee 	bl	80005f8 <__aeabi_dmul>
 800621c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006220:	f7fa fc70 	bl	8000b04 <__aeabi_dcmpge>
 8006224:	2800      	cmp	r0, #0
 8006226:	f000 8157 	beq.w	80064d8 <_dtoa_r+0x938>
 800622a:	2400      	movs	r4, #0
 800622c:	4625      	mov	r5, r4
 800622e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006230:	43db      	mvns	r3, r3
 8006232:	9304      	str	r3, [sp, #16]
 8006234:	4656      	mov	r6, sl
 8006236:	2700      	movs	r7, #0
 8006238:	4621      	mov	r1, r4
 800623a:	4658      	mov	r0, fp
 800623c:	f000 fbb4 	bl	80069a8 <_Bfree>
 8006240:	2d00      	cmp	r5, #0
 8006242:	d0dc      	beq.n	80061fe <_dtoa_r+0x65e>
 8006244:	b12f      	cbz	r7, 8006252 <_dtoa_r+0x6b2>
 8006246:	42af      	cmp	r7, r5
 8006248:	d003      	beq.n	8006252 <_dtoa_r+0x6b2>
 800624a:	4639      	mov	r1, r7
 800624c:	4658      	mov	r0, fp
 800624e:	f000 fbab 	bl	80069a8 <_Bfree>
 8006252:	4629      	mov	r1, r5
 8006254:	4658      	mov	r0, fp
 8006256:	f000 fba7 	bl	80069a8 <_Bfree>
 800625a:	e7d0      	b.n	80061fe <_dtoa_r+0x65e>
 800625c:	9704      	str	r7, [sp, #16]
 800625e:	4633      	mov	r3, r6
 8006260:	461e      	mov	r6, r3
 8006262:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006266:	2a39      	cmp	r2, #57	@ 0x39
 8006268:	d107      	bne.n	800627a <_dtoa_r+0x6da>
 800626a:	459a      	cmp	sl, r3
 800626c:	d1f8      	bne.n	8006260 <_dtoa_r+0x6c0>
 800626e:	9a04      	ldr	r2, [sp, #16]
 8006270:	3201      	adds	r2, #1
 8006272:	9204      	str	r2, [sp, #16]
 8006274:	2230      	movs	r2, #48	@ 0x30
 8006276:	f88a 2000 	strb.w	r2, [sl]
 800627a:	781a      	ldrb	r2, [r3, #0]
 800627c:	3201      	adds	r2, #1
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	e7bd      	b.n	80061fe <_dtoa_r+0x65e>
 8006282:	4b7b      	ldr	r3, [pc, #492]	@ (8006470 <_dtoa_r+0x8d0>)
 8006284:	2200      	movs	r2, #0
 8006286:	f7fa f9b7 	bl	80005f8 <__aeabi_dmul>
 800628a:	2200      	movs	r2, #0
 800628c:	2300      	movs	r3, #0
 800628e:	4604      	mov	r4, r0
 8006290:	460d      	mov	r5, r1
 8006292:	f7fa fc19 	bl	8000ac8 <__aeabi_dcmpeq>
 8006296:	2800      	cmp	r0, #0
 8006298:	f43f aebb 	beq.w	8006012 <_dtoa_r+0x472>
 800629c:	e6f0      	b.n	8006080 <_dtoa_r+0x4e0>
 800629e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	f000 80db 	beq.w	800645c <_dtoa_r+0x8bc>
 80062a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062a8:	2a01      	cmp	r2, #1
 80062aa:	f300 80bf 	bgt.w	800642c <_dtoa_r+0x88c>
 80062ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80062b0:	2a00      	cmp	r2, #0
 80062b2:	f000 80b7 	beq.w	8006424 <_dtoa_r+0x884>
 80062b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80062ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80062bc:	4646      	mov	r6, r8
 80062be:	9a08      	ldr	r2, [sp, #32]
 80062c0:	2101      	movs	r1, #1
 80062c2:	441a      	add	r2, r3
 80062c4:	4658      	mov	r0, fp
 80062c6:	4498      	add	r8, r3
 80062c8:	9208      	str	r2, [sp, #32]
 80062ca:	f000 fc21 	bl	8006b10 <__i2b>
 80062ce:	4605      	mov	r5, r0
 80062d0:	b15e      	cbz	r6, 80062ea <_dtoa_r+0x74a>
 80062d2:	9b08      	ldr	r3, [sp, #32]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	dd08      	ble.n	80062ea <_dtoa_r+0x74a>
 80062d8:	42b3      	cmp	r3, r6
 80062da:	9a08      	ldr	r2, [sp, #32]
 80062dc:	bfa8      	it	ge
 80062de:	4633      	movge	r3, r6
 80062e0:	eba8 0803 	sub.w	r8, r8, r3
 80062e4:	1af6      	subs	r6, r6, r3
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	9308      	str	r3, [sp, #32]
 80062ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ec:	b1f3      	cbz	r3, 800632c <_dtoa_r+0x78c>
 80062ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80b7 	beq.w	8006464 <_dtoa_r+0x8c4>
 80062f6:	b18c      	cbz	r4, 800631c <_dtoa_r+0x77c>
 80062f8:	4629      	mov	r1, r5
 80062fa:	4622      	mov	r2, r4
 80062fc:	4658      	mov	r0, fp
 80062fe:	f000 fcc7 	bl	8006c90 <__pow5mult>
 8006302:	464a      	mov	r2, r9
 8006304:	4601      	mov	r1, r0
 8006306:	4605      	mov	r5, r0
 8006308:	4658      	mov	r0, fp
 800630a:	f000 fc17 	bl	8006b3c <__multiply>
 800630e:	4649      	mov	r1, r9
 8006310:	9004      	str	r0, [sp, #16]
 8006312:	4658      	mov	r0, fp
 8006314:	f000 fb48 	bl	80069a8 <_Bfree>
 8006318:	9b04      	ldr	r3, [sp, #16]
 800631a:	4699      	mov	r9, r3
 800631c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800631e:	1b1a      	subs	r2, r3, r4
 8006320:	d004      	beq.n	800632c <_dtoa_r+0x78c>
 8006322:	4649      	mov	r1, r9
 8006324:	4658      	mov	r0, fp
 8006326:	f000 fcb3 	bl	8006c90 <__pow5mult>
 800632a:	4681      	mov	r9, r0
 800632c:	2101      	movs	r1, #1
 800632e:	4658      	mov	r0, fp
 8006330:	f000 fbee 	bl	8006b10 <__i2b>
 8006334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006336:	4604      	mov	r4, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 81cf 	beq.w	80066dc <_dtoa_r+0xb3c>
 800633e:	461a      	mov	r2, r3
 8006340:	4601      	mov	r1, r0
 8006342:	4658      	mov	r0, fp
 8006344:	f000 fca4 	bl	8006c90 <__pow5mult>
 8006348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800634a:	2b01      	cmp	r3, #1
 800634c:	4604      	mov	r4, r0
 800634e:	f300 8095 	bgt.w	800647c <_dtoa_r+0x8dc>
 8006352:	9b02      	ldr	r3, [sp, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f040 8087 	bne.w	8006468 <_dtoa_r+0x8c8>
 800635a:	9b03      	ldr	r3, [sp, #12]
 800635c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006360:	2b00      	cmp	r3, #0
 8006362:	f040 8089 	bne.w	8006478 <_dtoa_r+0x8d8>
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800636c:	0d1b      	lsrs	r3, r3, #20
 800636e:	051b      	lsls	r3, r3, #20
 8006370:	b12b      	cbz	r3, 800637e <_dtoa_r+0x7de>
 8006372:	9b08      	ldr	r3, [sp, #32]
 8006374:	3301      	adds	r3, #1
 8006376:	9308      	str	r3, [sp, #32]
 8006378:	f108 0801 	add.w	r8, r8, #1
 800637c:	2301      	movs	r3, #1
 800637e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 81b0 	beq.w	80066e8 <_dtoa_r+0xb48>
 8006388:	6923      	ldr	r3, [r4, #16]
 800638a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800638e:	6918      	ldr	r0, [r3, #16]
 8006390:	f000 fb72 	bl	8006a78 <__hi0bits>
 8006394:	f1c0 0020 	rsb	r0, r0, #32
 8006398:	9b08      	ldr	r3, [sp, #32]
 800639a:	4418      	add	r0, r3
 800639c:	f010 001f 	ands.w	r0, r0, #31
 80063a0:	d077      	beq.n	8006492 <_dtoa_r+0x8f2>
 80063a2:	f1c0 0320 	rsb	r3, r0, #32
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	dd6b      	ble.n	8006482 <_dtoa_r+0x8e2>
 80063aa:	9b08      	ldr	r3, [sp, #32]
 80063ac:	f1c0 001c 	rsb	r0, r0, #28
 80063b0:	4403      	add	r3, r0
 80063b2:	4480      	add	r8, r0
 80063b4:	4406      	add	r6, r0
 80063b6:	9308      	str	r3, [sp, #32]
 80063b8:	f1b8 0f00 	cmp.w	r8, #0
 80063bc:	dd05      	ble.n	80063ca <_dtoa_r+0x82a>
 80063be:	4649      	mov	r1, r9
 80063c0:	4642      	mov	r2, r8
 80063c2:	4658      	mov	r0, fp
 80063c4:	f000 fcbe 	bl	8006d44 <__lshift>
 80063c8:	4681      	mov	r9, r0
 80063ca:	9b08      	ldr	r3, [sp, #32]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dd05      	ble.n	80063dc <_dtoa_r+0x83c>
 80063d0:	4621      	mov	r1, r4
 80063d2:	461a      	mov	r2, r3
 80063d4:	4658      	mov	r0, fp
 80063d6:	f000 fcb5 	bl	8006d44 <__lshift>
 80063da:	4604      	mov	r4, r0
 80063dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d059      	beq.n	8006496 <_dtoa_r+0x8f6>
 80063e2:	4621      	mov	r1, r4
 80063e4:	4648      	mov	r0, r9
 80063e6:	f000 fd19 	bl	8006e1c <__mcmp>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	da53      	bge.n	8006496 <_dtoa_r+0x8f6>
 80063ee:	1e7b      	subs	r3, r7, #1
 80063f0:	9304      	str	r3, [sp, #16]
 80063f2:	4649      	mov	r1, r9
 80063f4:	2300      	movs	r3, #0
 80063f6:	220a      	movs	r2, #10
 80063f8:	4658      	mov	r0, fp
 80063fa:	f000 faf7 	bl	80069ec <__multadd>
 80063fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006400:	4681      	mov	r9, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8172 	beq.w	80066ec <_dtoa_r+0xb4c>
 8006408:	2300      	movs	r3, #0
 800640a:	4629      	mov	r1, r5
 800640c:	220a      	movs	r2, #10
 800640e:	4658      	mov	r0, fp
 8006410:	f000 faec 	bl	80069ec <__multadd>
 8006414:	9b00      	ldr	r3, [sp, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	4605      	mov	r5, r0
 800641a:	dc67      	bgt.n	80064ec <_dtoa_r+0x94c>
 800641c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800641e:	2b02      	cmp	r3, #2
 8006420:	dc41      	bgt.n	80064a6 <_dtoa_r+0x906>
 8006422:	e063      	b.n	80064ec <_dtoa_r+0x94c>
 8006424:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006426:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800642a:	e746      	b.n	80062ba <_dtoa_r+0x71a>
 800642c:	9b07      	ldr	r3, [sp, #28]
 800642e:	1e5c      	subs	r4, r3, #1
 8006430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006432:	42a3      	cmp	r3, r4
 8006434:	bfbf      	itttt	lt
 8006436:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006438:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800643a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800643c:	1ae3      	sublt	r3, r4, r3
 800643e:	bfb4      	ite	lt
 8006440:	18d2      	addlt	r2, r2, r3
 8006442:	1b1c      	subge	r4, r3, r4
 8006444:	9b07      	ldr	r3, [sp, #28]
 8006446:	bfbc      	itt	lt
 8006448:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800644a:	2400      	movlt	r4, #0
 800644c:	2b00      	cmp	r3, #0
 800644e:	bfb5      	itete	lt
 8006450:	eba8 0603 	sublt.w	r6, r8, r3
 8006454:	9b07      	ldrge	r3, [sp, #28]
 8006456:	2300      	movlt	r3, #0
 8006458:	4646      	movge	r6, r8
 800645a:	e730      	b.n	80062be <_dtoa_r+0x71e>
 800645c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800645e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006460:	4646      	mov	r6, r8
 8006462:	e735      	b.n	80062d0 <_dtoa_r+0x730>
 8006464:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006466:	e75c      	b.n	8006322 <_dtoa_r+0x782>
 8006468:	2300      	movs	r3, #0
 800646a:	e788      	b.n	800637e <_dtoa_r+0x7de>
 800646c:	3fe00000 	.word	0x3fe00000
 8006470:	40240000 	.word	0x40240000
 8006474:	40140000 	.word	0x40140000
 8006478:	9b02      	ldr	r3, [sp, #8]
 800647a:	e780      	b.n	800637e <_dtoa_r+0x7de>
 800647c:	2300      	movs	r3, #0
 800647e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006480:	e782      	b.n	8006388 <_dtoa_r+0x7e8>
 8006482:	d099      	beq.n	80063b8 <_dtoa_r+0x818>
 8006484:	9a08      	ldr	r2, [sp, #32]
 8006486:	331c      	adds	r3, #28
 8006488:	441a      	add	r2, r3
 800648a:	4498      	add	r8, r3
 800648c:	441e      	add	r6, r3
 800648e:	9208      	str	r2, [sp, #32]
 8006490:	e792      	b.n	80063b8 <_dtoa_r+0x818>
 8006492:	4603      	mov	r3, r0
 8006494:	e7f6      	b.n	8006484 <_dtoa_r+0x8e4>
 8006496:	9b07      	ldr	r3, [sp, #28]
 8006498:	9704      	str	r7, [sp, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	dc20      	bgt.n	80064e0 <_dtoa_r+0x940>
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	dd1e      	ble.n	80064e4 <_dtoa_r+0x944>
 80064a6:	9b00      	ldr	r3, [sp, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f47f aec0 	bne.w	800622e <_dtoa_r+0x68e>
 80064ae:	4621      	mov	r1, r4
 80064b0:	2205      	movs	r2, #5
 80064b2:	4658      	mov	r0, fp
 80064b4:	f000 fa9a 	bl	80069ec <__multadd>
 80064b8:	4601      	mov	r1, r0
 80064ba:	4604      	mov	r4, r0
 80064bc:	4648      	mov	r0, r9
 80064be:	f000 fcad 	bl	8006e1c <__mcmp>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	f77f aeb3 	ble.w	800622e <_dtoa_r+0x68e>
 80064c8:	4656      	mov	r6, sl
 80064ca:	2331      	movs	r3, #49	@ 0x31
 80064cc:	f806 3b01 	strb.w	r3, [r6], #1
 80064d0:	9b04      	ldr	r3, [sp, #16]
 80064d2:	3301      	adds	r3, #1
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	e6ae      	b.n	8006236 <_dtoa_r+0x696>
 80064d8:	9c07      	ldr	r4, [sp, #28]
 80064da:	9704      	str	r7, [sp, #16]
 80064dc:	4625      	mov	r5, r4
 80064de:	e7f3      	b.n	80064c8 <_dtoa_r+0x928>
 80064e0:	9b07      	ldr	r3, [sp, #28]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 8104 	beq.w	80066f4 <_dtoa_r+0xb54>
 80064ec:	2e00      	cmp	r6, #0
 80064ee:	dd05      	ble.n	80064fc <_dtoa_r+0x95c>
 80064f0:	4629      	mov	r1, r5
 80064f2:	4632      	mov	r2, r6
 80064f4:	4658      	mov	r0, fp
 80064f6:	f000 fc25 	bl	8006d44 <__lshift>
 80064fa:	4605      	mov	r5, r0
 80064fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d05a      	beq.n	80065b8 <_dtoa_r+0xa18>
 8006502:	6869      	ldr	r1, [r5, #4]
 8006504:	4658      	mov	r0, fp
 8006506:	f000 fa0f 	bl	8006928 <_Balloc>
 800650a:	4606      	mov	r6, r0
 800650c:	b928      	cbnz	r0, 800651a <_dtoa_r+0x97a>
 800650e:	4b84      	ldr	r3, [pc, #528]	@ (8006720 <_dtoa_r+0xb80>)
 8006510:	4602      	mov	r2, r0
 8006512:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006516:	f7ff bb5a 	b.w	8005bce <_dtoa_r+0x2e>
 800651a:	692a      	ldr	r2, [r5, #16]
 800651c:	3202      	adds	r2, #2
 800651e:	0092      	lsls	r2, r2, #2
 8006520:	f105 010c 	add.w	r1, r5, #12
 8006524:	300c      	adds	r0, #12
 8006526:	f001 f813 	bl	8007550 <memcpy>
 800652a:	2201      	movs	r2, #1
 800652c:	4631      	mov	r1, r6
 800652e:	4658      	mov	r0, fp
 8006530:	f000 fc08 	bl	8006d44 <__lshift>
 8006534:	f10a 0301 	add.w	r3, sl, #1
 8006538:	9307      	str	r3, [sp, #28]
 800653a:	9b00      	ldr	r3, [sp, #0]
 800653c:	4453      	add	r3, sl
 800653e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006540:	9b02      	ldr	r3, [sp, #8]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	462f      	mov	r7, r5
 8006548:	930a      	str	r3, [sp, #40]	@ 0x28
 800654a:	4605      	mov	r5, r0
 800654c:	9b07      	ldr	r3, [sp, #28]
 800654e:	4621      	mov	r1, r4
 8006550:	3b01      	subs	r3, #1
 8006552:	4648      	mov	r0, r9
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	f7ff fa9a 	bl	8005a8e <quorem>
 800655a:	4639      	mov	r1, r7
 800655c:	9002      	str	r0, [sp, #8]
 800655e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006562:	4648      	mov	r0, r9
 8006564:	f000 fc5a 	bl	8006e1c <__mcmp>
 8006568:	462a      	mov	r2, r5
 800656a:	9008      	str	r0, [sp, #32]
 800656c:	4621      	mov	r1, r4
 800656e:	4658      	mov	r0, fp
 8006570:	f000 fc70 	bl	8006e54 <__mdiff>
 8006574:	68c2      	ldr	r2, [r0, #12]
 8006576:	4606      	mov	r6, r0
 8006578:	bb02      	cbnz	r2, 80065bc <_dtoa_r+0xa1c>
 800657a:	4601      	mov	r1, r0
 800657c:	4648      	mov	r0, r9
 800657e:	f000 fc4d 	bl	8006e1c <__mcmp>
 8006582:	4602      	mov	r2, r0
 8006584:	4631      	mov	r1, r6
 8006586:	4658      	mov	r0, fp
 8006588:	920e      	str	r2, [sp, #56]	@ 0x38
 800658a:	f000 fa0d 	bl	80069a8 <_Bfree>
 800658e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006590:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006592:	9e07      	ldr	r6, [sp, #28]
 8006594:	ea43 0102 	orr.w	r1, r3, r2
 8006598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800659a:	4319      	orrs	r1, r3
 800659c:	d110      	bne.n	80065c0 <_dtoa_r+0xa20>
 800659e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065a2:	d029      	beq.n	80065f8 <_dtoa_r+0xa58>
 80065a4:	9b08      	ldr	r3, [sp, #32]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	dd02      	ble.n	80065b0 <_dtoa_r+0xa10>
 80065aa:	9b02      	ldr	r3, [sp, #8]
 80065ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80065b0:	9b00      	ldr	r3, [sp, #0]
 80065b2:	f883 8000 	strb.w	r8, [r3]
 80065b6:	e63f      	b.n	8006238 <_dtoa_r+0x698>
 80065b8:	4628      	mov	r0, r5
 80065ba:	e7bb      	b.n	8006534 <_dtoa_r+0x994>
 80065bc:	2201      	movs	r2, #1
 80065be:	e7e1      	b.n	8006584 <_dtoa_r+0x9e4>
 80065c0:	9b08      	ldr	r3, [sp, #32]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	db04      	blt.n	80065d0 <_dtoa_r+0xa30>
 80065c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065c8:	430b      	orrs	r3, r1
 80065ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065cc:	430b      	orrs	r3, r1
 80065ce:	d120      	bne.n	8006612 <_dtoa_r+0xa72>
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	dded      	ble.n	80065b0 <_dtoa_r+0xa10>
 80065d4:	4649      	mov	r1, r9
 80065d6:	2201      	movs	r2, #1
 80065d8:	4658      	mov	r0, fp
 80065da:	f000 fbb3 	bl	8006d44 <__lshift>
 80065de:	4621      	mov	r1, r4
 80065e0:	4681      	mov	r9, r0
 80065e2:	f000 fc1b 	bl	8006e1c <__mcmp>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	dc03      	bgt.n	80065f2 <_dtoa_r+0xa52>
 80065ea:	d1e1      	bne.n	80065b0 <_dtoa_r+0xa10>
 80065ec:	f018 0f01 	tst.w	r8, #1
 80065f0:	d0de      	beq.n	80065b0 <_dtoa_r+0xa10>
 80065f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065f6:	d1d8      	bne.n	80065aa <_dtoa_r+0xa0a>
 80065f8:	9a00      	ldr	r2, [sp, #0]
 80065fa:	2339      	movs	r3, #57	@ 0x39
 80065fc:	7013      	strb	r3, [r2, #0]
 80065fe:	4633      	mov	r3, r6
 8006600:	461e      	mov	r6, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006608:	2a39      	cmp	r2, #57	@ 0x39
 800660a:	d052      	beq.n	80066b2 <_dtoa_r+0xb12>
 800660c:	3201      	adds	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	e612      	b.n	8006238 <_dtoa_r+0x698>
 8006612:	2a00      	cmp	r2, #0
 8006614:	dd07      	ble.n	8006626 <_dtoa_r+0xa86>
 8006616:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800661a:	d0ed      	beq.n	80065f8 <_dtoa_r+0xa58>
 800661c:	9a00      	ldr	r2, [sp, #0]
 800661e:	f108 0301 	add.w	r3, r8, #1
 8006622:	7013      	strb	r3, [r2, #0]
 8006624:	e608      	b.n	8006238 <_dtoa_r+0x698>
 8006626:	9b07      	ldr	r3, [sp, #28]
 8006628:	9a07      	ldr	r2, [sp, #28]
 800662a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800662e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006630:	4293      	cmp	r3, r2
 8006632:	d028      	beq.n	8006686 <_dtoa_r+0xae6>
 8006634:	4649      	mov	r1, r9
 8006636:	2300      	movs	r3, #0
 8006638:	220a      	movs	r2, #10
 800663a:	4658      	mov	r0, fp
 800663c:	f000 f9d6 	bl	80069ec <__multadd>
 8006640:	42af      	cmp	r7, r5
 8006642:	4681      	mov	r9, r0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	f04f 020a 	mov.w	r2, #10
 800664c:	4639      	mov	r1, r7
 800664e:	4658      	mov	r0, fp
 8006650:	d107      	bne.n	8006662 <_dtoa_r+0xac2>
 8006652:	f000 f9cb 	bl	80069ec <__multadd>
 8006656:	4607      	mov	r7, r0
 8006658:	4605      	mov	r5, r0
 800665a:	9b07      	ldr	r3, [sp, #28]
 800665c:	3301      	adds	r3, #1
 800665e:	9307      	str	r3, [sp, #28]
 8006660:	e774      	b.n	800654c <_dtoa_r+0x9ac>
 8006662:	f000 f9c3 	bl	80069ec <__multadd>
 8006666:	4629      	mov	r1, r5
 8006668:	4607      	mov	r7, r0
 800666a:	2300      	movs	r3, #0
 800666c:	220a      	movs	r2, #10
 800666e:	4658      	mov	r0, fp
 8006670:	f000 f9bc 	bl	80069ec <__multadd>
 8006674:	4605      	mov	r5, r0
 8006676:	e7f0      	b.n	800665a <_dtoa_r+0xaba>
 8006678:	9b00      	ldr	r3, [sp, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	bfcc      	ite	gt
 800667e:	461e      	movgt	r6, r3
 8006680:	2601      	movle	r6, #1
 8006682:	4456      	add	r6, sl
 8006684:	2700      	movs	r7, #0
 8006686:	4649      	mov	r1, r9
 8006688:	2201      	movs	r2, #1
 800668a:	4658      	mov	r0, fp
 800668c:	f000 fb5a 	bl	8006d44 <__lshift>
 8006690:	4621      	mov	r1, r4
 8006692:	4681      	mov	r9, r0
 8006694:	f000 fbc2 	bl	8006e1c <__mcmp>
 8006698:	2800      	cmp	r0, #0
 800669a:	dcb0      	bgt.n	80065fe <_dtoa_r+0xa5e>
 800669c:	d102      	bne.n	80066a4 <_dtoa_r+0xb04>
 800669e:	f018 0f01 	tst.w	r8, #1
 80066a2:	d1ac      	bne.n	80065fe <_dtoa_r+0xa5e>
 80066a4:	4633      	mov	r3, r6
 80066a6:	461e      	mov	r6, r3
 80066a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066ac:	2a30      	cmp	r2, #48	@ 0x30
 80066ae:	d0fa      	beq.n	80066a6 <_dtoa_r+0xb06>
 80066b0:	e5c2      	b.n	8006238 <_dtoa_r+0x698>
 80066b2:	459a      	cmp	sl, r3
 80066b4:	d1a4      	bne.n	8006600 <_dtoa_r+0xa60>
 80066b6:	9b04      	ldr	r3, [sp, #16]
 80066b8:	3301      	adds	r3, #1
 80066ba:	9304      	str	r3, [sp, #16]
 80066bc:	2331      	movs	r3, #49	@ 0x31
 80066be:	f88a 3000 	strb.w	r3, [sl]
 80066c2:	e5b9      	b.n	8006238 <_dtoa_r+0x698>
 80066c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006724 <_dtoa_r+0xb84>
 80066ca:	b11b      	cbz	r3, 80066d4 <_dtoa_r+0xb34>
 80066cc:	f10a 0308 	add.w	r3, sl, #8
 80066d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	4650      	mov	r0, sl
 80066d6:	b019      	add	sp, #100	@ 0x64
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066de:	2b01      	cmp	r3, #1
 80066e0:	f77f ae37 	ble.w	8006352 <_dtoa_r+0x7b2>
 80066e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066e8:	2001      	movs	r0, #1
 80066ea:	e655      	b.n	8006398 <_dtoa_r+0x7f8>
 80066ec:	9b00      	ldr	r3, [sp, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f77f aed6 	ble.w	80064a0 <_dtoa_r+0x900>
 80066f4:	4656      	mov	r6, sl
 80066f6:	4621      	mov	r1, r4
 80066f8:	4648      	mov	r0, r9
 80066fa:	f7ff f9c8 	bl	8005a8e <quorem>
 80066fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006702:	f806 8b01 	strb.w	r8, [r6], #1
 8006706:	9b00      	ldr	r3, [sp, #0]
 8006708:	eba6 020a 	sub.w	r2, r6, sl
 800670c:	4293      	cmp	r3, r2
 800670e:	ddb3      	ble.n	8006678 <_dtoa_r+0xad8>
 8006710:	4649      	mov	r1, r9
 8006712:	2300      	movs	r3, #0
 8006714:	220a      	movs	r2, #10
 8006716:	4658      	mov	r0, fp
 8006718:	f000 f968 	bl	80069ec <__multadd>
 800671c:	4681      	mov	r9, r0
 800671e:	e7ea      	b.n	80066f6 <_dtoa_r+0xb56>
 8006720:	08007908 	.word	0x08007908
 8006724:	0800788c 	.word	0x0800788c

08006728 <_free_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4605      	mov	r5, r0
 800672c:	2900      	cmp	r1, #0
 800672e:	d041      	beq.n	80067b4 <_free_r+0x8c>
 8006730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006734:	1f0c      	subs	r4, r1, #4
 8006736:	2b00      	cmp	r3, #0
 8006738:	bfb8      	it	lt
 800673a:	18e4      	addlt	r4, r4, r3
 800673c:	f000 f8e8 	bl	8006910 <__malloc_lock>
 8006740:	4a1d      	ldr	r2, [pc, #116]	@ (80067b8 <_free_r+0x90>)
 8006742:	6813      	ldr	r3, [r2, #0]
 8006744:	b933      	cbnz	r3, 8006754 <_free_r+0x2c>
 8006746:	6063      	str	r3, [r4, #4]
 8006748:	6014      	str	r4, [r2, #0]
 800674a:	4628      	mov	r0, r5
 800674c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006750:	f000 b8e4 	b.w	800691c <__malloc_unlock>
 8006754:	42a3      	cmp	r3, r4
 8006756:	d908      	bls.n	800676a <_free_r+0x42>
 8006758:	6820      	ldr	r0, [r4, #0]
 800675a:	1821      	adds	r1, r4, r0
 800675c:	428b      	cmp	r3, r1
 800675e:	bf01      	itttt	eq
 8006760:	6819      	ldreq	r1, [r3, #0]
 8006762:	685b      	ldreq	r3, [r3, #4]
 8006764:	1809      	addeq	r1, r1, r0
 8006766:	6021      	streq	r1, [r4, #0]
 8006768:	e7ed      	b.n	8006746 <_free_r+0x1e>
 800676a:	461a      	mov	r2, r3
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	b10b      	cbz	r3, 8006774 <_free_r+0x4c>
 8006770:	42a3      	cmp	r3, r4
 8006772:	d9fa      	bls.n	800676a <_free_r+0x42>
 8006774:	6811      	ldr	r1, [r2, #0]
 8006776:	1850      	adds	r0, r2, r1
 8006778:	42a0      	cmp	r0, r4
 800677a:	d10b      	bne.n	8006794 <_free_r+0x6c>
 800677c:	6820      	ldr	r0, [r4, #0]
 800677e:	4401      	add	r1, r0
 8006780:	1850      	adds	r0, r2, r1
 8006782:	4283      	cmp	r3, r0
 8006784:	6011      	str	r1, [r2, #0]
 8006786:	d1e0      	bne.n	800674a <_free_r+0x22>
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	6053      	str	r3, [r2, #4]
 800678e:	4408      	add	r0, r1
 8006790:	6010      	str	r0, [r2, #0]
 8006792:	e7da      	b.n	800674a <_free_r+0x22>
 8006794:	d902      	bls.n	800679c <_free_r+0x74>
 8006796:	230c      	movs	r3, #12
 8006798:	602b      	str	r3, [r5, #0]
 800679a:	e7d6      	b.n	800674a <_free_r+0x22>
 800679c:	6820      	ldr	r0, [r4, #0]
 800679e:	1821      	adds	r1, r4, r0
 80067a0:	428b      	cmp	r3, r1
 80067a2:	bf04      	itt	eq
 80067a4:	6819      	ldreq	r1, [r3, #0]
 80067a6:	685b      	ldreq	r3, [r3, #4]
 80067a8:	6063      	str	r3, [r4, #4]
 80067aa:	bf04      	itt	eq
 80067ac:	1809      	addeq	r1, r1, r0
 80067ae:	6021      	streq	r1, [r4, #0]
 80067b0:	6054      	str	r4, [r2, #4]
 80067b2:	e7ca      	b.n	800674a <_free_r+0x22>
 80067b4:	bd38      	pop	{r3, r4, r5, pc}
 80067b6:	bf00      	nop
 80067b8:	2000047c 	.word	0x2000047c

080067bc <malloc>:
 80067bc:	4b02      	ldr	r3, [pc, #8]	@ (80067c8 <malloc+0xc>)
 80067be:	4601      	mov	r1, r0
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	f000 b825 	b.w	8006810 <_malloc_r>
 80067c6:	bf00      	nop
 80067c8:	20000018 	.word	0x20000018

080067cc <sbrk_aligned>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	4e0f      	ldr	r6, [pc, #60]	@ (800680c <sbrk_aligned+0x40>)
 80067d0:	460c      	mov	r4, r1
 80067d2:	6831      	ldr	r1, [r6, #0]
 80067d4:	4605      	mov	r5, r0
 80067d6:	b911      	cbnz	r1, 80067de <sbrk_aligned+0x12>
 80067d8:	f000 feaa 	bl	8007530 <_sbrk_r>
 80067dc:	6030      	str	r0, [r6, #0]
 80067de:	4621      	mov	r1, r4
 80067e0:	4628      	mov	r0, r5
 80067e2:	f000 fea5 	bl	8007530 <_sbrk_r>
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	d103      	bne.n	80067f2 <sbrk_aligned+0x26>
 80067ea:	f04f 34ff 	mov.w	r4, #4294967295
 80067ee:	4620      	mov	r0, r4
 80067f0:	bd70      	pop	{r4, r5, r6, pc}
 80067f2:	1cc4      	adds	r4, r0, #3
 80067f4:	f024 0403 	bic.w	r4, r4, #3
 80067f8:	42a0      	cmp	r0, r4
 80067fa:	d0f8      	beq.n	80067ee <sbrk_aligned+0x22>
 80067fc:	1a21      	subs	r1, r4, r0
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 fe96 	bl	8007530 <_sbrk_r>
 8006804:	3001      	adds	r0, #1
 8006806:	d1f2      	bne.n	80067ee <sbrk_aligned+0x22>
 8006808:	e7ef      	b.n	80067ea <sbrk_aligned+0x1e>
 800680a:	bf00      	nop
 800680c:	20000478 	.word	0x20000478

08006810 <_malloc_r>:
 8006810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006814:	1ccd      	adds	r5, r1, #3
 8006816:	f025 0503 	bic.w	r5, r5, #3
 800681a:	3508      	adds	r5, #8
 800681c:	2d0c      	cmp	r5, #12
 800681e:	bf38      	it	cc
 8006820:	250c      	movcc	r5, #12
 8006822:	2d00      	cmp	r5, #0
 8006824:	4606      	mov	r6, r0
 8006826:	db01      	blt.n	800682c <_malloc_r+0x1c>
 8006828:	42a9      	cmp	r1, r5
 800682a:	d904      	bls.n	8006836 <_malloc_r+0x26>
 800682c:	230c      	movs	r3, #12
 800682e:	6033      	str	r3, [r6, #0]
 8006830:	2000      	movs	r0, #0
 8006832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006836:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800690c <_malloc_r+0xfc>
 800683a:	f000 f869 	bl	8006910 <__malloc_lock>
 800683e:	f8d8 3000 	ldr.w	r3, [r8]
 8006842:	461c      	mov	r4, r3
 8006844:	bb44      	cbnz	r4, 8006898 <_malloc_r+0x88>
 8006846:	4629      	mov	r1, r5
 8006848:	4630      	mov	r0, r6
 800684a:	f7ff ffbf 	bl	80067cc <sbrk_aligned>
 800684e:	1c43      	adds	r3, r0, #1
 8006850:	4604      	mov	r4, r0
 8006852:	d158      	bne.n	8006906 <_malloc_r+0xf6>
 8006854:	f8d8 4000 	ldr.w	r4, [r8]
 8006858:	4627      	mov	r7, r4
 800685a:	2f00      	cmp	r7, #0
 800685c:	d143      	bne.n	80068e6 <_malloc_r+0xd6>
 800685e:	2c00      	cmp	r4, #0
 8006860:	d04b      	beq.n	80068fa <_malloc_r+0xea>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	4639      	mov	r1, r7
 8006866:	4630      	mov	r0, r6
 8006868:	eb04 0903 	add.w	r9, r4, r3
 800686c:	f000 fe60 	bl	8007530 <_sbrk_r>
 8006870:	4581      	cmp	r9, r0
 8006872:	d142      	bne.n	80068fa <_malloc_r+0xea>
 8006874:	6821      	ldr	r1, [r4, #0]
 8006876:	1a6d      	subs	r5, r5, r1
 8006878:	4629      	mov	r1, r5
 800687a:	4630      	mov	r0, r6
 800687c:	f7ff ffa6 	bl	80067cc <sbrk_aligned>
 8006880:	3001      	adds	r0, #1
 8006882:	d03a      	beq.n	80068fa <_malloc_r+0xea>
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	442b      	add	r3, r5
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	f8d8 3000 	ldr.w	r3, [r8]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	bb62      	cbnz	r2, 80068ec <_malloc_r+0xdc>
 8006892:	f8c8 7000 	str.w	r7, [r8]
 8006896:	e00f      	b.n	80068b8 <_malloc_r+0xa8>
 8006898:	6822      	ldr	r2, [r4, #0]
 800689a:	1b52      	subs	r2, r2, r5
 800689c:	d420      	bmi.n	80068e0 <_malloc_r+0xd0>
 800689e:	2a0b      	cmp	r2, #11
 80068a0:	d917      	bls.n	80068d2 <_malloc_r+0xc2>
 80068a2:	1961      	adds	r1, r4, r5
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	6025      	str	r5, [r4, #0]
 80068a8:	bf18      	it	ne
 80068aa:	6059      	strne	r1, [r3, #4]
 80068ac:	6863      	ldr	r3, [r4, #4]
 80068ae:	bf08      	it	eq
 80068b0:	f8c8 1000 	streq.w	r1, [r8]
 80068b4:	5162      	str	r2, [r4, r5]
 80068b6:	604b      	str	r3, [r1, #4]
 80068b8:	4630      	mov	r0, r6
 80068ba:	f000 f82f 	bl	800691c <__malloc_unlock>
 80068be:	f104 000b 	add.w	r0, r4, #11
 80068c2:	1d23      	adds	r3, r4, #4
 80068c4:	f020 0007 	bic.w	r0, r0, #7
 80068c8:	1ac2      	subs	r2, r0, r3
 80068ca:	bf1c      	itt	ne
 80068cc:	1a1b      	subne	r3, r3, r0
 80068ce:	50a3      	strne	r3, [r4, r2]
 80068d0:	e7af      	b.n	8006832 <_malloc_r+0x22>
 80068d2:	6862      	ldr	r2, [r4, #4]
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	bf0c      	ite	eq
 80068d8:	f8c8 2000 	streq.w	r2, [r8]
 80068dc:	605a      	strne	r2, [r3, #4]
 80068de:	e7eb      	b.n	80068b8 <_malloc_r+0xa8>
 80068e0:	4623      	mov	r3, r4
 80068e2:	6864      	ldr	r4, [r4, #4]
 80068e4:	e7ae      	b.n	8006844 <_malloc_r+0x34>
 80068e6:	463c      	mov	r4, r7
 80068e8:	687f      	ldr	r7, [r7, #4]
 80068ea:	e7b6      	b.n	800685a <_malloc_r+0x4a>
 80068ec:	461a      	mov	r2, r3
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	d1fb      	bne.n	80068ec <_malloc_r+0xdc>
 80068f4:	2300      	movs	r3, #0
 80068f6:	6053      	str	r3, [r2, #4]
 80068f8:	e7de      	b.n	80068b8 <_malloc_r+0xa8>
 80068fa:	230c      	movs	r3, #12
 80068fc:	6033      	str	r3, [r6, #0]
 80068fe:	4630      	mov	r0, r6
 8006900:	f000 f80c 	bl	800691c <__malloc_unlock>
 8006904:	e794      	b.n	8006830 <_malloc_r+0x20>
 8006906:	6005      	str	r5, [r0, #0]
 8006908:	e7d6      	b.n	80068b8 <_malloc_r+0xa8>
 800690a:	bf00      	nop
 800690c:	2000047c 	.word	0x2000047c

08006910 <__malloc_lock>:
 8006910:	4801      	ldr	r0, [pc, #4]	@ (8006918 <__malloc_lock+0x8>)
 8006912:	f7ff b8ba 	b.w	8005a8a <__retarget_lock_acquire_recursive>
 8006916:	bf00      	nop
 8006918:	20000474 	.word	0x20000474

0800691c <__malloc_unlock>:
 800691c:	4801      	ldr	r0, [pc, #4]	@ (8006924 <__malloc_unlock+0x8>)
 800691e:	f7ff b8b5 	b.w	8005a8c <__retarget_lock_release_recursive>
 8006922:	bf00      	nop
 8006924:	20000474 	.word	0x20000474

08006928 <_Balloc>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	69c6      	ldr	r6, [r0, #28]
 800692c:	4604      	mov	r4, r0
 800692e:	460d      	mov	r5, r1
 8006930:	b976      	cbnz	r6, 8006950 <_Balloc+0x28>
 8006932:	2010      	movs	r0, #16
 8006934:	f7ff ff42 	bl	80067bc <malloc>
 8006938:	4602      	mov	r2, r0
 800693a:	61e0      	str	r0, [r4, #28]
 800693c:	b920      	cbnz	r0, 8006948 <_Balloc+0x20>
 800693e:	4b18      	ldr	r3, [pc, #96]	@ (80069a0 <_Balloc+0x78>)
 8006940:	4818      	ldr	r0, [pc, #96]	@ (80069a4 <_Balloc+0x7c>)
 8006942:	216b      	movs	r1, #107	@ 0x6b
 8006944:	f000 fe12 	bl	800756c <__assert_func>
 8006948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800694c:	6006      	str	r6, [r0, #0]
 800694e:	60c6      	str	r6, [r0, #12]
 8006950:	69e6      	ldr	r6, [r4, #28]
 8006952:	68f3      	ldr	r3, [r6, #12]
 8006954:	b183      	cbz	r3, 8006978 <_Balloc+0x50>
 8006956:	69e3      	ldr	r3, [r4, #28]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800695e:	b9b8      	cbnz	r0, 8006990 <_Balloc+0x68>
 8006960:	2101      	movs	r1, #1
 8006962:	fa01 f605 	lsl.w	r6, r1, r5
 8006966:	1d72      	adds	r2, r6, #5
 8006968:	0092      	lsls	r2, r2, #2
 800696a:	4620      	mov	r0, r4
 800696c:	f000 fe1c 	bl	80075a8 <_calloc_r>
 8006970:	b160      	cbz	r0, 800698c <_Balloc+0x64>
 8006972:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006976:	e00e      	b.n	8006996 <_Balloc+0x6e>
 8006978:	2221      	movs	r2, #33	@ 0x21
 800697a:	2104      	movs	r1, #4
 800697c:	4620      	mov	r0, r4
 800697e:	f000 fe13 	bl	80075a8 <_calloc_r>
 8006982:	69e3      	ldr	r3, [r4, #28]
 8006984:	60f0      	str	r0, [r6, #12]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e4      	bne.n	8006956 <_Balloc+0x2e>
 800698c:	2000      	movs	r0, #0
 800698e:	bd70      	pop	{r4, r5, r6, pc}
 8006990:	6802      	ldr	r2, [r0, #0]
 8006992:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006996:	2300      	movs	r3, #0
 8006998:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800699c:	e7f7      	b.n	800698e <_Balloc+0x66>
 800699e:	bf00      	nop
 80069a0:	08007899 	.word	0x08007899
 80069a4:	08007919 	.word	0x08007919

080069a8 <_Bfree>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	69c6      	ldr	r6, [r0, #28]
 80069ac:	4605      	mov	r5, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	b976      	cbnz	r6, 80069d0 <_Bfree+0x28>
 80069b2:	2010      	movs	r0, #16
 80069b4:	f7ff ff02 	bl	80067bc <malloc>
 80069b8:	4602      	mov	r2, r0
 80069ba:	61e8      	str	r0, [r5, #28]
 80069bc:	b920      	cbnz	r0, 80069c8 <_Bfree+0x20>
 80069be:	4b09      	ldr	r3, [pc, #36]	@ (80069e4 <_Bfree+0x3c>)
 80069c0:	4809      	ldr	r0, [pc, #36]	@ (80069e8 <_Bfree+0x40>)
 80069c2:	218f      	movs	r1, #143	@ 0x8f
 80069c4:	f000 fdd2 	bl	800756c <__assert_func>
 80069c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069cc:	6006      	str	r6, [r0, #0]
 80069ce:	60c6      	str	r6, [r0, #12]
 80069d0:	b13c      	cbz	r4, 80069e2 <_Bfree+0x3a>
 80069d2:	69eb      	ldr	r3, [r5, #28]
 80069d4:	6862      	ldr	r2, [r4, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069dc:	6021      	str	r1, [r4, #0]
 80069de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	08007899 	.word	0x08007899
 80069e8:	08007919 	.word	0x08007919

080069ec <__multadd>:
 80069ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069f0:	690d      	ldr	r5, [r1, #16]
 80069f2:	4607      	mov	r7, r0
 80069f4:	460c      	mov	r4, r1
 80069f6:	461e      	mov	r6, r3
 80069f8:	f101 0c14 	add.w	ip, r1, #20
 80069fc:	2000      	movs	r0, #0
 80069fe:	f8dc 3000 	ldr.w	r3, [ip]
 8006a02:	b299      	uxth	r1, r3
 8006a04:	fb02 6101 	mla	r1, r2, r1, r6
 8006a08:	0c1e      	lsrs	r6, r3, #16
 8006a0a:	0c0b      	lsrs	r3, r1, #16
 8006a0c:	fb02 3306 	mla	r3, r2, r6, r3
 8006a10:	b289      	uxth	r1, r1
 8006a12:	3001      	adds	r0, #1
 8006a14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a18:	4285      	cmp	r5, r0
 8006a1a:	f84c 1b04 	str.w	r1, [ip], #4
 8006a1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a22:	dcec      	bgt.n	80069fe <__multadd+0x12>
 8006a24:	b30e      	cbz	r6, 8006a6a <__multadd+0x7e>
 8006a26:	68a3      	ldr	r3, [r4, #8]
 8006a28:	42ab      	cmp	r3, r5
 8006a2a:	dc19      	bgt.n	8006a60 <__multadd+0x74>
 8006a2c:	6861      	ldr	r1, [r4, #4]
 8006a2e:	4638      	mov	r0, r7
 8006a30:	3101      	adds	r1, #1
 8006a32:	f7ff ff79 	bl	8006928 <_Balloc>
 8006a36:	4680      	mov	r8, r0
 8006a38:	b928      	cbnz	r0, 8006a46 <__multadd+0x5a>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a70 <__multadd+0x84>)
 8006a3e:	480d      	ldr	r0, [pc, #52]	@ (8006a74 <__multadd+0x88>)
 8006a40:	21ba      	movs	r1, #186	@ 0xba
 8006a42:	f000 fd93 	bl	800756c <__assert_func>
 8006a46:	6922      	ldr	r2, [r4, #16]
 8006a48:	3202      	adds	r2, #2
 8006a4a:	f104 010c 	add.w	r1, r4, #12
 8006a4e:	0092      	lsls	r2, r2, #2
 8006a50:	300c      	adds	r0, #12
 8006a52:	f000 fd7d 	bl	8007550 <memcpy>
 8006a56:	4621      	mov	r1, r4
 8006a58:	4638      	mov	r0, r7
 8006a5a:	f7ff ffa5 	bl	80069a8 <_Bfree>
 8006a5e:	4644      	mov	r4, r8
 8006a60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a64:	3501      	adds	r5, #1
 8006a66:	615e      	str	r6, [r3, #20]
 8006a68:	6125      	str	r5, [r4, #16]
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a70:	08007908 	.word	0x08007908
 8006a74:	08007919 	.word	0x08007919

08006a78 <__hi0bits>:
 8006a78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	bf36      	itet	cc
 8006a80:	0403      	lslcc	r3, r0, #16
 8006a82:	2000      	movcs	r0, #0
 8006a84:	2010      	movcc	r0, #16
 8006a86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a8a:	bf3c      	itt	cc
 8006a8c:	021b      	lslcc	r3, r3, #8
 8006a8e:	3008      	addcc	r0, #8
 8006a90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a94:	bf3c      	itt	cc
 8006a96:	011b      	lslcc	r3, r3, #4
 8006a98:	3004      	addcc	r0, #4
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9e:	bf3c      	itt	cc
 8006aa0:	009b      	lslcc	r3, r3, #2
 8006aa2:	3002      	addcc	r0, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	db05      	blt.n	8006ab4 <__hi0bits+0x3c>
 8006aa8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006aac:	f100 0001 	add.w	r0, r0, #1
 8006ab0:	bf08      	it	eq
 8006ab2:	2020      	moveq	r0, #32
 8006ab4:	4770      	bx	lr

08006ab6 <__lo0bits>:
 8006ab6:	6803      	ldr	r3, [r0, #0]
 8006ab8:	4602      	mov	r2, r0
 8006aba:	f013 0007 	ands.w	r0, r3, #7
 8006abe:	d00b      	beq.n	8006ad8 <__lo0bits+0x22>
 8006ac0:	07d9      	lsls	r1, r3, #31
 8006ac2:	d421      	bmi.n	8006b08 <__lo0bits+0x52>
 8006ac4:	0798      	lsls	r0, r3, #30
 8006ac6:	bf49      	itett	mi
 8006ac8:	085b      	lsrmi	r3, r3, #1
 8006aca:	089b      	lsrpl	r3, r3, #2
 8006acc:	2001      	movmi	r0, #1
 8006ace:	6013      	strmi	r3, [r2, #0]
 8006ad0:	bf5c      	itt	pl
 8006ad2:	6013      	strpl	r3, [r2, #0]
 8006ad4:	2002      	movpl	r0, #2
 8006ad6:	4770      	bx	lr
 8006ad8:	b299      	uxth	r1, r3
 8006ada:	b909      	cbnz	r1, 8006ae0 <__lo0bits+0x2a>
 8006adc:	0c1b      	lsrs	r3, r3, #16
 8006ade:	2010      	movs	r0, #16
 8006ae0:	b2d9      	uxtb	r1, r3
 8006ae2:	b909      	cbnz	r1, 8006ae8 <__lo0bits+0x32>
 8006ae4:	3008      	adds	r0, #8
 8006ae6:	0a1b      	lsrs	r3, r3, #8
 8006ae8:	0719      	lsls	r1, r3, #28
 8006aea:	bf04      	itt	eq
 8006aec:	091b      	lsreq	r3, r3, #4
 8006aee:	3004      	addeq	r0, #4
 8006af0:	0799      	lsls	r1, r3, #30
 8006af2:	bf04      	itt	eq
 8006af4:	089b      	lsreq	r3, r3, #2
 8006af6:	3002      	addeq	r0, #2
 8006af8:	07d9      	lsls	r1, r3, #31
 8006afa:	d403      	bmi.n	8006b04 <__lo0bits+0x4e>
 8006afc:	085b      	lsrs	r3, r3, #1
 8006afe:	f100 0001 	add.w	r0, r0, #1
 8006b02:	d003      	beq.n	8006b0c <__lo0bits+0x56>
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	4770      	bx	lr
 8006b08:	2000      	movs	r0, #0
 8006b0a:	4770      	bx	lr
 8006b0c:	2020      	movs	r0, #32
 8006b0e:	4770      	bx	lr

08006b10 <__i2b>:
 8006b10:	b510      	push	{r4, lr}
 8006b12:	460c      	mov	r4, r1
 8006b14:	2101      	movs	r1, #1
 8006b16:	f7ff ff07 	bl	8006928 <_Balloc>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	b928      	cbnz	r0, 8006b2a <__i2b+0x1a>
 8006b1e:	4b05      	ldr	r3, [pc, #20]	@ (8006b34 <__i2b+0x24>)
 8006b20:	4805      	ldr	r0, [pc, #20]	@ (8006b38 <__i2b+0x28>)
 8006b22:	f240 1145 	movw	r1, #325	@ 0x145
 8006b26:	f000 fd21 	bl	800756c <__assert_func>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	6144      	str	r4, [r0, #20]
 8006b2e:	6103      	str	r3, [r0, #16]
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	bf00      	nop
 8006b34:	08007908 	.word	0x08007908
 8006b38:	08007919 	.word	0x08007919

08006b3c <__multiply>:
 8006b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	4614      	mov	r4, r2
 8006b42:	690a      	ldr	r2, [r1, #16]
 8006b44:	6923      	ldr	r3, [r4, #16]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	bfa8      	it	ge
 8006b4a:	4623      	movge	r3, r4
 8006b4c:	460f      	mov	r7, r1
 8006b4e:	bfa4      	itt	ge
 8006b50:	460c      	movge	r4, r1
 8006b52:	461f      	movge	r7, r3
 8006b54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006b58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006b5c:	68a3      	ldr	r3, [r4, #8]
 8006b5e:	6861      	ldr	r1, [r4, #4]
 8006b60:	eb0a 0609 	add.w	r6, sl, r9
 8006b64:	42b3      	cmp	r3, r6
 8006b66:	b085      	sub	sp, #20
 8006b68:	bfb8      	it	lt
 8006b6a:	3101      	addlt	r1, #1
 8006b6c:	f7ff fedc 	bl	8006928 <_Balloc>
 8006b70:	b930      	cbnz	r0, 8006b80 <__multiply+0x44>
 8006b72:	4602      	mov	r2, r0
 8006b74:	4b44      	ldr	r3, [pc, #272]	@ (8006c88 <__multiply+0x14c>)
 8006b76:	4845      	ldr	r0, [pc, #276]	@ (8006c8c <__multiply+0x150>)
 8006b78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006b7c:	f000 fcf6 	bl	800756c <__assert_func>
 8006b80:	f100 0514 	add.w	r5, r0, #20
 8006b84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b88:	462b      	mov	r3, r5
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	4543      	cmp	r3, r8
 8006b8e:	d321      	bcc.n	8006bd4 <__multiply+0x98>
 8006b90:	f107 0114 	add.w	r1, r7, #20
 8006b94:	f104 0214 	add.w	r2, r4, #20
 8006b98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006b9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006ba0:	9302      	str	r3, [sp, #8]
 8006ba2:	1b13      	subs	r3, r2, r4
 8006ba4:	3b15      	subs	r3, #21
 8006ba6:	f023 0303 	bic.w	r3, r3, #3
 8006baa:	3304      	adds	r3, #4
 8006bac:	f104 0715 	add.w	r7, r4, #21
 8006bb0:	42ba      	cmp	r2, r7
 8006bb2:	bf38      	it	cc
 8006bb4:	2304      	movcc	r3, #4
 8006bb6:	9301      	str	r3, [sp, #4]
 8006bb8:	9b02      	ldr	r3, [sp, #8]
 8006bba:	9103      	str	r1, [sp, #12]
 8006bbc:	428b      	cmp	r3, r1
 8006bbe:	d80c      	bhi.n	8006bda <__multiply+0x9e>
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	dd03      	ble.n	8006bcc <__multiply+0x90>
 8006bc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d05b      	beq.n	8006c84 <__multiply+0x148>
 8006bcc:	6106      	str	r6, [r0, #16]
 8006bce:	b005      	add	sp, #20
 8006bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd4:	f843 2b04 	str.w	r2, [r3], #4
 8006bd8:	e7d8      	b.n	8006b8c <__multiply+0x50>
 8006bda:	f8b1 a000 	ldrh.w	sl, [r1]
 8006bde:	f1ba 0f00 	cmp.w	sl, #0
 8006be2:	d024      	beq.n	8006c2e <__multiply+0xf2>
 8006be4:	f104 0e14 	add.w	lr, r4, #20
 8006be8:	46a9      	mov	r9, r5
 8006bea:	f04f 0c00 	mov.w	ip, #0
 8006bee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006bf2:	f8d9 3000 	ldr.w	r3, [r9]
 8006bf6:	fa1f fb87 	uxth.w	fp, r7
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006c04:	f8d9 7000 	ldr.w	r7, [r9]
 8006c08:	4463      	add	r3, ip
 8006c0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c0e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006c12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c1c:	4572      	cmp	r2, lr
 8006c1e:	f849 3b04 	str.w	r3, [r9], #4
 8006c22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c26:	d8e2      	bhi.n	8006bee <__multiply+0xb2>
 8006c28:	9b01      	ldr	r3, [sp, #4]
 8006c2a:	f845 c003 	str.w	ip, [r5, r3]
 8006c2e:	9b03      	ldr	r3, [sp, #12]
 8006c30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006c34:	3104      	adds	r1, #4
 8006c36:	f1b9 0f00 	cmp.w	r9, #0
 8006c3a:	d021      	beq.n	8006c80 <__multiply+0x144>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	f104 0c14 	add.w	ip, r4, #20
 8006c42:	46ae      	mov	lr, r5
 8006c44:	f04f 0a00 	mov.w	sl, #0
 8006c48:	f8bc b000 	ldrh.w	fp, [ip]
 8006c4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006c50:	fb09 770b 	mla	r7, r9, fp, r7
 8006c54:	4457      	add	r7, sl
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c5c:	f84e 3b04 	str.w	r3, [lr], #4
 8006c60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c68:	f8be 3000 	ldrh.w	r3, [lr]
 8006c6c:	fb09 330a 	mla	r3, r9, sl, r3
 8006c70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006c74:	4562      	cmp	r2, ip
 8006c76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c7a:	d8e5      	bhi.n	8006c48 <__multiply+0x10c>
 8006c7c:	9f01      	ldr	r7, [sp, #4]
 8006c7e:	51eb      	str	r3, [r5, r7]
 8006c80:	3504      	adds	r5, #4
 8006c82:	e799      	b.n	8006bb8 <__multiply+0x7c>
 8006c84:	3e01      	subs	r6, #1
 8006c86:	e79b      	b.n	8006bc0 <__multiply+0x84>
 8006c88:	08007908 	.word	0x08007908
 8006c8c:	08007919 	.word	0x08007919

08006c90 <__pow5mult>:
 8006c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c94:	4615      	mov	r5, r2
 8006c96:	f012 0203 	ands.w	r2, r2, #3
 8006c9a:	4607      	mov	r7, r0
 8006c9c:	460e      	mov	r6, r1
 8006c9e:	d007      	beq.n	8006cb0 <__pow5mult+0x20>
 8006ca0:	4c25      	ldr	r4, [pc, #148]	@ (8006d38 <__pow5mult+0xa8>)
 8006ca2:	3a01      	subs	r2, #1
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006caa:	f7ff fe9f 	bl	80069ec <__multadd>
 8006cae:	4606      	mov	r6, r0
 8006cb0:	10ad      	asrs	r5, r5, #2
 8006cb2:	d03d      	beq.n	8006d30 <__pow5mult+0xa0>
 8006cb4:	69fc      	ldr	r4, [r7, #28]
 8006cb6:	b97c      	cbnz	r4, 8006cd8 <__pow5mult+0x48>
 8006cb8:	2010      	movs	r0, #16
 8006cba:	f7ff fd7f 	bl	80067bc <malloc>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	61f8      	str	r0, [r7, #28]
 8006cc2:	b928      	cbnz	r0, 8006cd0 <__pow5mult+0x40>
 8006cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d3c <__pow5mult+0xac>)
 8006cc6:	481e      	ldr	r0, [pc, #120]	@ (8006d40 <__pow5mult+0xb0>)
 8006cc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006ccc:	f000 fc4e 	bl	800756c <__assert_func>
 8006cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cd4:	6004      	str	r4, [r0, #0]
 8006cd6:	60c4      	str	r4, [r0, #12]
 8006cd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006cdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ce0:	b94c      	cbnz	r4, 8006cf6 <__pow5mult+0x66>
 8006ce2:	f240 2171 	movw	r1, #625	@ 0x271
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	f7ff ff12 	bl	8006b10 <__i2b>
 8006cec:	2300      	movs	r3, #0
 8006cee:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	6003      	str	r3, [r0, #0]
 8006cf6:	f04f 0900 	mov.w	r9, #0
 8006cfa:	07eb      	lsls	r3, r5, #31
 8006cfc:	d50a      	bpl.n	8006d14 <__pow5mult+0x84>
 8006cfe:	4631      	mov	r1, r6
 8006d00:	4622      	mov	r2, r4
 8006d02:	4638      	mov	r0, r7
 8006d04:	f7ff ff1a 	bl	8006b3c <__multiply>
 8006d08:	4631      	mov	r1, r6
 8006d0a:	4680      	mov	r8, r0
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f7ff fe4b 	bl	80069a8 <_Bfree>
 8006d12:	4646      	mov	r6, r8
 8006d14:	106d      	asrs	r5, r5, #1
 8006d16:	d00b      	beq.n	8006d30 <__pow5mult+0xa0>
 8006d18:	6820      	ldr	r0, [r4, #0]
 8006d1a:	b938      	cbnz	r0, 8006d2c <__pow5mult+0x9c>
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4638      	mov	r0, r7
 8006d22:	f7ff ff0b 	bl	8006b3c <__multiply>
 8006d26:	6020      	str	r0, [r4, #0]
 8006d28:	f8c0 9000 	str.w	r9, [r0]
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	e7e4      	b.n	8006cfa <__pow5mult+0x6a>
 8006d30:	4630      	mov	r0, r6
 8006d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d36:	bf00      	nop
 8006d38:	08007974 	.word	0x08007974
 8006d3c:	08007899 	.word	0x08007899
 8006d40:	08007919 	.word	0x08007919

08006d44 <__lshift>:
 8006d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d48:	460c      	mov	r4, r1
 8006d4a:	6849      	ldr	r1, [r1, #4]
 8006d4c:	6923      	ldr	r3, [r4, #16]
 8006d4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d52:	68a3      	ldr	r3, [r4, #8]
 8006d54:	4607      	mov	r7, r0
 8006d56:	4691      	mov	r9, r2
 8006d58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d5c:	f108 0601 	add.w	r6, r8, #1
 8006d60:	42b3      	cmp	r3, r6
 8006d62:	db0b      	blt.n	8006d7c <__lshift+0x38>
 8006d64:	4638      	mov	r0, r7
 8006d66:	f7ff fddf 	bl	8006928 <_Balloc>
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	b948      	cbnz	r0, 8006d82 <__lshift+0x3e>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	4b28      	ldr	r3, [pc, #160]	@ (8006e14 <__lshift+0xd0>)
 8006d72:	4829      	ldr	r0, [pc, #164]	@ (8006e18 <__lshift+0xd4>)
 8006d74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006d78:	f000 fbf8 	bl	800756c <__assert_func>
 8006d7c:	3101      	adds	r1, #1
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	e7ee      	b.n	8006d60 <__lshift+0x1c>
 8006d82:	2300      	movs	r3, #0
 8006d84:	f100 0114 	add.w	r1, r0, #20
 8006d88:	f100 0210 	add.w	r2, r0, #16
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	4553      	cmp	r3, sl
 8006d90:	db33      	blt.n	8006dfa <__lshift+0xb6>
 8006d92:	6920      	ldr	r0, [r4, #16]
 8006d94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d98:	f104 0314 	add.w	r3, r4, #20
 8006d9c:	f019 091f 	ands.w	r9, r9, #31
 8006da0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006da4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006da8:	d02b      	beq.n	8006e02 <__lshift+0xbe>
 8006daa:	f1c9 0e20 	rsb	lr, r9, #32
 8006dae:	468a      	mov	sl, r1
 8006db0:	2200      	movs	r2, #0
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	fa00 f009 	lsl.w	r0, r0, r9
 8006db8:	4310      	orrs	r0, r2
 8006dba:	f84a 0b04 	str.w	r0, [sl], #4
 8006dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dc2:	459c      	cmp	ip, r3
 8006dc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006dc8:	d8f3      	bhi.n	8006db2 <__lshift+0x6e>
 8006dca:	ebac 0304 	sub.w	r3, ip, r4
 8006dce:	3b15      	subs	r3, #21
 8006dd0:	f023 0303 	bic.w	r3, r3, #3
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	f104 0015 	add.w	r0, r4, #21
 8006dda:	4584      	cmp	ip, r0
 8006ddc:	bf38      	it	cc
 8006dde:	2304      	movcc	r3, #4
 8006de0:	50ca      	str	r2, [r1, r3]
 8006de2:	b10a      	cbz	r2, 8006de8 <__lshift+0xa4>
 8006de4:	f108 0602 	add.w	r6, r8, #2
 8006de8:	3e01      	subs	r6, #1
 8006dea:	4638      	mov	r0, r7
 8006dec:	612e      	str	r6, [r5, #16]
 8006dee:	4621      	mov	r1, r4
 8006df0:	f7ff fdda 	bl	80069a8 <_Bfree>
 8006df4:	4628      	mov	r0, r5
 8006df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dfe:	3301      	adds	r3, #1
 8006e00:	e7c5      	b.n	8006d8e <__lshift+0x4a>
 8006e02:	3904      	subs	r1, #4
 8006e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e08:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e0c:	459c      	cmp	ip, r3
 8006e0e:	d8f9      	bhi.n	8006e04 <__lshift+0xc0>
 8006e10:	e7ea      	b.n	8006de8 <__lshift+0xa4>
 8006e12:	bf00      	nop
 8006e14:	08007908 	.word	0x08007908
 8006e18:	08007919 	.word	0x08007919

08006e1c <__mcmp>:
 8006e1c:	690a      	ldr	r2, [r1, #16]
 8006e1e:	4603      	mov	r3, r0
 8006e20:	6900      	ldr	r0, [r0, #16]
 8006e22:	1a80      	subs	r0, r0, r2
 8006e24:	b530      	push	{r4, r5, lr}
 8006e26:	d10e      	bne.n	8006e46 <__mcmp+0x2a>
 8006e28:	3314      	adds	r3, #20
 8006e2a:	3114      	adds	r1, #20
 8006e2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e3c:	4295      	cmp	r5, r2
 8006e3e:	d003      	beq.n	8006e48 <__mcmp+0x2c>
 8006e40:	d205      	bcs.n	8006e4e <__mcmp+0x32>
 8006e42:	f04f 30ff 	mov.w	r0, #4294967295
 8006e46:	bd30      	pop	{r4, r5, pc}
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d3f3      	bcc.n	8006e34 <__mcmp+0x18>
 8006e4c:	e7fb      	b.n	8006e46 <__mcmp+0x2a>
 8006e4e:	2001      	movs	r0, #1
 8006e50:	e7f9      	b.n	8006e46 <__mcmp+0x2a>
	...

08006e54 <__mdiff>:
 8006e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e58:	4689      	mov	r9, r1
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	4648      	mov	r0, r9
 8006e60:	4614      	mov	r4, r2
 8006e62:	f7ff ffdb 	bl	8006e1c <__mcmp>
 8006e66:	1e05      	subs	r5, r0, #0
 8006e68:	d112      	bne.n	8006e90 <__mdiff+0x3c>
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	f7ff fd5b 	bl	8006928 <_Balloc>
 8006e72:	4602      	mov	r2, r0
 8006e74:	b928      	cbnz	r0, 8006e82 <__mdiff+0x2e>
 8006e76:	4b3f      	ldr	r3, [pc, #252]	@ (8006f74 <__mdiff+0x120>)
 8006e78:	f240 2137 	movw	r1, #567	@ 0x237
 8006e7c:	483e      	ldr	r0, [pc, #248]	@ (8006f78 <__mdiff+0x124>)
 8006e7e:	f000 fb75 	bl	800756c <__assert_func>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e88:	4610      	mov	r0, r2
 8006e8a:	b003      	add	sp, #12
 8006e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e90:	bfbc      	itt	lt
 8006e92:	464b      	movlt	r3, r9
 8006e94:	46a1      	movlt	r9, r4
 8006e96:	4630      	mov	r0, r6
 8006e98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006e9c:	bfba      	itte	lt
 8006e9e:	461c      	movlt	r4, r3
 8006ea0:	2501      	movlt	r5, #1
 8006ea2:	2500      	movge	r5, #0
 8006ea4:	f7ff fd40 	bl	8006928 <_Balloc>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	b918      	cbnz	r0, 8006eb4 <__mdiff+0x60>
 8006eac:	4b31      	ldr	r3, [pc, #196]	@ (8006f74 <__mdiff+0x120>)
 8006eae:	f240 2145 	movw	r1, #581	@ 0x245
 8006eb2:	e7e3      	b.n	8006e7c <__mdiff+0x28>
 8006eb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006eb8:	6926      	ldr	r6, [r4, #16]
 8006eba:	60c5      	str	r5, [r0, #12]
 8006ebc:	f109 0310 	add.w	r3, r9, #16
 8006ec0:	f109 0514 	add.w	r5, r9, #20
 8006ec4:	f104 0e14 	add.w	lr, r4, #20
 8006ec8:	f100 0b14 	add.w	fp, r0, #20
 8006ecc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ed0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	46d9      	mov	r9, fp
 8006ed8:	f04f 0c00 	mov.w	ip, #0
 8006edc:	9b01      	ldr	r3, [sp, #4]
 8006ede:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006ee2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006ee6:	9301      	str	r3, [sp, #4]
 8006ee8:	fa1f f38a 	uxth.w	r3, sl
 8006eec:	4619      	mov	r1, r3
 8006eee:	b283      	uxth	r3, r0
 8006ef0:	1acb      	subs	r3, r1, r3
 8006ef2:	0c00      	lsrs	r0, r0, #16
 8006ef4:	4463      	add	r3, ip
 8006ef6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006efa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f04:	4576      	cmp	r6, lr
 8006f06:	f849 3b04 	str.w	r3, [r9], #4
 8006f0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f0e:	d8e5      	bhi.n	8006edc <__mdiff+0x88>
 8006f10:	1b33      	subs	r3, r6, r4
 8006f12:	3b15      	subs	r3, #21
 8006f14:	f023 0303 	bic.w	r3, r3, #3
 8006f18:	3415      	adds	r4, #21
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	42a6      	cmp	r6, r4
 8006f1e:	bf38      	it	cc
 8006f20:	2304      	movcc	r3, #4
 8006f22:	441d      	add	r5, r3
 8006f24:	445b      	add	r3, fp
 8006f26:	461e      	mov	r6, r3
 8006f28:	462c      	mov	r4, r5
 8006f2a:	4544      	cmp	r4, r8
 8006f2c:	d30e      	bcc.n	8006f4c <__mdiff+0xf8>
 8006f2e:	f108 0103 	add.w	r1, r8, #3
 8006f32:	1b49      	subs	r1, r1, r5
 8006f34:	f021 0103 	bic.w	r1, r1, #3
 8006f38:	3d03      	subs	r5, #3
 8006f3a:	45a8      	cmp	r8, r5
 8006f3c:	bf38      	it	cc
 8006f3e:	2100      	movcc	r1, #0
 8006f40:	440b      	add	r3, r1
 8006f42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f46:	b191      	cbz	r1, 8006f6e <__mdiff+0x11a>
 8006f48:	6117      	str	r7, [r2, #16]
 8006f4a:	e79d      	b.n	8006e88 <__mdiff+0x34>
 8006f4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006f50:	46e6      	mov	lr, ip
 8006f52:	0c08      	lsrs	r0, r1, #16
 8006f54:	fa1c fc81 	uxtah	ip, ip, r1
 8006f58:	4471      	add	r1, lr
 8006f5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006f5e:	b289      	uxth	r1, r1
 8006f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f64:	f846 1b04 	str.w	r1, [r6], #4
 8006f68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f6c:	e7dd      	b.n	8006f2a <__mdiff+0xd6>
 8006f6e:	3f01      	subs	r7, #1
 8006f70:	e7e7      	b.n	8006f42 <__mdiff+0xee>
 8006f72:	bf00      	nop
 8006f74:	08007908 	.word	0x08007908
 8006f78:	08007919 	.word	0x08007919

08006f7c <__d2b>:
 8006f7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f80:	460f      	mov	r7, r1
 8006f82:	2101      	movs	r1, #1
 8006f84:	ec59 8b10 	vmov	r8, r9, d0
 8006f88:	4616      	mov	r6, r2
 8006f8a:	f7ff fccd 	bl	8006928 <_Balloc>
 8006f8e:	4604      	mov	r4, r0
 8006f90:	b930      	cbnz	r0, 8006fa0 <__d2b+0x24>
 8006f92:	4602      	mov	r2, r0
 8006f94:	4b23      	ldr	r3, [pc, #140]	@ (8007024 <__d2b+0xa8>)
 8006f96:	4824      	ldr	r0, [pc, #144]	@ (8007028 <__d2b+0xac>)
 8006f98:	f240 310f 	movw	r1, #783	@ 0x30f
 8006f9c:	f000 fae6 	bl	800756c <__assert_func>
 8006fa0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fa8:	b10d      	cbz	r5, 8006fae <__d2b+0x32>
 8006faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	f1b8 0300 	subs.w	r3, r8, #0
 8006fb4:	d023      	beq.n	8006ffe <__d2b+0x82>
 8006fb6:	4668      	mov	r0, sp
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	f7ff fd7c 	bl	8006ab6 <__lo0bits>
 8006fbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fc2:	b1d0      	cbz	r0, 8006ffa <__d2b+0x7e>
 8006fc4:	f1c0 0320 	rsb	r3, r0, #32
 8006fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	40c2      	lsrs	r2, r0
 8006fd0:	6163      	str	r3, [r4, #20]
 8006fd2:	9201      	str	r2, [sp, #4]
 8006fd4:	9b01      	ldr	r3, [sp, #4]
 8006fd6:	61a3      	str	r3, [r4, #24]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bf0c      	ite	eq
 8006fdc:	2201      	moveq	r2, #1
 8006fde:	2202      	movne	r2, #2
 8006fe0:	6122      	str	r2, [r4, #16]
 8006fe2:	b1a5      	cbz	r5, 800700e <__d2b+0x92>
 8006fe4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006fe8:	4405      	add	r5, r0
 8006fea:	603d      	str	r5, [r7, #0]
 8006fec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ff0:	6030      	str	r0, [r6, #0]
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	b003      	add	sp, #12
 8006ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ffa:	6161      	str	r1, [r4, #20]
 8006ffc:	e7ea      	b.n	8006fd4 <__d2b+0x58>
 8006ffe:	a801      	add	r0, sp, #4
 8007000:	f7ff fd59 	bl	8006ab6 <__lo0bits>
 8007004:	9b01      	ldr	r3, [sp, #4]
 8007006:	6163      	str	r3, [r4, #20]
 8007008:	3020      	adds	r0, #32
 800700a:	2201      	movs	r2, #1
 800700c:	e7e8      	b.n	8006fe0 <__d2b+0x64>
 800700e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007012:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007016:	6038      	str	r0, [r7, #0]
 8007018:	6918      	ldr	r0, [r3, #16]
 800701a:	f7ff fd2d 	bl	8006a78 <__hi0bits>
 800701e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007022:	e7e5      	b.n	8006ff0 <__d2b+0x74>
 8007024:	08007908 	.word	0x08007908
 8007028:	08007919 	.word	0x08007919

0800702c <__sfputc_r>:
 800702c:	6893      	ldr	r3, [r2, #8]
 800702e:	3b01      	subs	r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	b410      	push	{r4}
 8007034:	6093      	str	r3, [r2, #8]
 8007036:	da08      	bge.n	800704a <__sfputc_r+0x1e>
 8007038:	6994      	ldr	r4, [r2, #24]
 800703a:	42a3      	cmp	r3, r4
 800703c:	db01      	blt.n	8007042 <__sfputc_r+0x16>
 800703e:	290a      	cmp	r1, #10
 8007040:	d103      	bne.n	800704a <__sfputc_r+0x1e>
 8007042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007046:	f000 b9df 	b.w	8007408 <__swbuf_r>
 800704a:	6813      	ldr	r3, [r2, #0]
 800704c:	1c58      	adds	r0, r3, #1
 800704e:	6010      	str	r0, [r2, #0]
 8007050:	7019      	strb	r1, [r3, #0]
 8007052:	4608      	mov	r0, r1
 8007054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007058:	4770      	bx	lr

0800705a <__sfputs_r>:
 800705a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705c:	4606      	mov	r6, r0
 800705e:	460f      	mov	r7, r1
 8007060:	4614      	mov	r4, r2
 8007062:	18d5      	adds	r5, r2, r3
 8007064:	42ac      	cmp	r4, r5
 8007066:	d101      	bne.n	800706c <__sfputs_r+0x12>
 8007068:	2000      	movs	r0, #0
 800706a:	e007      	b.n	800707c <__sfputs_r+0x22>
 800706c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007070:	463a      	mov	r2, r7
 8007072:	4630      	mov	r0, r6
 8007074:	f7ff ffda 	bl	800702c <__sfputc_r>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d1f3      	bne.n	8007064 <__sfputs_r+0xa>
 800707c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007080 <_vfiprintf_r>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	460d      	mov	r5, r1
 8007086:	b09d      	sub	sp, #116	@ 0x74
 8007088:	4614      	mov	r4, r2
 800708a:	4698      	mov	r8, r3
 800708c:	4606      	mov	r6, r0
 800708e:	b118      	cbz	r0, 8007098 <_vfiprintf_r+0x18>
 8007090:	6a03      	ldr	r3, [r0, #32]
 8007092:	b90b      	cbnz	r3, 8007098 <_vfiprintf_r+0x18>
 8007094:	f7fe fbf0 	bl	8005878 <__sinit>
 8007098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800709a:	07d9      	lsls	r1, r3, #31
 800709c:	d405      	bmi.n	80070aa <_vfiprintf_r+0x2a>
 800709e:	89ab      	ldrh	r3, [r5, #12]
 80070a0:	059a      	lsls	r2, r3, #22
 80070a2:	d402      	bmi.n	80070aa <_vfiprintf_r+0x2a>
 80070a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070a6:	f7fe fcf0 	bl	8005a8a <__retarget_lock_acquire_recursive>
 80070aa:	89ab      	ldrh	r3, [r5, #12]
 80070ac:	071b      	lsls	r3, r3, #28
 80070ae:	d501      	bpl.n	80070b4 <_vfiprintf_r+0x34>
 80070b0:	692b      	ldr	r3, [r5, #16]
 80070b2:	b99b      	cbnz	r3, 80070dc <_vfiprintf_r+0x5c>
 80070b4:	4629      	mov	r1, r5
 80070b6:	4630      	mov	r0, r6
 80070b8:	f000 f9e4 	bl	8007484 <__swsetup_r>
 80070bc:	b170      	cbz	r0, 80070dc <_vfiprintf_r+0x5c>
 80070be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070c0:	07dc      	lsls	r4, r3, #31
 80070c2:	d504      	bpl.n	80070ce <_vfiprintf_r+0x4e>
 80070c4:	f04f 30ff 	mov.w	r0, #4294967295
 80070c8:	b01d      	add	sp, #116	@ 0x74
 80070ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ce:	89ab      	ldrh	r3, [r5, #12]
 80070d0:	0598      	lsls	r0, r3, #22
 80070d2:	d4f7      	bmi.n	80070c4 <_vfiprintf_r+0x44>
 80070d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070d6:	f7fe fcd9 	bl	8005a8c <__retarget_lock_release_recursive>
 80070da:	e7f3      	b.n	80070c4 <_vfiprintf_r+0x44>
 80070dc:	2300      	movs	r3, #0
 80070de:	9309      	str	r3, [sp, #36]	@ 0x24
 80070e0:	2320      	movs	r3, #32
 80070e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ea:	2330      	movs	r3, #48	@ 0x30
 80070ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800729c <_vfiprintf_r+0x21c>
 80070f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070f4:	f04f 0901 	mov.w	r9, #1
 80070f8:	4623      	mov	r3, r4
 80070fa:	469a      	mov	sl, r3
 80070fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007100:	b10a      	cbz	r2, 8007106 <_vfiprintf_r+0x86>
 8007102:	2a25      	cmp	r2, #37	@ 0x25
 8007104:	d1f9      	bne.n	80070fa <_vfiprintf_r+0x7a>
 8007106:	ebba 0b04 	subs.w	fp, sl, r4
 800710a:	d00b      	beq.n	8007124 <_vfiprintf_r+0xa4>
 800710c:	465b      	mov	r3, fp
 800710e:	4622      	mov	r2, r4
 8007110:	4629      	mov	r1, r5
 8007112:	4630      	mov	r0, r6
 8007114:	f7ff ffa1 	bl	800705a <__sfputs_r>
 8007118:	3001      	adds	r0, #1
 800711a:	f000 80a7 	beq.w	800726c <_vfiprintf_r+0x1ec>
 800711e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007120:	445a      	add	r2, fp
 8007122:	9209      	str	r2, [sp, #36]	@ 0x24
 8007124:	f89a 3000 	ldrb.w	r3, [sl]
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 809f 	beq.w	800726c <_vfiprintf_r+0x1ec>
 800712e:	2300      	movs	r3, #0
 8007130:	f04f 32ff 	mov.w	r2, #4294967295
 8007134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007138:	f10a 0a01 	add.w	sl, sl, #1
 800713c:	9304      	str	r3, [sp, #16]
 800713e:	9307      	str	r3, [sp, #28]
 8007140:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007144:	931a      	str	r3, [sp, #104]	@ 0x68
 8007146:	4654      	mov	r4, sl
 8007148:	2205      	movs	r2, #5
 800714a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800714e:	4853      	ldr	r0, [pc, #332]	@ (800729c <_vfiprintf_r+0x21c>)
 8007150:	f7f9 f83e 	bl	80001d0 <memchr>
 8007154:	9a04      	ldr	r2, [sp, #16]
 8007156:	b9d8      	cbnz	r0, 8007190 <_vfiprintf_r+0x110>
 8007158:	06d1      	lsls	r1, r2, #27
 800715a:	bf44      	itt	mi
 800715c:	2320      	movmi	r3, #32
 800715e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007162:	0713      	lsls	r3, r2, #28
 8007164:	bf44      	itt	mi
 8007166:	232b      	movmi	r3, #43	@ 0x2b
 8007168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800716c:	f89a 3000 	ldrb.w	r3, [sl]
 8007170:	2b2a      	cmp	r3, #42	@ 0x2a
 8007172:	d015      	beq.n	80071a0 <_vfiprintf_r+0x120>
 8007174:	9a07      	ldr	r2, [sp, #28]
 8007176:	4654      	mov	r4, sl
 8007178:	2000      	movs	r0, #0
 800717a:	f04f 0c0a 	mov.w	ip, #10
 800717e:	4621      	mov	r1, r4
 8007180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007184:	3b30      	subs	r3, #48	@ 0x30
 8007186:	2b09      	cmp	r3, #9
 8007188:	d94b      	bls.n	8007222 <_vfiprintf_r+0x1a2>
 800718a:	b1b0      	cbz	r0, 80071ba <_vfiprintf_r+0x13a>
 800718c:	9207      	str	r2, [sp, #28]
 800718e:	e014      	b.n	80071ba <_vfiprintf_r+0x13a>
 8007190:	eba0 0308 	sub.w	r3, r0, r8
 8007194:	fa09 f303 	lsl.w	r3, r9, r3
 8007198:	4313      	orrs	r3, r2
 800719a:	9304      	str	r3, [sp, #16]
 800719c:	46a2      	mov	sl, r4
 800719e:	e7d2      	b.n	8007146 <_vfiprintf_r+0xc6>
 80071a0:	9b03      	ldr	r3, [sp, #12]
 80071a2:	1d19      	adds	r1, r3, #4
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	9103      	str	r1, [sp, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	bfbb      	ittet	lt
 80071ac:	425b      	neglt	r3, r3
 80071ae:	f042 0202 	orrlt.w	r2, r2, #2
 80071b2:	9307      	strge	r3, [sp, #28]
 80071b4:	9307      	strlt	r3, [sp, #28]
 80071b6:	bfb8      	it	lt
 80071b8:	9204      	strlt	r2, [sp, #16]
 80071ba:	7823      	ldrb	r3, [r4, #0]
 80071bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80071be:	d10a      	bne.n	80071d6 <_vfiprintf_r+0x156>
 80071c0:	7863      	ldrb	r3, [r4, #1]
 80071c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80071c4:	d132      	bne.n	800722c <_vfiprintf_r+0x1ac>
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	1d1a      	adds	r2, r3, #4
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	9203      	str	r2, [sp, #12]
 80071ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071d2:	3402      	adds	r4, #2
 80071d4:	9305      	str	r3, [sp, #20]
 80071d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80072ac <_vfiprintf_r+0x22c>
 80071da:	7821      	ldrb	r1, [r4, #0]
 80071dc:	2203      	movs	r2, #3
 80071de:	4650      	mov	r0, sl
 80071e0:	f7f8 fff6 	bl	80001d0 <memchr>
 80071e4:	b138      	cbz	r0, 80071f6 <_vfiprintf_r+0x176>
 80071e6:	9b04      	ldr	r3, [sp, #16]
 80071e8:	eba0 000a 	sub.w	r0, r0, sl
 80071ec:	2240      	movs	r2, #64	@ 0x40
 80071ee:	4082      	lsls	r2, r0
 80071f0:	4313      	orrs	r3, r2
 80071f2:	3401      	adds	r4, #1
 80071f4:	9304      	str	r3, [sp, #16]
 80071f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071fa:	4829      	ldr	r0, [pc, #164]	@ (80072a0 <_vfiprintf_r+0x220>)
 80071fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007200:	2206      	movs	r2, #6
 8007202:	f7f8 ffe5 	bl	80001d0 <memchr>
 8007206:	2800      	cmp	r0, #0
 8007208:	d03f      	beq.n	800728a <_vfiprintf_r+0x20a>
 800720a:	4b26      	ldr	r3, [pc, #152]	@ (80072a4 <_vfiprintf_r+0x224>)
 800720c:	bb1b      	cbnz	r3, 8007256 <_vfiprintf_r+0x1d6>
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	3307      	adds	r3, #7
 8007212:	f023 0307 	bic.w	r3, r3, #7
 8007216:	3308      	adds	r3, #8
 8007218:	9303      	str	r3, [sp, #12]
 800721a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800721c:	443b      	add	r3, r7
 800721e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007220:	e76a      	b.n	80070f8 <_vfiprintf_r+0x78>
 8007222:	fb0c 3202 	mla	r2, ip, r2, r3
 8007226:	460c      	mov	r4, r1
 8007228:	2001      	movs	r0, #1
 800722a:	e7a8      	b.n	800717e <_vfiprintf_r+0xfe>
 800722c:	2300      	movs	r3, #0
 800722e:	3401      	adds	r4, #1
 8007230:	9305      	str	r3, [sp, #20]
 8007232:	4619      	mov	r1, r3
 8007234:	f04f 0c0a 	mov.w	ip, #10
 8007238:	4620      	mov	r0, r4
 800723a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800723e:	3a30      	subs	r2, #48	@ 0x30
 8007240:	2a09      	cmp	r2, #9
 8007242:	d903      	bls.n	800724c <_vfiprintf_r+0x1cc>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0c6      	beq.n	80071d6 <_vfiprintf_r+0x156>
 8007248:	9105      	str	r1, [sp, #20]
 800724a:	e7c4      	b.n	80071d6 <_vfiprintf_r+0x156>
 800724c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007250:	4604      	mov	r4, r0
 8007252:	2301      	movs	r3, #1
 8007254:	e7f0      	b.n	8007238 <_vfiprintf_r+0x1b8>
 8007256:	ab03      	add	r3, sp, #12
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	462a      	mov	r2, r5
 800725c:	4b12      	ldr	r3, [pc, #72]	@ (80072a8 <_vfiprintf_r+0x228>)
 800725e:	a904      	add	r1, sp, #16
 8007260:	4630      	mov	r0, r6
 8007262:	f7fd fec5 	bl	8004ff0 <_printf_float>
 8007266:	4607      	mov	r7, r0
 8007268:	1c78      	adds	r0, r7, #1
 800726a:	d1d6      	bne.n	800721a <_vfiprintf_r+0x19a>
 800726c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800726e:	07d9      	lsls	r1, r3, #31
 8007270:	d405      	bmi.n	800727e <_vfiprintf_r+0x1fe>
 8007272:	89ab      	ldrh	r3, [r5, #12]
 8007274:	059a      	lsls	r2, r3, #22
 8007276:	d402      	bmi.n	800727e <_vfiprintf_r+0x1fe>
 8007278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800727a:	f7fe fc07 	bl	8005a8c <__retarget_lock_release_recursive>
 800727e:	89ab      	ldrh	r3, [r5, #12]
 8007280:	065b      	lsls	r3, r3, #25
 8007282:	f53f af1f 	bmi.w	80070c4 <_vfiprintf_r+0x44>
 8007286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007288:	e71e      	b.n	80070c8 <_vfiprintf_r+0x48>
 800728a:	ab03      	add	r3, sp, #12
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	462a      	mov	r2, r5
 8007290:	4b05      	ldr	r3, [pc, #20]	@ (80072a8 <_vfiprintf_r+0x228>)
 8007292:	a904      	add	r1, sp, #16
 8007294:	4630      	mov	r0, r6
 8007296:	f7fe f943 	bl	8005520 <_printf_i>
 800729a:	e7e4      	b.n	8007266 <_vfiprintf_r+0x1e6>
 800729c:	08007a70 	.word	0x08007a70
 80072a0:	08007a7a 	.word	0x08007a7a
 80072a4:	08004ff1 	.word	0x08004ff1
 80072a8:	0800705b 	.word	0x0800705b
 80072ac:	08007a76 	.word	0x08007a76

080072b0 <__sflush_r>:
 80072b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b8:	0716      	lsls	r6, r2, #28
 80072ba:	4605      	mov	r5, r0
 80072bc:	460c      	mov	r4, r1
 80072be:	d454      	bmi.n	800736a <__sflush_r+0xba>
 80072c0:	684b      	ldr	r3, [r1, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	dc02      	bgt.n	80072cc <__sflush_r+0x1c>
 80072c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	dd48      	ble.n	800735e <__sflush_r+0xae>
 80072cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072ce:	2e00      	cmp	r6, #0
 80072d0:	d045      	beq.n	800735e <__sflush_r+0xae>
 80072d2:	2300      	movs	r3, #0
 80072d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072d8:	682f      	ldr	r7, [r5, #0]
 80072da:	6a21      	ldr	r1, [r4, #32]
 80072dc:	602b      	str	r3, [r5, #0]
 80072de:	d030      	beq.n	8007342 <__sflush_r+0x92>
 80072e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072e2:	89a3      	ldrh	r3, [r4, #12]
 80072e4:	0759      	lsls	r1, r3, #29
 80072e6:	d505      	bpl.n	80072f4 <__sflush_r+0x44>
 80072e8:	6863      	ldr	r3, [r4, #4]
 80072ea:	1ad2      	subs	r2, r2, r3
 80072ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072ee:	b10b      	cbz	r3, 80072f4 <__sflush_r+0x44>
 80072f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80072f2:	1ad2      	subs	r2, r2, r3
 80072f4:	2300      	movs	r3, #0
 80072f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072f8:	6a21      	ldr	r1, [r4, #32]
 80072fa:	4628      	mov	r0, r5
 80072fc:	47b0      	blx	r6
 80072fe:	1c43      	adds	r3, r0, #1
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	d106      	bne.n	8007312 <__sflush_r+0x62>
 8007304:	6829      	ldr	r1, [r5, #0]
 8007306:	291d      	cmp	r1, #29
 8007308:	d82b      	bhi.n	8007362 <__sflush_r+0xb2>
 800730a:	4a2a      	ldr	r2, [pc, #168]	@ (80073b4 <__sflush_r+0x104>)
 800730c:	410a      	asrs	r2, r1
 800730e:	07d6      	lsls	r6, r2, #31
 8007310:	d427      	bmi.n	8007362 <__sflush_r+0xb2>
 8007312:	2200      	movs	r2, #0
 8007314:	6062      	str	r2, [r4, #4]
 8007316:	04d9      	lsls	r1, r3, #19
 8007318:	6922      	ldr	r2, [r4, #16]
 800731a:	6022      	str	r2, [r4, #0]
 800731c:	d504      	bpl.n	8007328 <__sflush_r+0x78>
 800731e:	1c42      	adds	r2, r0, #1
 8007320:	d101      	bne.n	8007326 <__sflush_r+0x76>
 8007322:	682b      	ldr	r3, [r5, #0]
 8007324:	b903      	cbnz	r3, 8007328 <__sflush_r+0x78>
 8007326:	6560      	str	r0, [r4, #84]	@ 0x54
 8007328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800732a:	602f      	str	r7, [r5, #0]
 800732c:	b1b9      	cbz	r1, 800735e <__sflush_r+0xae>
 800732e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007332:	4299      	cmp	r1, r3
 8007334:	d002      	beq.n	800733c <__sflush_r+0x8c>
 8007336:	4628      	mov	r0, r5
 8007338:	f7ff f9f6 	bl	8006728 <_free_r>
 800733c:	2300      	movs	r3, #0
 800733e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007340:	e00d      	b.n	800735e <__sflush_r+0xae>
 8007342:	2301      	movs	r3, #1
 8007344:	4628      	mov	r0, r5
 8007346:	47b0      	blx	r6
 8007348:	4602      	mov	r2, r0
 800734a:	1c50      	adds	r0, r2, #1
 800734c:	d1c9      	bne.n	80072e2 <__sflush_r+0x32>
 800734e:	682b      	ldr	r3, [r5, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d0c6      	beq.n	80072e2 <__sflush_r+0x32>
 8007354:	2b1d      	cmp	r3, #29
 8007356:	d001      	beq.n	800735c <__sflush_r+0xac>
 8007358:	2b16      	cmp	r3, #22
 800735a:	d11e      	bne.n	800739a <__sflush_r+0xea>
 800735c:	602f      	str	r7, [r5, #0]
 800735e:	2000      	movs	r0, #0
 8007360:	e022      	b.n	80073a8 <__sflush_r+0xf8>
 8007362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007366:	b21b      	sxth	r3, r3
 8007368:	e01b      	b.n	80073a2 <__sflush_r+0xf2>
 800736a:	690f      	ldr	r7, [r1, #16]
 800736c:	2f00      	cmp	r7, #0
 800736e:	d0f6      	beq.n	800735e <__sflush_r+0xae>
 8007370:	0793      	lsls	r3, r2, #30
 8007372:	680e      	ldr	r6, [r1, #0]
 8007374:	bf08      	it	eq
 8007376:	694b      	ldreq	r3, [r1, #20]
 8007378:	600f      	str	r7, [r1, #0]
 800737a:	bf18      	it	ne
 800737c:	2300      	movne	r3, #0
 800737e:	eba6 0807 	sub.w	r8, r6, r7
 8007382:	608b      	str	r3, [r1, #8]
 8007384:	f1b8 0f00 	cmp.w	r8, #0
 8007388:	dde9      	ble.n	800735e <__sflush_r+0xae>
 800738a:	6a21      	ldr	r1, [r4, #32]
 800738c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800738e:	4643      	mov	r3, r8
 8007390:	463a      	mov	r2, r7
 8007392:	4628      	mov	r0, r5
 8007394:	47b0      	blx	r6
 8007396:	2800      	cmp	r0, #0
 8007398:	dc08      	bgt.n	80073ac <__sflush_r+0xfc>
 800739a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800739e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073a2:	81a3      	strh	r3, [r4, #12]
 80073a4:	f04f 30ff 	mov.w	r0, #4294967295
 80073a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ac:	4407      	add	r7, r0
 80073ae:	eba8 0800 	sub.w	r8, r8, r0
 80073b2:	e7e7      	b.n	8007384 <__sflush_r+0xd4>
 80073b4:	dfbffffe 	.word	0xdfbffffe

080073b8 <_fflush_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	690b      	ldr	r3, [r1, #16]
 80073bc:	4605      	mov	r5, r0
 80073be:	460c      	mov	r4, r1
 80073c0:	b913      	cbnz	r3, 80073c8 <_fflush_r+0x10>
 80073c2:	2500      	movs	r5, #0
 80073c4:	4628      	mov	r0, r5
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	b118      	cbz	r0, 80073d2 <_fflush_r+0x1a>
 80073ca:	6a03      	ldr	r3, [r0, #32]
 80073cc:	b90b      	cbnz	r3, 80073d2 <_fflush_r+0x1a>
 80073ce:	f7fe fa53 	bl	8005878 <__sinit>
 80073d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0f3      	beq.n	80073c2 <_fflush_r+0xa>
 80073da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073dc:	07d0      	lsls	r0, r2, #31
 80073de:	d404      	bmi.n	80073ea <_fflush_r+0x32>
 80073e0:	0599      	lsls	r1, r3, #22
 80073e2:	d402      	bmi.n	80073ea <_fflush_r+0x32>
 80073e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073e6:	f7fe fb50 	bl	8005a8a <__retarget_lock_acquire_recursive>
 80073ea:	4628      	mov	r0, r5
 80073ec:	4621      	mov	r1, r4
 80073ee:	f7ff ff5f 	bl	80072b0 <__sflush_r>
 80073f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073f4:	07da      	lsls	r2, r3, #31
 80073f6:	4605      	mov	r5, r0
 80073f8:	d4e4      	bmi.n	80073c4 <_fflush_r+0xc>
 80073fa:	89a3      	ldrh	r3, [r4, #12]
 80073fc:	059b      	lsls	r3, r3, #22
 80073fe:	d4e1      	bmi.n	80073c4 <_fflush_r+0xc>
 8007400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007402:	f7fe fb43 	bl	8005a8c <__retarget_lock_release_recursive>
 8007406:	e7dd      	b.n	80073c4 <_fflush_r+0xc>

08007408 <__swbuf_r>:
 8007408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740a:	460e      	mov	r6, r1
 800740c:	4614      	mov	r4, r2
 800740e:	4605      	mov	r5, r0
 8007410:	b118      	cbz	r0, 800741a <__swbuf_r+0x12>
 8007412:	6a03      	ldr	r3, [r0, #32]
 8007414:	b90b      	cbnz	r3, 800741a <__swbuf_r+0x12>
 8007416:	f7fe fa2f 	bl	8005878 <__sinit>
 800741a:	69a3      	ldr	r3, [r4, #24]
 800741c:	60a3      	str	r3, [r4, #8]
 800741e:	89a3      	ldrh	r3, [r4, #12]
 8007420:	071a      	lsls	r2, r3, #28
 8007422:	d501      	bpl.n	8007428 <__swbuf_r+0x20>
 8007424:	6923      	ldr	r3, [r4, #16]
 8007426:	b943      	cbnz	r3, 800743a <__swbuf_r+0x32>
 8007428:	4621      	mov	r1, r4
 800742a:	4628      	mov	r0, r5
 800742c:	f000 f82a 	bl	8007484 <__swsetup_r>
 8007430:	b118      	cbz	r0, 800743a <__swbuf_r+0x32>
 8007432:	f04f 37ff 	mov.w	r7, #4294967295
 8007436:	4638      	mov	r0, r7
 8007438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	6922      	ldr	r2, [r4, #16]
 800743e:	1a98      	subs	r0, r3, r2
 8007440:	6963      	ldr	r3, [r4, #20]
 8007442:	b2f6      	uxtb	r6, r6
 8007444:	4283      	cmp	r3, r0
 8007446:	4637      	mov	r7, r6
 8007448:	dc05      	bgt.n	8007456 <__swbuf_r+0x4e>
 800744a:	4621      	mov	r1, r4
 800744c:	4628      	mov	r0, r5
 800744e:	f7ff ffb3 	bl	80073b8 <_fflush_r>
 8007452:	2800      	cmp	r0, #0
 8007454:	d1ed      	bne.n	8007432 <__swbuf_r+0x2a>
 8007456:	68a3      	ldr	r3, [r4, #8]
 8007458:	3b01      	subs	r3, #1
 800745a:	60a3      	str	r3, [r4, #8]
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	6022      	str	r2, [r4, #0]
 8007462:	701e      	strb	r6, [r3, #0]
 8007464:	6962      	ldr	r2, [r4, #20]
 8007466:	1c43      	adds	r3, r0, #1
 8007468:	429a      	cmp	r2, r3
 800746a:	d004      	beq.n	8007476 <__swbuf_r+0x6e>
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	07db      	lsls	r3, r3, #31
 8007470:	d5e1      	bpl.n	8007436 <__swbuf_r+0x2e>
 8007472:	2e0a      	cmp	r6, #10
 8007474:	d1df      	bne.n	8007436 <__swbuf_r+0x2e>
 8007476:	4621      	mov	r1, r4
 8007478:	4628      	mov	r0, r5
 800747a:	f7ff ff9d 	bl	80073b8 <_fflush_r>
 800747e:	2800      	cmp	r0, #0
 8007480:	d0d9      	beq.n	8007436 <__swbuf_r+0x2e>
 8007482:	e7d6      	b.n	8007432 <__swbuf_r+0x2a>

08007484 <__swsetup_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4b29      	ldr	r3, [pc, #164]	@ (800752c <__swsetup_r+0xa8>)
 8007488:	4605      	mov	r5, r0
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	460c      	mov	r4, r1
 800748e:	b118      	cbz	r0, 8007498 <__swsetup_r+0x14>
 8007490:	6a03      	ldr	r3, [r0, #32]
 8007492:	b90b      	cbnz	r3, 8007498 <__swsetup_r+0x14>
 8007494:	f7fe f9f0 	bl	8005878 <__sinit>
 8007498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800749c:	0719      	lsls	r1, r3, #28
 800749e:	d422      	bmi.n	80074e6 <__swsetup_r+0x62>
 80074a0:	06da      	lsls	r2, r3, #27
 80074a2:	d407      	bmi.n	80074b4 <__swsetup_r+0x30>
 80074a4:	2209      	movs	r2, #9
 80074a6:	602a      	str	r2, [r5, #0]
 80074a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074ac:	81a3      	strh	r3, [r4, #12]
 80074ae:	f04f 30ff 	mov.w	r0, #4294967295
 80074b2:	e033      	b.n	800751c <__swsetup_r+0x98>
 80074b4:	0758      	lsls	r0, r3, #29
 80074b6:	d512      	bpl.n	80074de <__swsetup_r+0x5a>
 80074b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074ba:	b141      	cbz	r1, 80074ce <__swsetup_r+0x4a>
 80074bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074c0:	4299      	cmp	r1, r3
 80074c2:	d002      	beq.n	80074ca <__swsetup_r+0x46>
 80074c4:	4628      	mov	r0, r5
 80074c6:	f7ff f92f 	bl	8006728 <_free_r>
 80074ca:	2300      	movs	r3, #0
 80074cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074d4:	81a3      	strh	r3, [r4, #12]
 80074d6:	2300      	movs	r3, #0
 80074d8:	6063      	str	r3, [r4, #4]
 80074da:	6923      	ldr	r3, [r4, #16]
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	f043 0308 	orr.w	r3, r3, #8
 80074e4:	81a3      	strh	r3, [r4, #12]
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	b94b      	cbnz	r3, 80074fe <__swsetup_r+0x7a>
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074f4:	d003      	beq.n	80074fe <__swsetup_r+0x7a>
 80074f6:	4621      	mov	r1, r4
 80074f8:	4628      	mov	r0, r5
 80074fa:	f000 f8c1 	bl	8007680 <__smakebuf_r>
 80074fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007502:	f013 0201 	ands.w	r2, r3, #1
 8007506:	d00a      	beq.n	800751e <__swsetup_r+0x9a>
 8007508:	2200      	movs	r2, #0
 800750a:	60a2      	str	r2, [r4, #8]
 800750c:	6962      	ldr	r2, [r4, #20]
 800750e:	4252      	negs	r2, r2
 8007510:	61a2      	str	r2, [r4, #24]
 8007512:	6922      	ldr	r2, [r4, #16]
 8007514:	b942      	cbnz	r2, 8007528 <__swsetup_r+0xa4>
 8007516:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800751a:	d1c5      	bne.n	80074a8 <__swsetup_r+0x24>
 800751c:	bd38      	pop	{r3, r4, r5, pc}
 800751e:	0799      	lsls	r1, r3, #30
 8007520:	bf58      	it	pl
 8007522:	6962      	ldrpl	r2, [r4, #20]
 8007524:	60a2      	str	r2, [r4, #8]
 8007526:	e7f4      	b.n	8007512 <__swsetup_r+0x8e>
 8007528:	2000      	movs	r0, #0
 800752a:	e7f7      	b.n	800751c <__swsetup_r+0x98>
 800752c:	20000018 	.word	0x20000018

08007530 <_sbrk_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4d06      	ldr	r5, [pc, #24]	@ (800754c <_sbrk_r+0x1c>)
 8007534:	2300      	movs	r3, #0
 8007536:	4604      	mov	r4, r0
 8007538:	4608      	mov	r0, r1
 800753a:	602b      	str	r3, [r5, #0]
 800753c:	f7fa fd30 	bl	8001fa0 <_sbrk>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_sbrk_r+0x1a>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	b103      	cbz	r3, 800754a <_sbrk_r+0x1a>
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	20000470 	.word	0x20000470

08007550 <memcpy>:
 8007550:	440a      	add	r2, r1
 8007552:	4291      	cmp	r1, r2
 8007554:	f100 33ff 	add.w	r3, r0, #4294967295
 8007558:	d100      	bne.n	800755c <memcpy+0xc>
 800755a:	4770      	bx	lr
 800755c:	b510      	push	{r4, lr}
 800755e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007566:	4291      	cmp	r1, r2
 8007568:	d1f9      	bne.n	800755e <memcpy+0xe>
 800756a:	bd10      	pop	{r4, pc}

0800756c <__assert_func>:
 800756c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800756e:	4614      	mov	r4, r2
 8007570:	461a      	mov	r2, r3
 8007572:	4b09      	ldr	r3, [pc, #36]	@ (8007598 <__assert_func+0x2c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4605      	mov	r5, r0
 8007578:	68d8      	ldr	r0, [r3, #12]
 800757a:	b954      	cbnz	r4, 8007592 <__assert_func+0x26>
 800757c:	4b07      	ldr	r3, [pc, #28]	@ (800759c <__assert_func+0x30>)
 800757e:	461c      	mov	r4, r3
 8007580:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007584:	9100      	str	r1, [sp, #0]
 8007586:	462b      	mov	r3, r5
 8007588:	4905      	ldr	r1, [pc, #20]	@ (80075a0 <__assert_func+0x34>)
 800758a:	f000 f841 	bl	8007610 <fiprintf>
 800758e:	f000 f8d5 	bl	800773c <abort>
 8007592:	4b04      	ldr	r3, [pc, #16]	@ (80075a4 <__assert_func+0x38>)
 8007594:	e7f4      	b.n	8007580 <__assert_func+0x14>
 8007596:	bf00      	nop
 8007598:	20000018 	.word	0x20000018
 800759c:	08007ac6 	.word	0x08007ac6
 80075a0:	08007a98 	.word	0x08007a98
 80075a4:	08007a8b 	.word	0x08007a8b

080075a8 <_calloc_r>:
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	fba1 5402 	umull	r5, r4, r1, r2
 80075ae:	b93c      	cbnz	r4, 80075c0 <_calloc_r+0x18>
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7ff f92d 	bl	8006810 <_malloc_r>
 80075b6:	4606      	mov	r6, r0
 80075b8:	b928      	cbnz	r0, 80075c6 <_calloc_r+0x1e>
 80075ba:	2600      	movs	r6, #0
 80075bc:	4630      	mov	r0, r6
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	220c      	movs	r2, #12
 80075c2:	6002      	str	r2, [r0, #0]
 80075c4:	e7f9      	b.n	80075ba <_calloc_r+0x12>
 80075c6:	462a      	mov	r2, r5
 80075c8:	4621      	mov	r1, r4
 80075ca:	f7fe f9e0 	bl	800598e <memset>
 80075ce:	e7f5      	b.n	80075bc <_calloc_r+0x14>

080075d0 <__ascii_mbtowc>:
 80075d0:	b082      	sub	sp, #8
 80075d2:	b901      	cbnz	r1, 80075d6 <__ascii_mbtowc+0x6>
 80075d4:	a901      	add	r1, sp, #4
 80075d6:	b142      	cbz	r2, 80075ea <__ascii_mbtowc+0x1a>
 80075d8:	b14b      	cbz	r3, 80075ee <__ascii_mbtowc+0x1e>
 80075da:	7813      	ldrb	r3, [r2, #0]
 80075dc:	600b      	str	r3, [r1, #0]
 80075de:	7812      	ldrb	r2, [r2, #0]
 80075e0:	1e10      	subs	r0, r2, #0
 80075e2:	bf18      	it	ne
 80075e4:	2001      	movne	r0, #1
 80075e6:	b002      	add	sp, #8
 80075e8:	4770      	bx	lr
 80075ea:	4610      	mov	r0, r2
 80075ec:	e7fb      	b.n	80075e6 <__ascii_mbtowc+0x16>
 80075ee:	f06f 0001 	mvn.w	r0, #1
 80075f2:	e7f8      	b.n	80075e6 <__ascii_mbtowc+0x16>

080075f4 <__ascii_wctomb>:
 80075f4:	4603      	mov	r3, r0
 80075f6:	4608      	mov	r0, r1
 80075f8:	b141      	cbz	r1, 800760c <__ascii_wctomb+0x18>
 80075fa:	2aff      	cmp	r2, #255	@ 0xff
 80075fc:	d904      	bls.n	8007608 <__ascii_wctomb+0x14>
 80075fe:	228a      	movs	r2, #138	@ 0x8a
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	f04f 30ff 	mov.w	r0, #4294967295
 8007606:	4770      	bx	lr
 8007608:	700a      	strb	r2, [r1, #0]
 800760a:	2001      	movs	r0, #1
 800760c:	4770      	bx	lr
	...

08007610 <fiprintf>:
 8007610:	b40e      	push	{r1, r2, r3}
 8007612:	b503      	push	{r0, r1, lr}
 8007614:	4601      	mov	r1, r0
 8007616:	ab03      	add	r3, sp, #12
 8007618:	4805      	ldr	r0, [pc, #20]	@ (8007630 <fiprintf+0x20>)
 800761a:	f853 2b04 	ldr.w	r2, [r3], #4
 800761e:	6800      	ldr	r0, [r0, #0]
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	f7ff fd2d 	bl	8007080 <_vfiprintf_r>
 8007626:	b002      	add	sp, #8
 8007628:	f85d eb04 	ldr.w	lr, [sp], #4
 800762c:	b003      	add	sp, #12
 800762e:	4770      	bx	lr
 8007630:	20000018 	.word	0x20000018

08007634 <__swhatbuf_r>:
 8007634:	b570      	push	{r4, r5, r6, lr}
 8007636:	460c      	mov	r4, r1
 8007638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800763c:	2900      	cmp	r1, #0
 800763e:	b096      	sub	sp, #88	@ 0x58
 8007640:	4615      	mov	r5, r2
 8007642:	461e      	mov	r6, r3
 8007644:	da0d      	bge.n	8007662 <__swhatbuf_r+0x2e>
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800764c:	f04f 0100 	mov.w	r1, #0
 8007650:	bf14      	ite	ne
 8007652:	2340      	movne	r3, #64	@ 0x40
 8007654:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007658:	2000      	movs	r0, #0
 800765a:	6031      	str	r1, [r6, #0]
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	b016      	add	sp, #88	@ 0x58
 8007660:	bd70      	pop	{r4, r5, r6, pc}
 8007662:	466a      	mov	r2, sp
 8007664:	f000 f848 	bl	80076f8 <_fstat_r>
 8007668:	2800      	cmp	r0, #0
 800766a:	dbec      	blt.n	8007646 <__swhatbuf_r+0x12>
 800766c:	9901      	ldr	r1, [sp, #4]
 800766e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007672:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007676:	4259      	negs	r1, r3
 8007678:	4159      	adcs	r1, r3
 800767a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800767e:	e7eb      	b.n	8007658 <__swhatbuf_r+0x24>

08007680 <__smakebuf_r>:
 8007680:	898b      	ldrh	r3, [r1, #12]
 8007682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007684:	079d      	lsls	r5, r3, #30
 8007686:	4606      	mov	r6, r0
 8007688:	460c      	mov	r4, r1
 800768a:	d507      	bpl.n	800769c <__smakebuf_r+0x1c>
 800768c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	6123      	str	r3, [r4, #16]
 8007694:	2301      	movs	r3, #1
 8007696:	6163      	str	r3, [r4, #20]
 8007698:	b003      	add	sp, #12
 800769a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800769c:	ab01      	add	r3, sp, #4
 800769e:	466a      	mov	r2, sp
 80076a0:	f7ff ffc8 	bl	8007634 <__swhatbuf_r>
 80076a4:	9f00      	ldr	r7, [sp, #0]
 80076a6:	4605      	mov	r5, r0
 80076a8:	4639      	mov	r1, r7
 80076aa:	4630      	mov	r0, r6
 80076ac:	f7ff f8b0 	bl	8006810 <_malloc_r>
 80076b0:	b948      	cbnz	r0, 80076c6 <__smakebuf_r+0x46>
 80076b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b6:	059a      	lsls	r2, r3, #22
 80076b8:	d4ee      	bmi.n	8007698 <__smakebuf_r+0x18>
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	f043 0302 	orr.w	r3, r3, #2
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	e7e2      	b.n	800768c <__smakebuf_r+0xc>
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	6020      	str	r0, [r4, #0]
 80076ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ce:	81a3      	strh	r3, [r4, #12]
 80076d0:	9b01      	ldr	r3, [sp, #4]
 80076d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076d6:	b15b      	cbz	r3, 80076f0 <__smakebuf_r+0x70>
 80076d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076dc:	4630      	mov	r0, r6
 80076de:	f000 f81d 	bl	800771c <_isatty_r>
 80076e2:	b128      	cbz	r0, 80076f0 <__smakebuf_r+0x70>
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	f023 0303 	bic.w	r3, r3, #3
 80076ea:	f043 0301 	orr.w	r3, r3, #1
 80076ee:	81a3      	strh	r3, [r4, #12]
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	431d      	orrs	r5, r3
 80076f4:	81a5      	strh	r5, [r4, #12]
 80076f6:	e7cf      	b.n	8007698 <__smakebuf_r+0x18>

080076f8 <_fstat_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4d07      	ldr	r5, [pc, #28]	@ (8007718 <_fstat_r+0x20>)
 80076fc:	2300      	movs	r3, #0
 80076fe:	4604      	mov	r4, r0
 8007700:	4608      	mov	r0, r1
 8007702:	4611      	mov	r1, r2
 8007704:	602b      	str	r3, [r5, #0]
 8007706:	f7fa fc23 	bl	8001f50 <_fstat>
 800770a:	1c43      	adds	r3, r0, #1
 800770c:	d102      	bne.n	8007714 <_fstat_r+0x1c>
 800770e:	682b      	ldr	r3, [r5, #0]
 8007710:	b103      	cbz	r3, 8007714 <_fstat_r+0x1c>
 8007712:	6023      	str	r3, [r4, #0]
 8007714:	bd38      	pop	{r3, r4, r5, pc}
 8007716:	bf00      	nop
 8007718:	20000470 	.word	0x20000470

0800771c <_isatty_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d06      	ldr	r5, [pc, #24]	@ (8007738 <_isatty_r+0x1c>)
 8007720:	2300      	movs	r3, #0
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	602b      	str	r3, [r5, #0]
 8007728:	f7fa fc22 	bl	8001f70 <_isatty>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_isatty_r+0x1a>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	b103      	cbz	r3, 8007736 <_isatty_r+0x1a>
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	20000470 	.word	0x20000470

0800773c <abort>:
 800773c:	b508      	push	{r3, lr}
 800773e:	2006      	movs	r0, #6
 8007740:	f000 f82c 	bl	800779c <raise>
 8007744:	2001      	movs	r0, #1
 8007746:	f7fa fbb3 	bl	8001eb0 <_exit>

0800774a <_raise_r>:
 800774a:	291f      	cmp	r1, #31
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	4605      	mov	r5, r0
 8007750:	460c      	mov	r4, r1
 8007752:	d904      	bls.n	800775e <_raise_r+0x14>
 8007754:	2316      	movs	r3, #22
 8007756:	6003      	str	r3, [r0, #0]
 8007758:	f04f 30ff 	mov.w	r0, #4294967295
 800775c:	bd38      	pop	{r3, r4, r5, pc}
 800775e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007760:	b112      	cbz	r2, 8007768 <_raise_r+0x1e>
 8007762:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007766:	b94b      	cbnz	r3, 800777c <_raise_r+0x32>
 8007768:	4628      	mov	r0, r5
 800776a:	f000 f831 	bl	80077d0 <_getpid_r>
 800776e:	4622      	mov	r2, r4
 8007770:	4601      	mov	r1, r0
 8007772:	4628      	mov	r0, r5
 8007774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007778:	f000 b818 	b.w	80077ac <_kill_r>
 800777c:	2b01      	cmp	r3, #1
 800777e:	d00a      	beq.n	8007796 <_raise_r+0x4c>
 8007780:	1c59      	adds	r1, r3, #1
 8007782:	d103      	bne.n	800778c <_raise_r+0x42>
 8007784:	2316      	movs	r3, #22
 8007786:	6003      	str	r3, [r0, #0]
 8007788:	2001      	movs	r0, #1
 800778a:	e7e7      	b.n	800775c <_raise_r+0x12>
 800778c:	2100      	movs	r1, #0
 800778e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007792:	4620      	mov	r0, r4
 8007794:	4798      	blx	r3
 8007796:	2000      	movs	r0, #0
 8007798:	e7e0      	b.n	800775c <_raise_r+0x12>
	...

0800779c <raise>:
 800779c:	4b02      	ldr	r3, [pc, #8]	@ (80077a8 <raise+0xc>)
 800779e:	4601      	mov	r1, r0
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	f7ff bfd2 	b.w	800774a <_raise_r>
 80077a6:	bf00      	nop
 80077a8:	20000018 	.word	0x20000018

080077ac <_kill_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4d07      	ldr	r5, [pc, #28]	@ (80077cc <_kill_r+0x20>)
 80077b0:	2300      	movs	r3, #0
 80077b2:	4604      	mov	r4, r0
 80077b4:	4608      	mov	r0, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	f7fa fb69 	bl	8001e90 <_kill>
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	d102      	bne.n	80077c8 <_kill_r+0x1c>
 80077c2:	682b      	ldr	r3, [r5, #0]
 80077c4:	b103      	cbz	r3, 80077c8 <_kill_r+0x1c>
 80077c6:	6023      	str	r3, [r4, #0]
 80077c8:	bd38      	pop	{r3, r4, r5, pc}
 80077ca:	bf00      	nop
 80077cc:	20000470 	.word	0x20000470

080077d0 <_getpid_r>:
 80077d0:	f7fa bb56 	b.w	8001e80 <_getpid>

080077d4 <_init>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	bf00      	nop
 80077d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077da:	bc08      	pop	{r3}
 80077dc:	469e      	mov	lr, r3
 80077de:	4770      	bx	lr

080077e0 <_fini>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	bf00      	nop
 80077e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e6:	bc08      	pop	{r3}
 80077e8:	469e      	mov	lr, r3
 80077ea:	4770      	bx	lr
