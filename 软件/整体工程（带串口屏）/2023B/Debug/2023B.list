
2023B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08008d80  08008d80  00009d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091f8  080091f8  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080091f8  080091f8  0000a1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009200  08009200  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009200  08009200  0000a200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009204  08009204  0000a204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009208  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
 10 .bss          000004f0  200001d8  200001d8  0000b1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200006c8  200006c8  0000b1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e43  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c74  00000000  00000000  0001c047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  0001ecc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc2  00000000  00000000  0001fc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000234da  00000000  00000000  000207c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013102  00000000  00000000  00043c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d02b9  00000000  00000000  00056d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127057  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005030  00000000  00000000  0012709c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0012c0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d64 	.word	0x08008d64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008d64 	.word	0x08008d64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <ADS8688_SPI_WB>:
uint16_t My_Ad[8]={0,0,};
float ad_real[2]={0.0,0.0};
uint8_t test;

void ADS8688_SPI_WB(uint8_t com)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	uint8_t com_temp=com,s;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	73fb      	strb	r3, [r7, #15]
	ADS_8688_nCS_L;
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f4c:	4818      	ldr	r0, [pc, #96]	@ (8000fb0 <ADS8688_SPI_WB+0x78>)
 8000f4e:	f002 f88b 	bl	8003068 <HAL_GPIO_WritePin>
	for(s=0;s<8;s++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	73bb      	strb	r3, [r7, #14]
 8000f56:	e022      	b.n	8000f9e <ADS8688_SPI_WB+0x66>
	{
		if(com_temp&0x80)
 8000f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	da06      	bge.n	8000f6e <ADS8688_SPI_WB+0x36>
		{
			ADS_8688_SDI_H;
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f66:	4812      	ldr	r0, [pc, #72]	@ (8000fb0 <ADS8688_SPI_WB+0x78>)
 8000f68:	f002 f87e 	bl	8003068 <HAL_GPIO_WritePin>
 8000f6c:	e005      	b.n	8000f7a <ADS8688_SPI_WB+0x42>
		}
		else
		{
			ADS_8688_SDI_L;
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f74:	480e      	ldr	r0, [pc, #56]	@ (8000fb0 <ADS8688_SPI_WB+0x78>)
 8000f76:	f002 f877 	bl	8003068 <HAL_GPIO_WritePin>
		}
	ADS_8688_SCLK_H;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <ADS8688_SPI_WB+0x7c>)
 8000f82:	f002 f871 	bl	8003068 <HAL_GPIO_WritePin>
	com_temp<<=1;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
	ADS_8688_SCLK_L;
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f92:	4808      	ldr	r0, [pc, #32]	@ (8000fb4 <ADS8688_SPI_WB+0x7c>)
 8000f94:	f002 f868 	bl	8003068 <HAL_GPIO_WritePin>
	for(s=0;s<8;s++)
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	73bb      	strb	r3, [r7, #14]
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	2b07      	cmp	r3, #7
 8000fa2:	d9d9      	bls.n	8000f58 <ADS8688_SPI_WB+0x20>
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020800 	.word	0x40020800

08000fb8 <ADS8688_SPI_RB>:


uint8_t ADS8688_SPI_RB(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	uint8_t Rdata=0,s;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	//ADS_8688_nCS_L;
	for(s=0;s<8;s++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	71bb      	strb	r3, [r7, #6]
 8000fc6:	e022      	b.n	800100e <ADS8688_SPI_RB+0x56>
	{
		Rdata<<=1;
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	71fb      	strb	r3, [r7, #7]
		ADS_8688_SCLK_H;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fd4:	4812      	ldr	r0, [pc, #72]	@ (8001020 <ADS8688_SPI_RB+0x68>)
 8000fd6:	f002 f847 	bl	8003068 <HAL_GPIO_WritePin>
		if(ADS_8688_SDO)
 8000fda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fde:	4811      	ldr	r0, [pc, #68]	@ (8001024 <ADS8688_SPI_RB+0x6c>)
 8000fe0:	f002 f82a 	bl	8003038 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d004      	beq.n	8000ff4 <ADS8688_SPI_RB+0x3c>
		{
			Rdata|=0x01;
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	e003      	b.n	8000ffc <ADS8688_SPI_RB+0x44>
		}
		else
		{
			Rdata&=0xFE;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f023 0301 	bic.w	r3, r3, #1
 8000ffa:	71fb      	strb	r3, [r7, #7]
		}
	ADS_8688_SCLK_L;
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001002:	4807      	ldr	r0, [pc, #28]	@ (8001020 <ADS8688_SPI_RB+0x68>)
 8001004:	f002 f830 	bl	8003068 <HAL_GPIO_WritePin>
	for(s=0;s<8;s++)
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	3301      	adds	r3, #1
 800100c:	71bb      	strb	r3, [r7, #6]
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	2b07      	cmp	r3, #7
 8001012:	d9d9      	bls.n	8000fc8 <ADS8688_SPI_RB+0x10>
	}
	return Rdata;
 8001014:	79fb      	ldrb	r3, [r7, #7]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40020800 	.word	0x40020800
 8001024:	40020000 	.word	0x40020000

08001028 <ADS8688_WriteCommandReg>:


void ADS8688_WriteCommandReg(uint16_t command)//写ADS8688命令寄存器
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
	ADS_8688_nCS_L;
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001038:	480c      	ldr	r0, [pc, #48]	@ (800106c <ADS8688_WriteCommandReg+0x44>)
 800103a:	f002 f815 	bl	8003068 <HAL_GPIO_WritePin>
	ADS8688_SPI_WB(command>>8 & 0XFF);
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	b29b      	uxth	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff76 	bl	8000f38 <ADS8688_SPI_WB>
	ADS8688_SPI_WB(command & 0XFF);
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff71 	bl	8000f38 <ADS8688_SPI_WB>
	ADS_8688_nCS_H;
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800105c:	4803      	ldr	r0, [pc, #12]	@ (800106c <ADS8688_WriteCommandReg+0x44>)
 800105e:	f002 f803 	bl	8003068 <HAL_GPIO_WritePin>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40020000 	.word	0x40020000

08001070 <ADS8688_Write_Program_Register>:


void ADS8688_Write_Program_Register(uint8_t Addr,uint8_t data)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]
	ADS_8688_nCS_L;
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001086:	480d      	ldr	r0, [pc, #52]	@ (80010bc <ADS8688_Write_Program_Register+0x4c>)
 8001088:	f001 ffee 	bl	8003068 <HAL_GPIO_WritePin>
	ADS8688_SPI_WB(Addr<<1| 0X01);
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	b25b      	sxtb	r3, r3
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	b25b      	sxtb	r3, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff4c 	bl	8000f38 <ADS8688_SPI_WB>
	ADS8688_SPI_WB(data);
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff48 	bl	8000f38 <ADS8688_SPI_WB>
	ADS_8688_nCS_H;
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ae:	4803      	ldr	r0, [pc, #12]	@ (80010bc <ADS8688_Write_Program_Register+0x4c>)
 80010b0:	f001 ffda 	bl	8003068 <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40020000 	.word	0x40020000

080010c0 <ADS8688_READ_Program_Register>:


uint8_t ADS8688_READ_Program_Register(uint8_t Addr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
	ADS_8688_nCS_L;
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010d4:	480d      	ldr	r0, [pc, #52]	@ (800110c <ADS8688_READ_Program_Register+0x4c>)
 80010d6:	f001 ffc7 	bl	8003068 <HAL_GPIO_WritePin>
	ADS8688_SPI_WB(Addr<<1);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff29 	bl	8000f38 <ADS8688_SPI_WB>
	data = ADS8688_SPI_RB();
 80010e6:	f7ff ff67 	bl	8000fb8 <ADS8688_SPI_RB>
 80010ea:	4603      	mov	r3, r0
 80010ec:	73fb      	strb	r3, [r7, #15]
	data = ADS8688_SPI_RB();
 80010ee:	f7ff ff63 	bl	8000fb8 <ADS8688_SPI_RB>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]
	ADS_8688_nCS_H;
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010fc:	4803      	ldr	r0, [pc, #12]	@ (800110c <ADS8688_READ_Program_Register+0x4c>)
 80010fe:	f001 ffb3 	bl	8003068 <HAL_GPIO_WritePin>
	return data;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40020000 	.word	0x40020000

08001110 <Enter_RESET_MODE>:


 void Enter_RESET_MODE(void)//软件复位模式，复位 program registers
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
 ADS8688_WriteCommandReg(RST);
 8001114:	f44f 4005 	mov.w	r0, #34048	@ 0x8500
 8001118:	f7ff ff86 	bl	8001028 <ADS8688_WriteCommandReg>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <AUTO_RST_Mode>:

void AUTO_RST_Mode(void)//进入自动扫描模式
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	ADS8688_WriteCommandReg(AUTO_RST);
 8001124:	f44f 4020 	mov.w	r0, #40960	@ 0xa000
 8001128:	f7ff ff7e 	bl	8001028 <ADS8688_WriteCommandReg>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <MAN_Ch_n_Mode>:

void MAN_Ch_n_Mode(uint16_t ch)//手动模式
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
	ADS8688_WriteCommandReg(ch);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff73 	bl	8001028 <ADS8688_WriteCommandReg>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <Set_CH_Range_Select>:

void Set_CH_Range_Select(uint8_t ch,uint8_t range) //设置各个通道的范围
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	460a      	mov	r2, r1
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	4613      	mov	r3, r2
 8001158:	71bb      	strb	r3, [r7, #6]
	ADS8688_Write_Program_Register(ch,range);
 800115a:	79ba      	ldrb	r2, [r7, #6]
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff85 	bl	8001070 <ADS8688_Write_Program_Register>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <ADS8688_Init_Mult>:
	MAN_Ch_n_Mode(MAN_Ch_1);
	//HAL_Delay(300);
 }
*/
 void ADS8688_Init_Mult(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8001174:	f000 fa38 	bl	80015e8 <MX_GPIO_Init>
	ADS_8688_RST_PD_H;
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800117e:	4813      	ldr	r0, [pc, #76]	@ (80011cc <ADS8688_Init_Mult+0x5c>)
 8001180:	f001 ff72 	bl	8003068 <HAL_GPIO_WritePin>
	ADS_8688_DAISY_IN_L;
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800118a:	4811      	ldr	r0, [pc, #68]	@ (80011d0 <ADS8688_Init_Mult+0x60>)
 800118c:	f001 ff6c 	bl	8003068 <HAL_GPIO_WritePin>
	test=ADS8688_INIT();
 8001190:	f000 f822 	bl	80011d8 <ADS8688_INIT>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <ADS8688_Init_Mult+0x64>)
 800119a:	701a      	strb	r2, [r3, #0]
	//Enter_RESET_MODE();
	//进入配置
	//ADS8688_Write_Program_Register(0X00,0X00);
	//开启通道
	ADS8688_Write_Program_Register(0X02,0Xfc);
 800119c:	21fc      	movs	r1, #252	@ 0xfc
 800119e:	2002      	movs	r0, #2
 80011a0:	f7ff ff66 	bl	8001070 <ADS8688_Write_Program_Register>
	ADS8688_Write_Program_Register(0x01,0x03);//所有通道退出低功耗状态
 80011a4:	2103      	movs	r1, #3
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff ff62 	bl	8001070 <ADS8688_Write_Program_Register>


	Set_CH_Range_Select(CH1,0x01);//设置通道1的输入范围：+-1.25*Vref
 80011ac:	2101      	movs	r1, #1
 80011ae:	2005      	movs	r0, #5
 80011b0:	f7ff ffcb 	bl	800114a <Set_CH_Range_Select>
	Set_CH_Range_Select(CH2,0x01);
 80011b4:	2101      	movs	r1, #1
 80011b6:	2006      	movs	r0, #6
 80011b8:	f7ff ffc7 	bl	800114a <Set_CH_Range_Select>
	// //0x02 -> +-0.625*ref
	// //0x03 -> +2.5*ref
	// //0x04 -> +1.25*ref
	//AUTO_RST_Mode();//进入自动扫描模式
	//ADS8688_Write_Program_Register(0xa0,0x03);
	HAL_Delay(10);
 80011bc:	200a      	movs	r0, #10
 80011be:	f001 fb5d 	bl	800287c <HAL_Delay>
  AUTO_RST_Mode();
 80011c2:	f7ff ffad 	bl	8001120 <AUTO_RST_Mode>

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	200001f4 	.word	0x200001f4

080011d8 <ADS8688_INIT>:

 uint8_t ADS8688_INIT(void)
 {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
   uint8_t i;
 //	RST_PD_H;
 //  DAISY_IN_L;


   Enter_RESET_MODE();
 80011de:	f7ff ff97 	bl	8001110 <Enter_RESET_MODE>
   ADS8688_Write_Program_Register(0X01,0XFF);
 80011e2:	21ff      	movs	r1, #255	@ 0xff
 80011e4:	2001      	movs	r0, #1
 80011e6:	f7ff ff43 	bl	8001070 <ADS8688_Write_Program_Register>
   i = ADS8688_READ_Program_Register(0X01);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f7ff ff68 	bl	80010c0 <ADS8688_READ_Program_Register>
 80011f0:	4603      	mov	r3, r0
 80011f2:	71fb      	strb	r3, [r7, #7]
   return i;
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 }
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <Get_MAN_Ch_n_Mode_Data>:




uint16_t Get_MAN_Ch_n_Mode_Data(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
	uint8_t datah=0,datal=0;
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	2300      	movs	r3, #0
 800120c:	71bb      	strb	r3, [r7, #6]
	ADS_8688_nCS_L;
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001214:	4811      	ldr	r0, [pc, #68]	@ (800125c <Get_MAN_Ch_n_Mode_Data+0x5c>)
 8001216:	f001 ff27 	bl	8003068 <HAL_GPIO_WritePin>
	ADS8688_SPI_WB(0X00);
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff fe8c 	bl	8000f38 <ADS8688_SPI_WB>
	ADS8688_SPI_WB(0X00);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fe89 	bl	8000f38 <ADS8688_SPI_WB>
	datah = ADS8688_SPI_RB();
 8001226:	f7ff fec7 	bl	8000fb8 <ADS8688_SPI_RB>
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	datal = ADS8688_SPI_RB();
 800122e:	f7ff fec3 	bl	8000fb8 <ADS8688_SPI_RB>
 8001232:	4603      	mov	r3, r0
 8001234:	71bb      	strb	r3, [r7, #6]
	ADS_8688_nCS_H;
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <Get_MAN_Ch_n_Mode_Data+0x5c>)
 800123e:	f001 ff13 	bl	8003068 <HAL_GPIO_WritePin>
	return (datah<<8 | datal);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21a      	sxth	r2, r3
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21b      	sxth	r3, r3
 8001250:	b29b      	uxth	r3, r3
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40020000 	.word	0x40020000

08001260 <get_vol>:
	  real_val[0]=(float)((double)(get_val[0]-32762)/32767.0f*5.120f);
	  real_val[1]=(float)((double)(get_val[1]-32762)/32767.0f*5.120f);
}

float get_vol(uint16_t channel)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
  switch(channel)
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	2b07      	cmp	r3, #7
 800126e:	f200 813b 	bhi.w	80014e8 <get_vol+0x288>
 8001272:	a201      	add	r2, pc, #4	@ (adr r2, 8001278 <get_vol+0x18>)
 8001274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001278:	08001299 	.word	0x08001299
 800127c:	080012e3 	.word	0x080012e3
 8001280:	0800132d 	.word	0x0800132d
 8001284:	08001377 	.word	0x08001377
 8001288:	080013c1 	.word	0x080013c1
 800128c:	0800140b 	.word	0x0800140b
 8001290:	08001455 	.word	0x08001455
 8001294:	0800149f 	.word	0x0800149f
  {
    case 0:
	  MAN_Ch_n_Mode(MAN_Ch_1);
 8001298:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800129c:	f7ff ff48 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val1  = Get_MAN_Ch_n_Mode_Data();//获取通道0的值
 80012a0:	f7ff ffae 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 80012a4:	4603      	mov	r3, r0
 80012a6:	813b      	strh	r3, [r7, #8]
	  return (float)((double)(val1-32762)/32767.0f*5.120f);
 80012a8:	893b      	ldrh	r3, [r7, #8]
 80012aa:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 80012ae:	3b7a      	subs	r3, #122	@ 0x7a
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f937 	bl	8000524 <__aeabi_i2d>
 80012b6:	a391      	add	r3, pc, #580	@ (adr r3, 80014fc <get_vol+0x29c>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff fac6 	bl	800084c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	a38e      	add	r3, pc, #568	@ (adr r3, 8001504 <get_vol+0x2a4>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff f993 	bl	80005f8 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fc65 	bl	8000ba8 <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
 80012e0:	e103      	b.n	80014ea <get_vol+0x28a>
	  break;
	case 1:
	  MAN_Ch_n_Mode(MAN_Ch_2);
 80012e2:	f44f 4044 	mov.w	r0, #50176	@ 0xc400
 80012e6:	f7ff ff23 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val2 = Get_MAN_Ch_n_Mode_Data();//获取通道1的值
 80012ea:	f7ff ff89 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 80012ee:	4603      	mov	r3, r0
 80012f0:	817b      	strh	r3, [r7, #10]
	  return (float)((double)(val2-32762)/32767.0f*5.120f);
 80012f2:	897b      	ldrh	r3, [r7, #10]
 80012f4:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 80012f8:	3b7a      	subs	r3, #122	@ 0x7a
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f912 	bl	8000524 <__aeabi_i2d>
 8001300:	a37e      	add	r3, pc, #504	@ (adr r3, 80014fc <get_vol+0x29c>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff faa1 	bl	800084c <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	a37c      	add	r3, pc, #496	@ (adr r3, 8001504 <get_vol+0x2a4>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff f96e 	bl	80005f8 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fc40 	bl	8000ba8 <__aeabi_d2f>
 8001328:	4603      	mov	r3, r0
 800132a:	e0de      	b.n	80014ea <get_vol+0x28a>
	  break;
	case 2:
	  MAN_Ch_n_Mode(MAN_Ch_3);
 800132c:	f44f 4048 	mov.w	r0, #51200	@ 0xc800
 8001330:	f7ff fefe 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val3 = Get_MAN_Ch_n_Mode_Data();//获取通道2的值
 8001334:	f7ff ff64 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 8001338:	4603      	mov	r3, r0
 800133a:	81bb      	strh	r3, [r7, #12]
	  return (float)((double)(val3-32762)/32767.0f*5.120f);
 800133c:	89bb      	ldrh	r3, [r7, #12]
 800133e:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001342:	3b7a      	subs	r3, #122	@ 0x7a
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8ed 	bl	8000524 <__aeabi_i2d>
 800134a:	a36c      	add	r3, pc, #432	@ (adr r3, 80014fc <get_vol+0x29c>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff fa7c 	bl	800084c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	a369      	add	r3, pc, #420	@ (adr r3, 8001504 <get_vol+0x2a4>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff f949 	bl	80005f8 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fc1b 	bl	8000ba8 <__aeabi_d2f>
 8001372:	4603      	mov	r3, r0
 8001374:	e0b9      	b.n	80014ea <get_vol+0x28a>
	  break;
	case 3:
	  MAN_Ch_n_Mode(MAN_Ch_4);
 8001376:	f44f 404c 	mov.w	r0, #52224	@ 0xcc00
 800137a:	f7ff fed9 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val4 = Get_MAN_Ch_n_Mode_Data();//获取通道3的值
 800137e:	f7ff ff3f 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 8001382:	4603      	mov	r3, r0
 8001384:	81fb      	strh	r3, [r7, #14]
	  return (float)((double)(val4-32762)/32767.0f*5.120f);
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 800138c:	3b7a      	subs	r3, #122	@ 0x7a
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f8c8 	bl	8000524 <__aeabi_i2d>
 8001394:	a359      	add	r3, pc, #356	@ (adr r3, 80014fc <get_vol+0x29c>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f7ff fa57 	bl	800084c <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	a357      	add	r3, pc, #348	@ (adr r3, 8001504 <get_vol+0x2a4>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff f924 	bl	80005f8 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fbf6 	bl	8000ba8 <__aeabi_d2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	e094      	b.n	80014ea <get_vol+0x28a>
	  break;
	case 4:
	  MAN_Ch_n_Mode(MAN_Ch_5);
 80013c0:	f44f 4050 	mov.w	r0, #53248	@ 0xd000
 80013c4:	f7ff feb4 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val5 = Get_MAN_Ch_n_Mode_Data();//获取通道4的值
 80013c8:	f7ff ff1a 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 80013cc:	4603      	mov	r3, r0
 80013ce:	823b      	strh	r3, [r7, #16]
	  return (float)((double)(val5-32762)/32767.0f*5.120f);
 80013d0:	8a3b      	ldrh	r3, [r7, #16]
 80013d2:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 80013d6:	3b7a      	subs	r3, #122	@ 0x7a
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8a3 	bl	8000524 <__aeabi_i2d>
 80013de:	a347      	add	r3, pc, #284	@ (adr r3, 80014fc <get_vol+0x29c>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff fa32 	bl	800084c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	a344      	add	r3, pc, #272	@ (adr r3, 8001504 <get_vol+0x2a4>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f8ff 	bl	80005f8 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fbd1 	bl	8000ba8 <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
 8001408:	e06f      	b.n	80014ea <get_vol+0x28a>
	  break;
	case 5:
	  MAN_Ch_n_Mode(MAN_Ch_6);
 800140a:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 800140e:	f7ff fe8f 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val6 = Get_MAN_Ch_n_Mode_Data();//获取通道5的值
 8001412:	f7ff fef5 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 8001416:	4603      	mov	r3, r0
 8001418:	827b      	strh	r3, [r7, #18]
	  return (float)((double)(val6-32762)/32767.0f*5.120f);
 800141a:	8a7b      	ldrh	r3, [r7, #18]
 800141c:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001420:	3b7a      	subs	r3, #122	@ 0x7a
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f87e 	bl	8000524 <__aeabi_i2d>
 8001428:	a334      	add	r3, pc, #208	@ (adr r3, 80014fc <get_vol+0x29c>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff fa0d 	bl	800084c <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	a332      	add	r3, pc, #200	@ (adr r3, 8001504 <get_vol+0x2a4>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff f8da 	bl	80005f8 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fbac 	bl	8000ba8 <__aeabi_d2f>
 8001450:	4603      	mov	r3, r0
 8001452:	e04a      	b.n	80014ea <get_vol+0x28a>
	  break;
	case 6:
	  MAN_Ch_n_Mode(MAN_Ch_7);
 8001454:	f44f 4058 	mov.w	r0, #55296	@ 0xd800
 8001458:	f7ff fe6a 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val7 = Get_MAN_Ch_n_Mode_Data();//获取通道6的值
 800145c:	f7ff fed0 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 8001460:	4603      	mov	r3, r0
 8001462:	82bb      	strh	r3, [r7, #20]
	  return (float)((double)(val7-32762)/32767.0f*5.120f);
 8001464:	8abb      	ldrh	r3, [r7, #20]
 8001466:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 800146a:	3b7a      	subs	r3, #122	@ 0x7a
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f859 	bl	8000524 <__aeabi_i2d>
 8001472:	a322      	add	r3, pc, #136	@ (adr r3, 80014fc <get_vol+0x29c>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f9e8 	bl	800084c <__aeabi_ddiv>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	a31f      	add	r3, pc, #124	@ (adr r3, 8001504 <get_vol+0x2a4>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f8b5 	bl	80005f8 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fb87 	bl	8000ba8 <__aeabi_d2f>
 800149a:	4603      	mov	r3, r0
 800149c:	e025      	b.n	80014ea <get_vol+0x28a>
	  break;
	case 7:
	  MAN_Ch_n_Mode(MAN_Ch_8);
 800149e:	f44f 405c 	mov.w	r0, #56320	@ 0xdc00
 80014a2:	f7ff fe45 	bl	8001130 <MAN_Ch_n_Mode>
	  uint16_t val8 = Get_MAN_Ch_n_Mode_Data();//获取通道7的值
 80014a6:	f7ff feab 	bl	8001200 <Get_MAN_Ch_n_Mode_Data>
 80014aa:	4603      	mov	r3, r0
 80014ac:	82fb      	strh	r3, [r7, #22]
	  return (float)((double)(val8-32762)/32767.0f*5.120f);
 80014ae:	8afb      	ldrh	r3, [r7, #22]
 80014b0:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 80014b4:	3b7a      	subs	r3, #122	@ 0x7a
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f834 	bl	8000524 <__aeabi_i2d>
 80014bc:	a30f      	add	r3, pc, #60	@ (adr r3, 80014fc <get_vol+0x29c>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f9c3 	bl	800084c <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	a30d      	add	r3, pc, #52	@ (adr r3, 8001504 <get_vol+0x2a4>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7ff f890 	bl	80005f8 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fb62 	bl	8000ba8 <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	e000      	b.n	80014ea <get_vol+0x28a>
	  break;
	default:
	  return 123.456;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <get_vol+0x298>)
  }
}
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eeb0 0a67 	vmov.f32	s0, s15
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	42f6e979 	.word	0x42f6e979
 80014fc:	00000000 	.word	0x00000000
 8001500:	40dfffc0 	.word	0x40dfffc0
 8001504:	40000000 	.word	0x40000000
 8001508:	40147ae1 	.word	0x40147ae1

0800150c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001512:	463b      	mov	r3, r7
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <MX_DAC_Init+0x4c>)
 800151c:	4a0f      	ldr	r2, [pc, #60]	@ (800155c <MX_DAC_Init+0x50>)
 800151e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001520:	480d      	ldr	r0, [pc, #52]	@ (8001558 <MX_DAC_Init+0x4c>)
 8001522:	f001 fae0 	bl	8002ae6 <HAL_DAC_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800152c:	f000 fd8a 	bl	8002044 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001530:	233c      	movs	r3, #60	@ 0x3c
 8001532:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <MX_DAC_Init+0x4c>)
 8001540:	f001 faf3 	bl	8002b2a <HAL_DAC_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800154a:	f000 fd7b 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200001f8 	.word	0x200001f8
 800155c:	40007400 	.word	0x40007400

08001560 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a17      	ldr	r2, [pc, #92]	@ (80015dc <HAL_DAC_MspInit+0x7c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d127      	bne.n	80015d2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <HAL_DAC_MspInit+0x80>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	4a15      	ldr	r2, [pc, #84]	@ (80015e0 <HAL_DAC_MspInit+0x80>)
 800158c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001590:	6413      	str	r3, [r2, #64]	@ 0x40
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <HAL_DAC_MspInit+0x80>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <HAL_DAC_MspInit+0x80>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a0e      	ldr	r2, [pc, #56]	@ (80015e0 <HAL_DAC_MspInit+0x80>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <HAL_DAC_MspInit+0x80>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ba:	2310      	movs	r3, #16
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015be:	2303      	movs	r3, #3
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <HAL_DAC_MspInit+0x84>)
 80015ce:	f001 fb97 	bl	8002d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	@ 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40007400 	.word	0x40007400
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000

080015e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	@ 0x30
 80015ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	4b69      	ldr	r3, [pc, #420]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a68      	ldr	r2, [pc, #416]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001608:	f043 0320 	orr.w	r3, r3, #32
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b66      	ldr	r3, [pc, #408]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	4b62      	ldr	r3, [pc, #392]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a61      	ldr	r2, [pc, #388]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b5f      	ldr	r3, [pc, #380]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b5b      	ldr	r3, [pc, #364]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a5a      	ldr	r2, [pc, #360]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b58      	ldr	r3, [pc, #352]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b54      	ldr	r3, [pc, #336]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a53      	ldr	r2, [pc, #332]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 800165c:	f043 0310 	orr.w	r3, r3, #16
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b51      	ldr	r3, [pc, #324]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b4d      	ldr	r3, [pc, #308]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a4c      	ldr	r2, [pc, #304]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b4a      	ldr	r3, [pc, #296]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b46      	ldr	r3, [pc, #280]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a45      	ldr	r2, [pc, #276]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 8001694:	f043 0308 	orr.w	r3, r3, #8
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b43      	ldr	r3, [pc, #268]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4b3f      	ldr	r3, [pc, #252]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a3e      	ldr	r2, [pc, #248]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b3c      	ldr	r3, [pc, #240]	@ (80017a8 <MX_GPIO_Init+0x1c0>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80016c8:	4838      	ldr	r0, [pc, #224]	@ (80017ac <MX_GPIO_Init+0x1c4>)
 80016ca:	f001 fccd 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relays_GPIO_Port, Relays_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016d4:	4836      	ldr	r0, [pc, #216]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 80016d6:	f001 fcc7 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADS_RST_Pin|ADS_SCLK_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80016e0:	4834      	ldr	r0, [pc, #208]	@ (80017b4 <MX_GPIO_Init+0x1cc>)
 80016e2:	f001 fcc1 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADS_DAISY_Pin|ADS_SDI_Pin|ADS_nCS_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 4111 	mov.w	r1, #37120	@ 0x9100
 80016ec:	4832      	ldr	r0, [pc, #200]	@ (80017b8 <MX_GPIO_Init+0x1d0>)
 80016ee:	f001 fcbb 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 80016f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001700:	2302      	movs	r3, #2
 8001702:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4619      	mov	r1, r3
 800170a:	4828      	ldr	r0, [pc, #160]	@ (80017ac <MX_GPIO_Init+0x1c4>)
 800170c:	f001 faf8 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relays_Pin;
 8001710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Relays_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	4619      	mov	r1, r3
 8001728:	4821      	ldr	r0, [pc, #132]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 800172a:	f001 fae9 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADS_RST_Pin|ADS_SCLK_Pin;
 800172e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	481b      	ldr	r0, [pc, #108]	@ (80017b4 <MX_GPIO_Init+0x1cc>)
 8001748:	f001 fada 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ADS_DAISY_Pin|ADS_SDI_Pin|ADS_nCS_Pin;
 800174c:	f44f 4311 	mov.w	r3, #37120	@ 0x9100
 8001750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	2301      	movs	r3, #1
 8001754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	4814      	ldr	r0, [pc, #80]	@ (80017b8 <MX_GPIO_Init+0x1d0>)
 8001766:	f001 facb 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADS_SDO_Pin;
 800176a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ADS_SDO_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	480e      	ldr	r0, [pc, #56]	@ (80017b8 <MX_GPIO_Init+0x1d0>)
 8001780:	f001 fabe 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8001784:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800178a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800178e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001790:	2301      	movs	r3, #1
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	4808      	ldr	r0, [pc, #32]	@ (80017bc <MX_GPIO_Init+0x1d4>)
 800179c:	f001 fab0 	bl	8002d00 <HAL_GPIO_Init>

}
 80017a0:	bf00      	nop
 80017a2:	3730      	adds	r7, #48	@ 0x30
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40021400 	.word	0x40021400
 80017b0:	40020c00 	.word	0x40020c00
 80017b4:	40020800 	.word	0x40020800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400

080017c0 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
//	__HAL_TIM_SET_COUNTER(&htim1,0);

	if(i==0)
 80017c8:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d110      	bne.n	80017f2 <HAL_TIM_IC_CaptureCallback+0x32>
	{
		time[i] = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_3);
 80017d0:	2108      	movs	r1, #8
 80017d2:	4815      	ldr	r0, [pc, #84]	@ (8001828 <HAL_TIM_IC_CaptureCallback+0x68>)
 80017d4:	f002 fe5c 	bl	8004490 <HAL_TIM_ReadCapturedValue>
 80017d8:	4602      	mov	r2, r0
 80017da:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4611      	mov	r1, r2
 80017e0:	4a12      	ldr	r2, [pc, #72]	@ (800182c <HAL_TIM_IC_CaptureCallback+0x6c>)
 80017e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		i++;
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	e015      	b.n	800181e <HAL_TIM_IC_CaptureCallback+0x5e>
	}
	else if(i==1)
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d110      	bne.n	800181c <HAL_TIM_IC_CaptureCallback+0x5c>
	{
		time[i] = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_3);
 80017fa:	2108      	movs	r1, #8
 80017fc:	480a      	ldr	r0, [pc, #40]	@ (8001828 <HAL_TIM_IC_CaptureCallback+0x68>)
 80017fe:	f002 fe47 	bl	8004490 <HAL_TIM_ReadCapturedValue>
 8001802:	4602      	mov	r2, r0
 8001804:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4611      	mov	r1, r2
 800180a:	4a08      	ldr	r2, [pc, #32]	@ (800182c <HAL_TIM_IC_CaptureCallback+0x6c>)
 800180c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		i++;
 8001810:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	4a03      	ldr	r2, [pc, #12]	@ (8001824 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e000      	b.n	800181e <HAL_TIM_IC_CaptureCallback+0x5e>
	}
	else
	{
		return;
 800181c:	bf00      	nop
	}

}
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000218 	.word	0x20000218
 8001828:	20000258 	.word	0x20000258
 800182c:	2000020c 	.word	0x2000020c

08001830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001834:	f000 ffb0 	bl	8002798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001838:	f000 f826 	bl	8001888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183c:	f7ff fed4 	bl	80015e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001840:	f000 fe70 	bl	8002524 <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001844:	f7ff fe62 	bl	800150c <MX_DAC_Init>
  MX_TIM3_Init();
 8001848:	f000 fdba 	bl	80023c0 <MX_TIM3_Init>
  MX_TIM1_Init();
 800184c:	f000 fd44 	bl	80022d8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001850:	f000 fe92 	bl	8002578 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //初始化ADS8688
  ADS8688_Init_Mult();
 8001854:	f7ff fc8c 	bl	8001170 <ADS8688_Init_Mult>
  initRingBuff();
 8001858:	f004 fb5c 	bl	8005f14 <initRingBuff>
  HAL_UART_Receive_IT(&huart3,RxBuff,1);
 800185c:	2201      	movs	r2, #1
 800185e:	4907      	ldr	r1, [pc, #28]	@ (800187c <main+0x4c>)
 8001860:	4807      	ldr	r0, [pc, #28]	@ (8001880 <main+0x50>)
 8001862:	f003 fb4f 	bl	8004f04 <HAL_UART_Receive_IT>
  //初始化继电器
  HAL_GPIO_WritePin(Relays_GPIO_Port, Relays_Pin, RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800186c:	4805      	ldr	r0, [pc, #20]	@ (8001884 <main+0x54>)
 800186e:	f001 fbfb 	bl	8003068 <HAL_GPIO_WritePin>
//  }

    while (1)
  {

    	TJC_USART();//等待按键按下
 8001872:	f000 f9c9 	bl	8001c08 <TJC_USART>
  {
 8001876:	bf00      	nop
 8001878:	e7fb      	b.n	8001872 <main+0x42>
 800187a:	bf00      	nop
 800187c:	20000578 	.word	0x20000578
 8001880:	20000330 	.word	0x20000330
 8001884:	40020c00 	.word	0x40020c00

08001888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b094      	sub	sp, #80	@ 0x50
 800188c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	2230      	movs	r2, #48	@ 0x30
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f005 f998 	bl	8006bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	4b28      	ldr	r3, [pc, #160]	@ (8001954 <SystemClock_Config+0xcc>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	4a27      	ldr	r2, [pc, #156]	@ (8001954 <SystemClock_Config+0xcc>)
 80018b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80018bc:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <SystemClock_Config+0xcc>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	4b22      	ldr	r3, [pc, #136]	@ (8001958 <SystemClock_Config+0xd0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a21      	ldr	r2, [pc, #132]	@ (8001958 <SystemClock_Config+0xd0>)
 80018d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <SystemClock_Config+0xd0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018e4:	2301      	movs	r3, #1
 80018e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ee:	2302      	movs	r3, #2
 80018f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018f8:	2304      	movs	r3, #4
 80018fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018fc:	23a8      	movs	r3, #168	@ 0xa8
 80018fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001900:	2302      	movs	r3, #2
 8001902:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001904:	2304      	movs	r3, #4
 8001906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001908:	f107 0320 	add.w	r3, r7, #32
 800190c:	4618      	mov	r0, r3
 800190e:	f001 fbc5 	bl	800309c <HAL_RCC_OscConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001918:	f000 fb94 	bl	8002044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191c:	230f      	movs	r3, #15
 800191e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001920:	2302      	movs	r3, #2
 8001922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001928:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800192c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800192e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	2105      	movs	r1, #5
 800193a:	4618      	mov	r0, r3
 800193c:	f001 fe26 	bl	800358c <HAL_RCC_ClockConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001946:	f000 fb7d 	bl	8002044 <Error_Handler>
  }
}
 800194a:	bf00      	nop
 800194c:	3750      	adds	r7, #80	@ 0x50
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	40007000 	.word	0x40007000

0800195c <judge_type>:

/* USER CODE BEGIN 4 */
int judge_type(float connect_freq)
{
 800195c:	b5b0      	push	{r4, r5, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	ed87 0a01 	vstr	s0, [r7, #4]
	//如果不震荡了，那就是接入了电阻
	if(connect_freq == 0)
 8001966:	edd7 7a01 	vldr	s15, [r7, #4]
 800196a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001972:	d101      	bne.n	8001978 <judge_type+0x1c>
	{
		return r_flag;
 8001974:	2302      	movs	r3, #2
 8001976:	e01a      	b.n	80019ae <judge_type+0x52>
	}
	//如果频率和开路的基本频率基本一样，那么就是开路，这个容忍度是40kHz
	else if((freq-connect_freq)<4e3)
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <judge_type+0x5c>)
 800197a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7fe fde2 	bl	8000548 <__aeabi_f2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fc7c 	bl	8000288 <__aeabi_dsub>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <judge_type+0x60>)
 800199e:	f7ff f89d 	bl	8000adc <__aeabi_dcmplt>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <judge_type+0x50>
	{
		return open_flag;
 80019a8:	2300      	movs	r3, #0
 80019aa:	e000      	b.n	80019ae <judge_type+0x52>
	}
	//否则就是电容接入
	else
	{
		return c_flag;
 80019ac:	2301      	movs	r3, #1
	}
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bdb0      	pop	{r4, r5, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000220 	.word	0x20000220
 80019bc:	40af4000 	.word	0x40af4000

080019c0 <calculate_length>:


void calculate_length()
{
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	//继电器复位
	HAL_GPIO_WritePin(Relays_GPIO_Port, Relays_Pin, RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ca:	4857      	ldr	r0, [pc, #348]	@ (8001b28 <calculate_length+0x168>)
 80019cc:	f001 fb4c 	bl	8003068 <HAL_GPIO_WritePin>

	//等待继电器稳定
	HAL_Delay(300);
 80019d0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80019d4:	f000 ff52 	bl	800287c <HAL_Delay>
	i = 0;
 80019d8:	4b54      	ldr	r3, [pc, #336]	@ (8001b2c <calculate_length+0x16c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start(&htim1);
 80019de:	4854      	ldr	r0, [pc, #336]	@ (8001b30 <calculate_length+0x170>)
 80019e0:	f002 f844 	bl	8003a6c <HAL_TIM_Base_Start>
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 80019e4:	2108      	movs	r1, #8
 80019e6:	4852      	ldr	r0, [pc, #328]	@ (8001b30 <calculate_length+0x170>)
 80019e8:	f002 f928 	bl	8003c3c <HAL_TIM_IC_Start_IT>
    __HAL_TIM_SET_COUNTER(&htim1,0);
 80019ec:	4b50      	ldr	r3, [pc, #320]	@ (8001b30 <calculate_length+0x170>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2200      	movs	r2, #0
 80019f2:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_Delay(100);
 80019f4:	2064      	movs	r0, #100	@ 0x64
 80019f6:	f000 ff41 	bl	800287c <HAL_Delay>
	//第一次计算，算出振荡频率、线长和等效电容
	time[2]=time[1]-time[0];
 80019fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001b34 <calculate_length+0x174>)
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001b34 <calculate_length+0x174>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	4a4b      	ldr	r2, [pc, #300]	@ (8001b34 <calculate_length+0x174>)
 8001a06:	6093      	str	r3, [r2, #8]
	printf("%d\r\n",time[2]);
 8001a08:	4b4a      	ldr	r3, [pc, #296]	@ (8001b34 <calculate_length+0x174>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	484a      	ldr	r0, [pc, #296]	@ (8001b38 <calculate_length+0x178>)
 8001a10:	f005 f84e 	bl	8006ab0 <iprintf>
	freq= (84*1000000)/time[2];
 8001a14:	4b47      	ldr	r3, [pc, #284]	@ (8001b34 <calculate_length+0x174>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a48      	ldr	r2, [pc, #288]	@ (8001b3c <calculate_length+0x17c>)
 8001a1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fd80 	bl	8000524 <__aeabi_i2d>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4945      	ldr	r1, [pc, #276]	@ (8001b40 <calculate_length+0x180>)
 8001a2a:	e9c1 2300 	strd	r2, r3, [r1]
	printf("freq=%f k\r\n",freq/1000);
 8001a2e:	4b44      	ldr	r3, [pc, #272]	@ (8001b40 <calculate_length+0x180>)
 8001a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b42      	ldr	r3, [pc, #264]	@ (8001b44 <calculate_length+0x184>)
 8001a3a:	f7fe ff07 	bl	800084c <__aeabi_ddiv>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4841      	ldr	r0, [pc, #260]	@ (8001b48 <calculate_length+0x188>)
 8001a44:	f005 f834 	bl	8006ab0 <iprintf>
	sum = freq_slope*freq/1000+freq_intercept;
 8001a48:	4b3d      	ldr	r3, [pc, #244]	@ (8001b40 <calculate_length+0x180>)
 8001a4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a4e:	a32e      	add	r3, pc, #184	@ (adr r3, 8001b08 <calculate_length+0x148>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fdd0 	bl	80005f8 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b37      	ldr	r3, [pc, #220]	@ (8001b44 <calculate_length+0x184>)
 8001a66:	f7fe fef1 	bl	800084c <__aeabi_ddiv>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	a327      	add	r3, pc, #156	@ (adr r3, 8001b10 <calculate_length+0x150>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	f7fe fc08 	bl	800028c <__adddf3>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4932      	ldr	r1, [pc, #200]	@ (8001b4c <calculate_length+0x18c>)
 8001a82:	e9c1 2300 	strd	r2, r3, [r1]
	length = sum/(freq/1000);
 8001a86:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <calculate_length+0x18c>)
 8001a88:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <calculate_length+0x180>)
 8001a8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	4b2b      	ldr	r3, [pc, #172]	@ (8001b44 <calculate_length+0x184>)
 8001a98:	f7fe fed8 	bl	800084c <__aeabi_ddiv>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	f7fe fed2 	bl	800084c <__aeabi_ddiv>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4928      	ldr	r1, [pc, #160]	@ (8001b50 <calculate_length+0x190>)
 8001aae:	e9c1 2300 	strd	r2, r3, [r1]
	printf("length=%f\r\n",length);
 8001ab2:	4b27      	ldr	r3, [pc, #156]	@ (8001b50 <calculate_length+0x190>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	4826      	ldr	r0, [pc, #152]	@ (8001b54 <calculate_length+0x194>)
 8001aba:	f004 fff9 	bl	8006ab0 <iprintf>
	C = length*46.167+18.992;
 8001abe:	4b24      	ldr	r3, [pc, #144]	@ (8001b50 <calculate_length+0x190>)
 8001ac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ac4:	a314      	add	r3, pc, #80	@ (adr r3, 8001b18 <calculate_length+0x158>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe fd95 	bl	80005f8 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	a312      	add	r3, pc, #72	@ (adr r3, 8001b20 <calculate_length+0x160>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe fbd6 	bl	800028c <__adddf3>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	491c      	ldr	r1, [pc, #112]	@ (8001b58 <calculate_length+0x198>)
 8001ae6:	e9c1 2300 	strd	r2, r3, [r1]
	printf("C=%f\r\n",C);
 8001aea:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <calculate_length+0x198>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	481a      	ldr	r0, [pc, #104]	@ (8001b5c <calculate_length+0x19c>)
 8001af2:	f004 ffdd 	bl	8006ab0 <iprintf>
	HAL_TIM_Base_Stop(&htim1);
 8001af6:	480e      	ldr	r0, [pc, #56]	@ (8001b30 <calculate_length+0x170>)
 8001af8:	f002 f820 	bl	8003b3c <HAL_TIM_Base_Stop>
	HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_3);
 8001afc:	2108      	movs	r1, #8
 8001afe:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <calculate_length+0x170>)
 8001b00:	f002 f9c4 	bl	8003e8c <HAL_TIM_IC_Stop_IT>
}
 8001b04:	bf00      	nop
 8001b06:	bdb0      	pop	{r4, r5, r7, pc}
 8001b08:	5c28f5c3 	.word	0x5c28f5c3
 8001b0c:	bfddc28f 	.word	0xbfddc28f
 8001b10:	b4395810 	.word	0xb4395810
 8001b14:	404e66c8 	.word	0x404e66c8
 8001b18:	4189374c 	.word	0x4189374c
 8001b1c:	40471560 	.word	0x40471560
 8001b20:	b645a1cb 	.word	0xb645a1cb
 8001b24:	4032fdf3 	.word	0x4032fdf3
 8001b28:	40020c00 	.word	0x40020c00
 8001b2c:	20000218 	.word	0x20000218
 8001b30:	20000258 	.word	0x20000258
 8001b34:	2000020c 	.word	0x2000020c
 8001b38:	08008d80 	.word	0x08008d80
 8001b3c:	0501bd00 	.word	0x0501bd00
 8001b40:	20000220 	.word	0x20000220
 8001b44:	408f4000 	.word	0x408f4000
 8001b48:	08008d88 	.word	0x08008d88
 8001b4c:	20000228 	.word	0x20000228
 8001b50:	20000230 	.word	0x20000230
 8001b54:	08008d94 	.word	0x08008d94
 8001b58:	20000238 	.word	0x20000238
 8001b5c:	08008da0 	.word	0x08008da0

08001b60 <recalculate>:

void recalculate()
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	//第二次计算，考虑到可能不振荡从而触发不了输入捕获，先把两个time置零
	time[1] = time[0] = 0;
 8001b64:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <recalculate+0x8c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <recalculate+0x8c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bec <recalculate+0x8c>)
 8001b70:	6053      	str	r3, [r2, #4]
	i = 0;
 8001b72:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <recalculate+0x90>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start(&htim1);
 8001b78:	481e      	ldr	r0, [pc, #120]	@ (8001bf4 <recalculate+0x94>)
 8001b7a:	f001 ff77 	bl	8003a6c <HAL_TIM_Base_Start>
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8001b7e:	2108      	movs	r1, #8
 8001b80:	481c      	ldr	r0, [pc, #112]	@ (8001bf4 <recalculate+0x94>)
 8001b82:	f002 f85b 	bl	8003c3c <HAL_TIM_IC_Start_IT>
    __HAL_TIM_SET_COUNTER(&htim1,0);
 8001b86:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <recalculate+0x94>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_Delay(100);
 8001b8e:	2064      	movs	r0, #100	@ 0x64
 8001b90:	f000 fe74 	bl	800287c <HAL_Delay>
	time[2]=time[1]-time[0];
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <recalculate+0x8c>)
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <recalculate+0x8c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	4a13      	ldr	r2, [pc, #76]	@ (8001bec <recalculate+0x8c>)
 8001ba0:	6093      	str	r3, [r2, #8]

	//如果算出来是0，那说明没有触发输入捕获，这样就说明没有震荡，接入了电阻
	if(time[2] == 0)
 8001ba2:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <recalculate+0x8c>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10a      	bne.n	8001bc0 <recalculate+0x60>
	{
		connect_freq = 0;
 8001baa:	4913      	ldr	r1, [pc, #76]	@ (8001bf8 <recalculate+0x98>)
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	e9c1 2300 	strd	r2, r3, [r1]
		printf("电阻");
 8001bb8:	4810      	ldr	r0, [pc, #64]	@ (8001bfc <recalculate+0x9c>)
 8001bba:	f004 ff79 	bl	8006ab0 <iprintf>
 8001bbe:	e00c      	b.n	8001bda <recalculate+0x7a>
	}
	//触发了输入捕获就是开路或者接入电容，可以算出来振荡频率
	else
	{
		connect_freq= (84*1000000)/time[2];
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <recalculate+0x8c>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001c00 <recalculate+0xa0>)
 8001bc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcaa 	bl	8000524 <__aeabi_i2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4908      	ldr	r1, [pc, #32]	@ (8001bf8 <recalculate+0x98>)
 8001bd6:	e9c1 2300 	strd	r2, r3, [r1]
	}
	HAL_TIM_Base_Stop(&htim1);
 8001bda:	4806      	ldr	r0, [pc, #24]	@ (8001bf4 <recalculate+0x94>)
 8001bdc:	f001 ffae 	bl	8003b3c <HAL_TIM_Base_Stop>
	HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_3);
 8001be0:	2108      	movs	r1, #8
 8001be2:	4804      	ldr	r0, [pc, #16]	@ (8001bf4 <recalculate+0x94>)
 8001be4:	f002 f952 	bl	8003e8c <HAL_TIM_IC_Stop_IT>
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2000020c 	.word	0x2000020c
 8001bf0:	20000218 	.word	0x20000218
 8001bf4:	20000258 	.word	0x20000258
 8001bf8:	20000240 	.word	0x20000240
 8001bfc:	08008da8 	.word	0x08008da8
 8001c00:	0501bd00 	.word	0x0501bd00
 8001c04:	00000000 	.word	0x00000000

08001c08 <TJC_USART>:

void TJC_USART()
{
 8001c08:	b5b0      	push	{r4, r5, r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
	while (usize >= 6)
 8001c0e:	e01a      	b.n	8001c46 <TJC_USART+0x3e>
	{
		// 校验帧头帧尾是否匹配
		if (u(0) != 0x55 || u(3) != 0xff || u(4) != 0xff || u(5) != 0xff)
 8001c10:	2000      	movs	r0, #0
 8001c12:	f004 fa01 	bl	8006018 <read1BFromRingBuff>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b55      	cmp	r3, #85	@ 0x55
 8001c1a:	d111      	bne.n	8001c40 <TJC_USART+0x38>
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f004 f9fb 	bl	8006018 <read1BFromRingBuff>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2bff      	cmp	r3, #255	@ 0xff
 8001c26:	d10b      	bne.n	8001c40 <TJC_USART+0x38>
 8001c28:	2004      	movs	r0, #4
 8001c2a:	f004 f9f5 	bl	8006018 <read1BFromRingBuff>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2bff      	cmp	r3, #255	@ 0xff
 8001c32:	d105      	bne.n	8001c40 <TJC_USART+0x38>
 8001c34:	2005      	movs	r0, #5
 8001c36:	f004 f9ef 	bl	8006018 <read1BFromRingBuff>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2bff      	cmp	r3, #255	@ 0xff
 8001c3e:	d007      	beq.n	8001c50 <TJC_USART+0x48>
		{
			// 不匹配删除1字节
			udelete(1);
 8001c40:	2001      	movs	r0, #1
 8001c42:	f004 f9ad 	bl	8005fa0 <deleteRingBuff>
	while (usize >= 6)
 8001c46:	f004 fa0d 	bl	8006064 <getRingBuffLenght>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d8df      	bhi.n	8001c10 <TJC_USART+0x8>
			break;
		}
	}

	// 进行解析
	if (usize >= 6 && u(0) == 0x55 && u(3) == 0xff && u(4) == 0xff&& u(5) == 0xff)
 8001c50:	f004 fa08 	bl	8006064 <getRingBuffLenght>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	f240 81e8 	bls.w	800202c <TJC_USART+0x424>
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f004 f9db 	bl	8006018 <read1BFromRingBuff>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b55      	cmp	r3, #85	@ 0x55
 8001c66:	f040 81e1 	bne.w	800202c <TJC_USART+0x424>
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	f004 f9d4 	bl	8006018 <read1BFromRingBuff>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2bff      	cmp	r3, #255	@ 0xff
 8001c74:	f040 81da 	bne.w	800202c <TJC_USART+0x424>
 8001c78:	2004      	movs	r0, #4
 8001c7a:	f004 f9cd 	bl	8006018 <read1BFromRingBuff>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2bff      	cmp	r3, #255	@ 0xff
 8001c82:	f040 81d3 	bne.w	800202c <TJC_USART+0x424>
 8001c86:	2005      	movs	r0, #5
 8001c88:	f004 f9c6 	bl	8006018 <read1BFromRingBuff>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2bff      	cmp	r3, #255	@ 0xff
 8001c90:	f040 81cc 	bne.w	800202c <TJC_USART+0x424>
	{
		if ((u(1) == 0x00))
 8001c94:	2001      	movs	r0, #1
 8001c96:	f004 f9bf 	bl	8006018 <read1BFromRingBuff>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d125      	bne.n	8001cec <TJC_USART+0xe4>
		{ // 长度检测
			TJCPrintf("t5.txt=\"正在检测\"");
 8001ca0:	48c3      	ldr	r0, [pc, #780]	@ (8001fb0 <TJC_USART+0x3a8>)
 8001ca2:	f004 f8ab 	bl	8005dfc <TJCPrintf>
			TJCPrintf("x1.val=%d",(int)(0*100));
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	48c2      	ldr	r0, [pc, #776]	@ (8001fb4 <TJC_USART+0x3ac>)
 8001caa:	f004 f8a7 	bl	8005dfc <TJCPrintf>
			TJCPrintf("t8.txt=\" \"");
 8001cae:	48c2      	ldr	r0, [pc, #776]	@ (8001fb8 <TJC_USART+0x3b0>)
 8001cb0:	f004 f8a4 	bl	8005dfc <TJCPrintf>
			TJCPrintf("t6.txt=\"开路\"");
 8001cb4:	48c1      	ldr	r0, [pc, #772]	@ (8001fbc <TJC_USART+0x3b4>)
 8001cb6:	f004 f8a1 	bl	8005dfc <TJCPrintf>
			calculate_length();
 8001cba:	f7ff fe81 	bl	80019c0 <calculate_length>
			TJCPrintf("t5.txt=\"结果保持\"");
 8001cbe:	48c0      	ldr	r0, [pc, #768]	@ (8001fc0 <TJC_USART+0x3b8>)
 8001cc0:	f004 f89c 	bl	8005dfc <TJCPrintf>
			TJCPrintf("x0.val=%d",(int)(length * 10000));
 8001cc4:	4bbf      	ldr	r3, [pc, #764]	@ (8001fc4 <TJC_USART+0x3bc>)
 8001cc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cca:	a3a1      	add	r3, pc, #644	@ (adr r3, 8001f50 <TJC_USART+0x348>)
 8001ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd0:	f7fe fc92 	bl	80005f8 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f7fe ff3c 	bl	8000b58 <__aeabi_d2iz>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	48b8      	ldr	r0, [pc, #736]	@ (8001fc8 <TJC_USART+0x3c0>)
 8001ce6:	f004 f889 	bl	8005dfc <TJCPrintf>
 8001cea:	e19c      	b.n	8002026 <TJC_USART+0x41e>

		}
		else if (u(1) == 0x01)
 8001cec:	2001      	movs	r0, #1
 8001cee:	f004 f993 	bl	8006018 <read1BFromRingBuff>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	f040 8196 	bne.w	8002026 <TJC_USART+0x41e>
		{ // 负载检测
			TJCPrintf("t5.txt=\"正在检测\"");
 8001cfa:	48ad      	ldr	r0, [pc, #692]	@ (8001fb0 <TJC_USART+0x3a8>)
 8001cfc:	f004 f87e 	bl	8005dfc <TJCPrintf>
			recalculate();
 8001d00:	f7ff ff2e 	bl	8001b60 <recalculate>
			type = judge_type(connect_freq);
 8001d04:	4bb1      	ldr	r3, [pc, #708]	@ (8001fcc <TJC_USART+0x3c4>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f7fe ff4b 	bl	8000ba8 <__aeabi_d2f>
 8001d12:	4603      	mov	r3, r0
 8001d14:	ee00 3a10 	vmov	s0, r3
 8001d18:	f7ff fe20 	bl	800195c <judge_type>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4aac      	ldr	r2, [pc, #688]	@ (8001fd0 <TJC_USART+0x3c8>)
 8001d20:	6013      	str	r3, [r2, #0]

			  if(type == c_flag)
 8001d22:	4bab      	ldr	r3, [pc, #684]	@ (8001fd0 <TJC_USART+0x3c8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	f040 809d 	bne.w	8001e66 <TJC_USART+0x25e>
			  {
				  //计算连接后的乘积
				  double sum_connect = (-0.4052)*connect_freq/1000+60.846;
 8001d2c:	4ba7      	ldr	r3, [pc, #668]	@ (8001fcc <TJC_USART+0x3c4>)
 8001d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d32:	a389      	add	r3, pc, #548	@ (adr r3, 8001f58 <TJC_USART+0x350>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f7fe fc5e 	bl	80005f8 <__aeabi_dmul>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	4ba2      	ldr	r3, [pc, #648]	@ (8001fd4 <TJC_USART+0x3cc>)
 8001d4a:	f7fe fd7f 	bl	800084c <__aeabi_ddiv>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4610      	mov	r0, r2
 8001d54:	4619      	mov	r1, r3
 8001d56:	a382      	add	r3, pc, #520	@ (adr r3, 8001f60 <TJC_USART+0x358>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fa96 	bl	800028c <__adddf3>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	e9c7 2306 	strd	r2, r3, [r7, #24]
				  //计算连接后的等效电缆长度
				  double length_connect = sum_connect/(connect_freq/1000);
 8001d68:	4b98      	ldr	r3, [pc, #608]	@ (8001fcc <TJC_USART+0x3c4>)
 8001d6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	4b98      	ldr	r3, [pc, #608]	@ (8001fd4 <TJC_USART+0x3cc>)
 8001d74:	f7fe fd6a 	bl	800084c <__aeabi_ddiv>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d80:	f7fe fd64 	bl	800084c <__aeabi_ddiv>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	e9c7 2304 	strd	r2, r3, [r7, #16]
				  //根据电缆电容线密度，由等效长度算出等效电容大小
				  double C_connect = length_connect*line_density_slope+line_density_intercept;
 8001d8c:	a376      	add	r3, pc, #472	@ (adr r3, 8001f68 <TJC_USART+0x360>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d96:	f7fe fc2f 	bl	80005f8 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	a373      	add	r3, pc, #460	@ (adr r3, 8001f70 <TJC_USART+0x368>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fa70 	bl	800028c <__adddf3>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	e9c7 2302 	strd	r2, r3, [r7, #8]
				  //算出来的C不对，需要拟合得出正确的结果
				  double real_c = (2.0755*(C_connect-C-add_C)+8.7644)*1.0081-16.524;
 8001db4:	4b88      	ldr	r3, [pc, #544]	@ (8001fd8 <TJC_USART+0x3d0>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dbe:	f7fe fa63 	bl	8000288 <__aeabi_dsub>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	a36b      	add	r3, pc, #428	@ (adr r3, 8001f78 <TJC_USART+0x370>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f7fe fa5a 	bl	8000288 <__aeabi_dsub>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	a368      	add	r3, pc, #416	@ (adr r3, 8001f80 <TJC_USART+0x378>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	f7fe fc09 	bl	80005f8 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	a366      	add	r3, pc, #408	@ (adr r3, 8001f88 <TJC_USART+0x380>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	f7fe fa4a 	bl	800028c <__adddf3>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	a363      	add	r3, pc, #396	@ (adr r3, 8001f90 <TJC_USART+0x388>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fbf7 	bl	80005f8 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	a361      	add	r3, pc, #388	@ (adr r3, 8001f98 <TJC_USART+0x390>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe fa36 	bl	8000288 <__aeabi_dsub>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	e9c7 2300 	strd	r2, r3, [r7]
				  printf("newC=%f\r\n",real_c);
 8001e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e28:	486c      	ldr	r0, [pc, #432]	@ (8001fdc <TJC_USART+0x3d4>)
 8001e2a:	f004 fe41 	bl	8006ab0 <iprintf>
				  TJCPrintf("t6.txt=\"电容\"");
 8001e2e:	486c      	ldr	r0, [pc, #432]	@ (8001fe0 <TJC_USART+0x3d8>)
 8001e30:	f003 ffe4 	bl	8005dfc <TJCPrintf>
				  TJCPrintf("x1.val=%d",(int)(real_c * 100));
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	4b6a      	ldr	r3, [pc, #424]	@ (8001fe4 <TJC_USART+0x3dc>)
 8001e3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e3e:	f7fe fbdb 	bl	80005f8 <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fe85 	bl	8000b58 <__aeabi_d2iz>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4619      	mov	r1, r3
 8001e52:	4858      	ldr	r0, [pc, #352]	@ (8001fb4 <TJC_USART+0x3ac>)
 8001e54:	f003 ffd2 	bl	8005dfc <TJCPrintf>
				  TJCPrintf("t8.txt=\"pF\"");
 8001e58:	4863      	ldr	r0, [pc, #396]	@ (8001fe8 <TJC_USART+0x3e0>)
 8001e5a:	f003 ffcf 	bl	8005dfc <TJCPrintf>
				  TJCPrintf("t5.txt=\"结果保持\"");
 8001e5e:	4858      	ldr	r0, [pc, #352]	@ (8001fc0 <TJC_USART+0x3b8>)
 8001e60:	f003 ffcc 	bl	8005dfc <TJCPrintf>
 8001e64:	e0df      	b.n	8002026 <TJC_USART+0x41e>
			  }
			  else if(type == r_flag)
 8001e66:	4b5a      	ldr	r3, [pc, #360]	@ (8001fd0 <TJC_USART+0x3c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	f040 80ce 	bne.w	800200c <TJC_USART+0x404>
			  {
				 //写后续切换继电器操作
			  	 HAL_GPIO_WritePin(Relays_GPIO_Port, Relays_Pin, SET);
 8001e70:	2201      	movs	r2, #1
 8001e72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e76:	485d      	ldr	r0, [pc, #372]	@ (8001fec <TJC_USART+0x3e4>)
 8001e78:	f001 f8f6 	bl	8003068 <HAL_GPIO_WritePin>
			  	 HAL_Delay(100);
 8001e7c:	2064      	movs	r0, #100	@ 0x64
 8001e7e:	f000 fcfd 	bl	800287c <HAL_Delay>

			  	 //分压法测电阻阻值，ADS8688采集电压更准确
			  	 R_vol = get_vol(1);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff f9ec 	bl	8001260 <get_vol>
 8001e88:	ee10 3a10 	vmov	r3, s0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fb5b 	bl	8000548 <__aeabi_f2d>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4956      	ldr	r1, [pc, #344]	@ (8001ff0 <TJC_USART+0x3e8>)
 8001e98:	e9c1 2300 	strd	r2, r3, [r1]
				 printf("R_vol=%f\r\n",R_vol);
 8001e9c:	4b54      	ldr	r3, [pc, #336]	@ (8001ff0 <TJC_USART+0x3e8>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	4854      	ldr	r0, [pc, #336]	@ (8001ff4 <TJC_USART+0x3ec>)
 8001ea4:	f004 fe04 	bl	8006ab0 <iprintf>

			 	 double R = ((R_vol*Rs)/(5-R_vol))*0.98+0.1234;
 8001ea8:	4b51      	ldr	r3, [pc, #324]	@ (8001ff0 <TJC_USART+0x3e8>)
 8001eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	4b51      	ldr	r3, [pc, #324]	@ (8001ff8 <TJC_USART+0x3f0>)
 8001eb4:	f7fe fba0 	bl	80005f8 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	461d      	mov	r5, r3
 8001ec0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff0 <TJC_USART+0x3e8>)
 8001ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec6:	f04f 0000 	mov.w	r0, #0
 8001eca:	494c      	ldr	r1, [pc, #304]	@ (8001ffc <TJC_USART+0x3f4>)
 8001ecc:	f7fe f9dc 	bl	8000288 <__aeabi_dsub>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	f7fe fcb8 	bl	800084c <__aeabi_ddiv>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	a32e      	add	r3, pc, #184	@ (adr r3, 8001fa0 <TJC_USART+0x398>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe fb85 	bl	80005f8 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	a32c      	add	r3, pc, #176	@ (adr r3, 8001fa8 <TJC_USART+0x3a0>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe f9c6 	bl	800028c <__adddf3>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	e9c7 2308 	strd	r2, r3, [r7, #32]
			 	 printf("R=%f\r\n",R);
 8001f08:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f0c:	483c      	ldr	r0, [pc, #240]	@ (8002000 <TJC_USART+0x3f8>)
 8001f0e:	f004 fdcf 	bl	8006ab0 <iprintf>
			 	 TJCPrintf("t6.txt=\"电阻\"");
 8001f12:	483c      	ldr	r0, [pc, #240]	@ (8002004 <TJC_USART+0x3fc>)
 8001f14:	f003 ff72 	bl	8005dfc <TJCPrintf>
			 	 TJCPrintf("x1.val=%d",(int)(R*100));
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b31      	ldr	r3, [pc, #196]	@ (8001fe4 <TJC_USART+0x3dc>)
 8001f1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f22:	f7fe fb69 	bl	80005f8 <__aeabi_dmul>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fe13 	bl	8000b58 <__aeabi_d2iz>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4619      	mov	r1, r3
 8001f36:	481f      	ldr	r0, [pc, #124]	@ (8001fb4 <TJC_USART+0x3ac>)
 8001f38:	f003 ff60 	bl	8005dfc <TJCPrintf>
			 	 TJCPrintf("t8.txt=\"Ω\"");
 8001f3c:	4832      	ldr	r0, [pc, #200]	@ (8002008 <TJC_USART+0x400>)
 8001f3e:	f003 ff5d 	bl	8005dfc <TJCPrintf>
			 	 TJCPrintf("t5.txt=\"结果保持\"");
 8001f42:	481f      	ldr	r0, [pc, #124]	@ (8001fc0 <TJC_USART+0x3b8>)
 8001f44:	f003 ff5a 	bl	8005dfc <TJCPrintf>
 8001f48:	e06d      	b.n	8002026 <TJC_USART+0x41e>
 8001f4a:	bf00      	nop
 8001f4c:	f3af 8000 	nop.w
 8001f50:	00000000 	.word	0x00000000
 8001f54:	40c38800 	.word	0x40c38800
 8001f58:	fb15b574 	.word	0xfb15b574
 8001f5c:	bfd9eecb 	.word	0xbfd9eecb
 8001f60:	ba5e353f 	.word	0xba5e353f
 8001f64:	404e6c49 	.word	0x404e6c49
 8001f68:	4189374c 	.word	0x4189374c
 8001f6c:	40471560 	.word	0x40471560
 8001f70:	b645a1cb 	.word	0xb645a1cb
 8001f74:	4032fdf3 	.word	0x4032fdf3
 8001f78:	66666666 	.word	0x66666666
 8001f7c:	3ffe6666 	.word	0x3ffe6666
 8001f80:	be76c8b4 	.word	0xbe76c8b4
 8001f84:	40009a9f 	.word	0x40009a9f
 8001f88:	6fd21ff3 	.word	0x6fd21ff3
 8001f8c:	4021875f 	.word	0x4021875f
 8001f90:	77318fc5 	.word	0x77318fc5
 8001f94:	3ff0212d 	.word	0x3ff0212d
 8001f98:	dd2f1aa0 	.word	0xdd2f1aa0
 8001f9c:	40308624 	.word	0x40308624
 8001fa0:	f5c28f5c 	.word	0xf5c28f5c
 8001fa4:	3fef5c28 	.word	0x3fef5c28
 8001fa8:	74538ef3 	.word	0x74538ef3
 8001fac:	3fbf9724 	.word	0x3fbf9724
 8001fb0:	08008db0 	.word	0x08008db0
 8001fb4:	08008dc8 	.word	0x08008dc8
 8001fb8:	08008dd4 	.word	0x08008dd4
 8001fbc:	08008de0 	.word	0x08008de0
 8001fc0:	08008df0 	.word	0x08008df0
 8001fc4:	20000230 	.word	0x20000230
 8001fc8:	08008e08 	.word	0x08008e08
 8001fcc:	20000240 	.word	0x20000240
 8001fd0:	20000250 	.word	0x20000250
 8001fd4:	408f4000 	.word	0x408f4000
 8001fd8:	20000238 	.word	0x20000238
 8001fdc:	08008e14 	.word	0x08008e14
 8001fe0:	08008e20 	.word	0x08008e20
 8001fe4:	40590000 	.word	0x40590000
 8001fe8:	08008e30 	.word	0x08008e30
 8001fec:	40020c00 	.word	0x40020c00
 8001ff0:	20000248 	.word	0x20000248
 8001ff4:	08008e3c 	.word	0x08008e3c
 8001ff8:	40348000 	.word	0x40348000
 8001ffc:	40140000 	.word	0x40140000
 8002000:	08008e48 	.word	0x08008e48
 8002004:	08008e50 	.word	0x08008e50
 8002008:	08008e60 	.word	0x08008e60
			  }
			  else
			  {
				  TJCPrintf("x1.val=%d",(int)(0*100));
 800200c:	2100      	movs	r1, #0
 800200e:	4809      	ldr	r0, [pc, #36]	@ (8002034 <TJC_USART+0x42c>)
 8002010:	f003 fef4 	bl	8005dfc <TJCPrintf>
				  TJCPrintf("t8.txt=\" \"");
 8002014:	4808      	ldr	r0, [pc, #32]	@ (8002038 <TJC_USART+0x430>)
 8002016:	f003 fef1 	bl	8005dfc <TJCPrintf>
				  TJCPrintf("t6.txt=\"开路\"");
 800201a:	4808      	ldr	r0, [pc, #32]	@ (800203c <TJC_USART+0x434>)
 800201c:	f003 feee 	bl	8005dfc <TJCPrintf>
				  TJCPrintf("t5.txt=\"结果保持\"");
 8002020:	4807      	ldr	r0, [pc, #28]	@ (8002040 <TJC_USART+0x438>)
 8002022:	f003 feeb 	bl	8005dfc <TJCPrintf>
				  //开路，什么也不操作
			  }
		}
		udelete(6);
 8002026:	2006      	movs	r0, #6
 8002028:	f003 ffba 	bl	8005fa0 <deleteRingBuff>
	}
}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	@ 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bdb0      	pop	{r4, r5, r7, pc}
 8002034:	08008dc8 	.word	0x08008dc8
 8002038:	08008dd4 	.word	0x08008dd4
 800203c:	08008de0 	.word	0x08008de0
 8002040:	08008df0 	.word	0x08008df0

08002044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002048:	b672      	cpsid	i
}
 800204a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <Error_Handler+0x8>

08002050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <HAL_MspInit+0x4c>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	4a0f      	ldr	r2, [pc, #60]	@ (800209c <HAL_MspInit+0x4c>)
 8002060:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002064:	6453      	str	r3, [r2, #68]	@ 0x44
 8002066:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <HAL_MspInit+0x4c>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_MspInit+0x4c>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	4a08      	ldr	r2, [pc, #32]	@ (800209c <HAL_MspInit+0x4c>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002080:	6413      	str	r3, [r2, #64]	@ 0x40
 8002082:	4b06      	ldr	r3, [pc, #24]	@ (800209c <HAL_MspInit+0x4c>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800

080020a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <NMI_Handler+0x4>

080020a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <HardFault_Handler+0x4>

080020b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <MemManage_Handler+0x4>

080020b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <BusFault_Handler+0x4>

080020c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <UsageFault_Handler+0x4>

080020c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f6:	f000 fba1 	bl	800283c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <TIM1_CC_IRQHandler+0x10>)
 8002106:	f001 ff6f 	bl	8003fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000258 	.word	0x20000258

08002114 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <USART3_IRQHandler+0x10>)
 800211a:	f002 ff19 	bl	8004f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000330 	.word	0x20000330

08002128 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return 1;
 800212c:	2301      	movs	r3, #1
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_kill>:

int _kill(int pid, int sig)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002142:	f004 fd95 	bl	8006c70 <__errno>
 8002146:	4603      	mov	r3, r0
 8002148:	2216      	movs	r2, #22
 800214a:	601a      	str	r2, [r3, #0]
  return -1;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_exit>:

void _exit (int status)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ffe7 	bl	8002138 <_kill>
  while (1) {}    /* Make sure we hang here */
 800216a:	bf00      	nop
 800216c:	e7fd      	b.n	800216a <_exit+0x12>

0800216e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e00a      	b.n	8002196 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002180:	f000 fabe 	bl	8002700 <__io_getchar>
 8002184:	4601      	mov	r1, r0
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	60ba      	str	r2, [r7, #8]
 800218c:	b2ca      	uxtb	r2, r1
 800218e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3301      	adds	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	dbf0      	blt.n	8002180 <_read+0x12>
  }

  return len;
 800219e:	687b      	ldr	r3, [r7, #4]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	e009      	b.n	80021ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	60ba      	str	r2, [r7, #8]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fa8a 	bl	80026dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3301      	adds	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	dbf1      	blt.n	80021ba <_write+0x12>
  }
  return len;
 80021d6:	687b      	ldr	r3, [r7, #4]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_close>:

int _close(int file)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002208:	605a      	str	r2, [r3, #4]
  return 0;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_isatty>:

int _isatty(int file)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002220:	2301      	movs	r3, #1
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002250:	4a14      	ldr	r2, [pc, #80]	@ (80022a4 <_sbrk+0x5c>)
 8002252:	4b15      	ldr	r3, [pc, #84]	@ (80022a8 <_sbrk+0x60>)
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800225c:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002264:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <_sbrk+0x64>)
 8002266:	4a12      	ldr	r2, [pc, #72]	@ (80022b0 <_sbrk+0x68>)
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226a:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <_sbrk+0x64>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	429a      	cmp	r2, r3
 8002276:	d207      	bcs.n	8002288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002278:	f004 fcfa 	bl	8006c70 <__errno>
 800227c:	4603      	mov	r3, r0
 800227e:	220c      	movs	r2, #12
 8002280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
 8002286:	e009      	b.n	800229c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002288:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228e:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	4a05      	ldr	r2, [pc, #20]	@ (80022ac <_sbrk+0x64>)
 8002298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20020000 	.word	0x20020000
 80022a8:	00000400 	.word	0x00000400
 80022ac:	20000254 	.word	0x20000254
 80022b0:	200006c8 	.word	0x200006c8

080022b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b8:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <SystemInit+0x20>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022be:	4a05      	ldr	r2, [pc, #20]	@ (80022d4 <SystemInit+0x20>)
 80022c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	@ 0x28
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022de:	f107 0318 	add.w	r3, r7, #24
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022f6:	463b      	mov	r3, r7
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002302:	4b2d      	ldr	r3, [pc, #180]	@ (80023b8 <MX_TIM1_Init+0xe0>)
 8002304:	4a2d      	ldr	r2, [pc, #180]	@ (80023bc <MX_TIM1_Init+0xe4>)
 8002306:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8002308:	4b2b      	ldr	r3, [pc, #172]	@ (80023b8 <MX_TIM1_Init+0xe0>)
 800230a:	2201      	movs	r2, #1
 800230c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230e:	4b2a      	ldr	r3, [pc, #168]	@ (80023b8 <MX_TIM1_Init+0xe0>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002314:	4b28      	ldr	r3, [pc, #160]	@ (80023b8 <MX_TIM1_Init+0xe0>)
 8002316:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800231a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231c:	4b26      	ldr	r3, [pc, #152]	@ (80023b8 <MX_TIM1_Init+0xe0>)
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002322:	4b25      	ldr	r3, [pc, #148]	@ (80023b8 <MX_TIM1_Init+0xe0>)
 8002324:	2200      	movs	r2, #0
 8002326:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002328:	4b23      	ldr	r3, [pc, #140]	@ (80023b8 <MX_TIM1_Init+0xe0>)
 800232a:	2200      	movs	r2, #0
 800232c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800232e:	4822      	ldr	r0, [pc, #136]	@ (80023b8 <MX_TIM1_Init+0xe0>)
 8002330:	f001 fb4c 	bl	80039cc <HAL_TIM_Base_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800233a:	f7ff fe83 	bl	8002044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800233e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002342:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002344:	f107 0318 	add.w	r3, r7, #24
 8002348:	4619      	mov	r1, r3
 800234a:	481b      	ldr	r0, [pc, #108]	@ (80023b8 <MX_TIM1_Init+0xe0>)
 800234c:	f001 ffd8 	bl	8004300 <HAL_TIM_ConfigClockSource>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002356:	f7ff fe75 	bl	8002044 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800235a:	4817      	ldr	r0, [pc, #92]	@ (80023b8 <MX_TIM1_Init+0xe0>)
 800235c:	f001 fc15 	bl	8003b8a <HAL_TIM_IC_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002366:	f7ff fe6d 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002372:	f107 0310 	add.w	r3, r7, #16
 8002376:	4619      	mov	r1, r3
 8002378:	480f      	ldr	r0, [pc, #60]	@ (80023b8 <MX_TIM1_Init+0xe0>)
 800237a:	f002 fb8b 	bl	8004a94 <HAL_TIMEx_MasterConfigSynchronization>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8002384:	f7ff fe5e 	bl	8002044 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002388:	2300      	movs	r3, #0
 800238a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800238c:	2301      	movs	r3, #1
 800238e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002398:	463b      	mov	r3, r7
 800239a:	2208      	movs	r2, #8
 800239c:	4619      	mov	r1, r3
 800239e:	4806      	ldr	r0, [pc, #24]	@ (80023b8 <MX_TIM1_Init+0xe0>)
 80023a0:	f001 ff12 	bl	80041c8 <HAL_TIM_IC_ConfigChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80023aa:	f7ff fe4b 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023ae:	bf00      	nop
 80023b0:	3728      	adds	r7, #40	@ 0x28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000258 	.word	0x20000258
 80023bc:	40010000 	.word	0x40010000

080023c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023c6:	f107 0308 	add.w	r3, r7, #8
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d4:	463b      	mov	r3, r7
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002450 <MX_TIM3_Init+0x90>)
 80023de:	4a1d      	ldr	r2, [pc, #116]	@ (8002454 <MX_TIM3_Init+0x94>)
 80023e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 80023e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002450 <MX_TIM3_Init+0x90>)
 80023e4:	2209      	movs	r2, #9
 80023e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e8:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <MX_TIM3_Init+0x90>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80023ee:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <MX_TIM3_Init+0x90>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f4:	4b16      	ldr	r3, [pc, #88]	@ (8002450 <MX_TIM3_Init+0x90>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <MX_TIM3_Init+0x90>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002400:	4813      	ldr	r0, [pc, #76]	@ (8002450 <MX_TIM3_Init+0x90>)
 8002402:	f001 fae3 	bl	80039cc <HAL_TIM_Base_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800240c:	f7ff fe1a 	bl	8002044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002414:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	4619      	mov	r1, r3
 800241c:	480c      	ldr	r0, [pc, #48]	@ (8002450 <MX_TIM3_Init+0x90>)
 800241e:	f001 ff6f 	bl	8004300 <HAL_TIM_ConfigClockSource>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002428:	f7ff fe0c 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800242c:	2320      	movs	r3, #32
 800242e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002434:	463b      	mov	r3, r7
 8002436:	4619      	mov	r1, r3
 8002438:	4805      	ldr	r0, [pc, #20]	@ (8002450 <MX_TIM3_Init+0x90>)
 800243a:	f002 fb2b 	bl	8004a94 <HAL_TIMEx_MasterConfigSynchronization>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002444:	f7ff fdfe 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002448:	bf00      	nop
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002a0 	.word	0x200002a0
 8002454:	40000400 	.word	0x40000400

08002458 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a27      	ldr	r2, [pc, #156]	@ (8002514 <HAL_TIM_Base_MspInit+0xbc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d135      	bne.n	80024e6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	4b26      	ldr	r3, [pc, #152]	@ (8002518 <HAL_TIM_Base_MspInit+0xc0>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	4a25      	ldr	r2, [pc, #148]	@ (8002518 <HAL_TIM_Base_MspInit+0xc0>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6453      	str	r3, [r2, #68]	@ 0x44
 800248a:	4b23      	ldr	r3, [pc, #140]	@ (8002518 <HAL_TIM_Base_MspInit+0xc0>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b1f      	ldr	r3, [pc, #124]	@ (8002518 <HAL_TIM_Base_MspInit+0xc0>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	4a1e      	ldr	r2, [pc, #120]	@ (8002518 <HAL_TIM_Base_MspInit+0xc0>)
 80024a0:	f043 0310 	orr.w	r3, r3, #16
 80024a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002518 <HAL_TIM_Base_MspInit+0xc0>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2300      	movs	r3, #0
 80024c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4619      	mov	r1, r3
 80024ce:	4813      	ldr	r0, [pc, #76]	@ (800251c <HAL_TIM_Base_MspInit+0xc4>)
 80024d0:	f000 fc16 	bl	8002d00 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2100      	movs	r1, #0
 80024d8:	201b      	movs	r0, #27
 80024da:	f000 face 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80024de:	201b      	movs	r0, #27
 80024e0:	f000 fae7 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80024e4:	e012      	b.n	800250c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002520 <HAL_TIM_Base_MspInit+0xc8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d10d      	bne.n	800250c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <HAL_TIM_Base_MspInit+0xc0>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	4a07      	ldr	r2, [pc, #28]	@ (8002518 <HAL_TIM_Base_MspInit+0xc0>)
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <HAL_TIM_Base_MspInit+0xc0>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	68bb      	ldr	r3, [r7, #8]
}
 800250c:	bf00      	nop
 800250e:	3728      	adds	r7, #40	@ 0x28
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40010000 	.word	0x40010000
 8002518:	40023800 	.word	0x40023800
 800251c:	40021000 	.word	0x40021000
 8002520:	40000400 	.word	0x40000400

08002524 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002528:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <MX_USART1_UART_Init+0x4c>)
 800252a:	4a12      	ldr	r2, [pc, #72]	@ (8002574 <MX_USART1_UART_Init+0x50>)
 800252c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800252e:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <MX_USART1_UART_Init+0x4c>)
 8002530:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002536:	4b0e      	ldr	r3, [pc, #56]	@ (8002570 <MX_USART1_UART_Init+0x4c>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <MX_USART1_UART_Init+0x4c>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002542:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <MX_USART1_UART_Init+0x4c>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002548:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <MX_USART1_UART_Init+0x4c>)
 800254a:	220c      	movs	r2, #12
 800254c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <MX_USART1_UART_Init+0x4c>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002554:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <MX_USART1_UART_Init+0x4c>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800255a:	4805      	ldr	r0, [pc, #20]	@ (8002570 <MX_USART1_UART_Init+0x4c>)
 800255c:	f002 fb2a 	bl	8004bb4 <HAL_UART_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002566:	f7ff fd6d 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200002e8 	.word	0x200002e8
 8002574:	40011000 	.word	0x40011000

08002578 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800257c:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <MX_USART3_UART_Init+0x4c>)
 800257e:	4a12      	ldr	r2, [pc, #72]	@ (80025c8 <MX_USART3_UART_Init+0x50>)
 8002580:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002582:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <MX_USART3_UART_Init+0x4c>)
 8002584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002588:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800258a:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <MX_USART3_UART_Init+0x4c>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002590:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <MX_USART3_UART_Init+0x4c>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002596:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <MX_USART3_UART_Init+0x4c>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800259c:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <MX_USART3_UART_Init+0x4c>)
 800259e:	220c      	movs	r2, #12
 80025a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a2:	4b08      	ldr	r3, [pc, #32]	@ (80025c4 <MX_USART3_UART_Init+0x4c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a8:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <MX_USART3_UART_Init+0x4c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025ae:	4805      	ldr	r0, [pc, #20]	@ (80025c4 <MX_USART3_UART_Init+0x4c>)
 80025b0:	f002 fb00 	bl	8004bb4 <HAL_UART_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80025ba:	f7ff fd43 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000330 	.word	0x20000330
 80025c8:	40004800 	.word	0x40004800

080025cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	@ 0x30
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 031c 	add.w	r3, r7, #28
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a37      	ldr	r2, [pc, #220]	@ (80026c8 <HAL_UART_MspInit+0xfc>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d12d      	bne.n	800264a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	4b36      	ldr	r3, [pc, #216]	@ (80026cc <HAL_UART_MspInit+0x100>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	4a35      	ldr	r2, [pc, #212]	@ (80026cc <HAL_UART_MspInit+0x100>)
 80025f8:	f043 0310 	orr.w	r3, r3, #16
 80025fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025fe:	4b33      	ldr	r3, [pc, #204]	@ (80026cc <HAL_UART_MspInit+0x100>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	4b2f      	ldr	r3, [pc, #188]	@ (80026cc <HAL_UART_MspInit+0x100>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	4a2e      	ldr	r2, [pc, #184]	@ (80026cc <HAL_UART_MspInit+0x100>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6313      	str	r3, [r2, #48]	@ 0x30
 800261a:	4b2c      	ldr	r3, [pc, #176]	@ (80026cc <HAL_UART_MspInit+0x100>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002626:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800262a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	2302      	movs	r3, #2
 800262e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002634:	2303      	movs	r3, #3
 8002636:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002638:	2307      	movs	r3, #7
 800263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	4619      	mov	r1, r3
 8002642:	4823      	ldr	r0, [pc, #140]	@ (80026d0 <HAL_UART_MspInit+0x104>)
 8002644:	f000 fb5c 	bl	8002d00 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002648:	e039      	b.n	80026be <HAL_UART_MspInit+0xf2>
  else if(uartHandle->Instance==USART3)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a21      	ldr	r2, [pc, #132]	@ (80026d4 <HAL_UART_MspInit+0x108>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d134      	bne.n	80026be <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	4b1c      	ldr	r3, [pc, #112]	@ (80026cc <HAL_UART_MspInit+0x100>)
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	4a1b      	ldr	r2, [pc, #108]	@ (80026cc <HAL_UART_MspInit+0x100>)
 800265e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002662:	6413      	str	r3, [r2, #64]	@ 0x40
 8002664:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <HAL_UART_MspInit+0x100>)
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <HAL_UART_MspInit+0x100>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002678:	4a14      	ldr	r2, [pc, #80]	@ (80026cc <HAL_UART_MspInit+0x100>)
 800267a:	f043 0302 	orr.w	r3, r3, #2
 800267e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002680:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <HAL_UART_MspInit+0x100>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800268c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269a:	2303      	movs	r3, #3
 800269c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800269e:	2307      	movs	r3, #7
 80026a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a2:	f107 031c 	add.w	r3, r7, #28
 80026a6:	4619      	mov	r1, r3
 80026a8:	480b      	ldr	r0, [pc, #44]	@ (80026d8 <HAL_UART_MspInit+0x10c>)
 80026aa:	f000 fb29 	bl	8002d00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	2027      	movs	r0, #39	@ 0x27
 80026b4:	f000 f9e1 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80026b8:	2027      	movs	r0, #39	@ 0x27
 80026ba:	f000 f9fa 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
}
 80026be:	bf00      	nop
 80026c0:	3730      	adds	r7, #48	@ 0x30
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40011000 	.word	0x40011000
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020000 	.word	0x40020000
 80026d4:	40004800 	.word	0x40004800
 80026d8:	40020400 	.word	0x40020400

080026dc <__io_putchar>:
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)

#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80026e4:	1d39      	adds	r1, r7, #4
 80026e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026ea:	2201      	movs	r2, #1
 80026ec:	4803      	ldr	r0, [pc, #12]	@ (80026fc <__io_putchar+0x20>)
 80026ee:	f002 fab1 	bl	8004c54 <HAL_UART_Transmit>

	return ch;
 80026f2:	687b      	ldr	r3, [r7, #4]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	200002e8 	.word	0x200002e8

08002700 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	uint8_t ch = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Receive(&huart1,(uint8_t *)&ch, 1, 0xFFFF);
 800270c:	f107 010f 	add.w	r1, r7, #15
 8002710:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002714:	2201      	movs	r2, #1
 8002716:	480a      	ldr	r0, [pc, #40]	@ (8002740 <__io_getchar+0x40>)
 8002718:	f002 fb27 	bl	8004d6a <HAL_UART_Receive>

	if (ch == '\r')
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b0d      	cmp	r3, #13
 8002720:	d104      	bne.n	800272c <__io_getchar+0x2c>
	{
		__io_putchar('\r');
 8002722:	200d      	movs	r0, #13
 8002724:	f7ff ffda 	bl	80026dc <__io_putchar>
		ch = '\n';
 8002728:	230a      	movs	r3, #10
 800272a:	73fb      	strb	r3, [r7, #15]
	}


	return __io_putchar(ch);
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff ffd4 	bl	80026dc <__io_putchar>
 8002734:	4603      	mov	r3, r0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200002e8 	.word	0x200002e8

08002744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002744:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800277c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002748:	f7ff fdb4 	bl	80022b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800274c:	480c      	ldr	r0, [pc, #48]	@ (8002780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800274e:	490d      	ldr	r1, [pc, #52]	@ (8002784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002750:	4a0d      	ldr	r2, [pc, #52]	@ (8002788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002754:	e002      	b.n	800275c <LoopCopyDataInit>

08002756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800275a:	3304      	adds	r3, #4

0800275c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800275c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800275e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002760:	d3f9      	bcc.n	8002756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002762:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002764:	4c0a      	ldr	r4, [pc, #40]	@ (8002790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002768:	e001      	b.n	800276e <LoopFillZerobss>

0800276a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800276a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800276c:	3204      	adds	r2, #4

0800276e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800276e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002770:	d3fb      	bcc.n	800276a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002772:	f004 fa83 	bl	8006c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002776:	f7ff f85b 	bl	8001830 <main>
  bx  lr    
 800277a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800277c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002784:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002788:	08009208 	.word	0x08009208
  ldr r2, =_sbss
 800278c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002790:	200006c8 	.word	0x200006c8

08002794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002794:	e7fe      	b.n	8002794 <ADC_IRQHandler>
	...

08002798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800279c:	4b0e      	ldr	r3, [pc, #56]	@ (80027d8 <HAL_Init+0x40>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0d      	ldr	r2, [pc, #52]	@ (80027d8 <HAL_Init+0x40>)
 80027a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027a8:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <HAL_Init+0x40>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0a      	ldr	r2, [pc, #40]	@ (80027d8 <HAL_Init+0x40>)
 80027ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b4:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <HAL_Init+0x40>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a07      	ldr	r2, [pc, #28]	@ (80027d8 <HAL_Init+0x40>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c0:	2003      	movs	r0, #3
 80027c2:	f000 f94f 	bl	8002a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f000 f808 	bl	80027dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027cc:	f7ff fc40 	bl	8002050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023c00 	.word	0x40023c00

080027dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027e4:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <HAL_InitTick+0x54>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <HAL_InitTick+0x58>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	4619      	mov	r1, r3
 80027ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f967 	bl	8002ace <HAL_SYSTICK_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e00e      	b.n	8002828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b0f      	cmp	r3, #15
 800280e:	d80a      	bhi.n	8002826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002810:	2200      	movs	r2, #0
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	f04f 30ff 	mov.w	r0, #4294967295
 8002818:	f000 f92f 	bl	8002a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800281c:	4a06      	ldr	r2, [pc, #24]	@ (8002838 <HAL_InitTick+0x5c>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	e000      	b.n	8002828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000000 	.word	0x20000000
 8002834:	20000008 	.word	0x20000008
 8002838:	20000004 	.word	0x20000004

0800283c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002840:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_IncTick+0x20>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <HAL_IncTick+0x24>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4413      	add	r3, r2
 800284c:	4a04      	ldr	r2, [pc, #16]	@ (8002860 <HAL_IncTick+0x24>)
 800284e:	6013      	str	r3, [r2, #0]
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000008 	.word	0x20000008
 8002860:	20000378 	.word	0x20000378

08002864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return uwTick;
 8002868:	4b03      	ldr	r3, [pc, #12]	@ (8002878 <HAL_GetTick+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000378 	.word	0x20000378

0800287c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002884:	f7ff ffee 	bl	8002864 <HAL_GetTick>
 8002888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002894:	d005      	beq.n	80028a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002896:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <HAL_Delay+0x44>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028a2:	bf00      	nop
 80028a4:	f7ff ffde 	bl	8002864 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d8f7      	bhi.n	80028a4 <HAL_Delay+0x28>
  {
  }
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000008 	.word	0x20000008

080028c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028e0:	4013      	ands	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028f6:	4a04      	ldr	r2, [pc, #16]	@ (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	60d3      	str	r3, [r2, #12]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002910:	4b04      	ldr	r3, [pc, #16]	@ (8002924 <__NVIC_GetPriorityGrouping+0x18>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	f003 0307 	and.w	r3, r3, #7
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	2b00      	cmp	r3, #0
 8002938:	db0b      	blt.n	8002952 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	f003 021f 	and.w	r2, r3, #31
 8002940:	4907      	ldr	r1, [pc, #28]	@ (8002960 <__NVIC_EnableIRQ+0x38>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2001      	movs	r0, #1
 800294a:	fa00 f202 	lsl.w	r2, r0, r2
 800294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000e100 	.word	0xe000e100

08002964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	@ (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	@ (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	@ 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
         );
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	@ 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a30:	d301      	bcc.n	8002a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00f      	b.n	8002a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a36:	4a0a      	ldr	r2, [pc, #40]	@ (8002a60 <SysTick_Config+0x40>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3e:	210f      	movs	r1, #15
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	f7ff ff8e 	bl	8002964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a48:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <SysTick_Config+0x40>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4e:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <SysTick_Config+0x40>)
 8002a50:	2207      	movs	r2, #7
 8002a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	e000e010 	.word	0xe000e010

08002a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff ff29 	bl	80028c4 <__NVIC_SetPriorityGrouping>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a8c:	f7ff ff3e 	bl	800290c <__NVIC_GetPriorityGrouping>
 8002a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	6978      	ldr	r0, [r7, #20]
 8002a98:	f7ff ff8e 	bl	80029b8 <NVIC_EncodePriority>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff5d 	bl	8002964 <__NVIC_SetPriority>
}
 8002aaa:	bf00      	nop
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff31 	bl	8002928 <__NVIC_EnableIRQ>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ffa2 	bl	8002a20 <SysTick_Config>
 8002adc:	4603      	mov	r3, r0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e014      	b.n	8002b22 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	791b      	ldrb	r3, [r3, #4]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d105      	bne.n	8002b0e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7fe fd29 	bl	8001560 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b089      	sub	sp, #36	@ 0x24
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <HAL_DAC_ConfigChannel+0x1c>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e042      	b.n	8002bd0 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	795b      	ldrb	r3, [r3, #5]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_DAC_ConfigChannel+0x2c>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e03c      	b.n	8002bd0 <HAL_DAC_ConfigChannel+0xa6>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6819      	ldr	r1, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	22c0      	movs	r2, #192	@ 0xc0
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43da      	mvns	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002bce:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3724      	adds	r7, #36	@ 0x24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bea:	f7ff fe3b 	bl	8002864 <HAL_GetTick>
 8002bee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d008      	beq.n	8002c0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2280      	movs	r2, #128	@ 0x80
 8002c00:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e052      	b.n	8002cb4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0216 	bic.w	r2, r2, #22
 8002c1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <HAL_DMA_Abort+0x62>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0208 	bic.w	r2, r2, #8
 8002c4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c5e:	e013      	b.n	8002c88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c60:	f7ff fe00 	bl	8002864 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b05      	cmp	r3, #5
 8002c6c:	d90c      	bls.n	8002c88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2203      	movs	r2, #3
 8002c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e015      	b.n	8002cb4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1e4      	bne.n	8002c60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9a:	223f      	movs	r2, #63	@ 0x3f
 8002c9c:	409a      	lsls	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d004      	beq.n	8002cda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2280      	movs	r2, #128	@ 0x80
 8002cd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e00c      	b.n	8002cf4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2205      	movs	r2, #5
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	@ 0x24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	e16b      	b.n	8002ff4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	f040 815a 	bne.w	8002fee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d005      	beq.n	8002d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d130      	bne.n	8002db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d88:	2201      	movs	r2, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 0201 	and.w	r2, r3, #1
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d017      	beq.n	8002df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d123      	bne.n	8002e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	08da      	lsrs	r2, r3, #3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3208      	adds	r2, #8
 8002e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	220f      	movs	r2, #15
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	08da      	lsrs	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3208      	adds	r2, #8
 8002e3e:	69b9      	ldr	r1, [r7, #24]
 8002e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	2203      	movs	r2, #3
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0203 	and.w	r2, r3, #3
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80b4 	beq.w	8002fee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b60      	ldr	r3, [pc, #384]	@ (800300c <HAL_GPIO_Init+0x30c>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	4a5f      	ldr	r2, [pc, #380]	@ (800300c <HAL_GPIO_Init+0x30c>)
 8002e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e96:	4b5d      	ldr	r3, [pc, #372]	@ (800300c <HAL_GPIO_Init+0x30c>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8003010 <HAL_GPIO_Init+0x310>)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	220f      	movs	r2, #15
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a52      	ldr	r2, [pc, #328]	@ (8003014 <HAL_GPIO_Init+0x314>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d02b      	beq.n	8002f26 <HAL_GPIO_Init+0x226>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a51      	ldr	r2, [pc, #324]	@ (8003018 <HAL_GPIO_Init+0x318>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d025      	beq.n	8002f22 <HAL_GPIO_Init+0x222>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a50      	ldr	r2, [pc, #320]	@ (800301c <HAL_GPIO_Init+0x31c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01f      	beq.n	8002f1e <HAL_GPIO_Init+0x21e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8003020 <HAL_GPIO_Init+0x320>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d019      	beq.n	8002f1a <HAL_GPIO_Init+0x21a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a4e      	ldr	r2, [pc, #312]	@ (8003024 <HAL_GPIO_Init+0x324>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_GPIO_Init+0x216>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a4d      	ldr	r2, [pc, #308]	@ (8003028 <HAL_GPIO_Init+0x328>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00d      	beq.n	8002f12 <HAL_GPIO_Init+0x212>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800302c <HAL_GPIO_Init+0x32c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <HAL_GPIO_Init+0x20e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4b      	ldr	r2, [pc, #300]	@ (8003030 <HAL_GPIO_Init+0x330>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d101      	bne.n	8002f0a <HAL_GPIO_Init+0x20a>
 8002f06:	2307      	movs	r3, #7
 8002f08:	e00e      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	e00c      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f0e:	2306      	movs	r3, #6
 8002f10:	e00a      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f12:	2305      	movs	r3, #5
 8002f14:	e008      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f16:	2304      	movs	r3, #4
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e004      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e002      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f26:	2300      	movs	r3, #0
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	f002 0203 	and.w	r2, r2, #3
 8002f2e:	0092      	lsls	r2, r2, #2
 8002f30:	4093      	lsls	r3, r2
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f38:	4935      	ldr	r1, [pc, #212]	@ (8003010 <HAL_GPIO_Init+0x310>)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	3302      	adds	r3, #2
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f46:	4b3b      	ldr	r3, [pc, #236]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f6a:	4a32      	ldr	r2, [pc, #200]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f70:	4b30      	ldr	r3, [pc, #192]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f94:	4a27      	ldr	r2, [pc, #156]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f9a:	4b26      	ldr	r3, [pc, #152]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fe8:	4a12      	ldr	r2, [pc, #72]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	61fb      	str	r3, [r7, #28]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b0f      	cmp	r3, #15
 8002ff8:	f67f ae90 	bls.w	8002d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	3724      	adds	r7, #36	@ 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	40013800 	.word	0x40013800
 8003014:	40020000 	.word	0x40020000
 8003018:	40020400 	.word	0x40020400
 800301c:	40020800 	.word	0x40020800
 8003020:	40020c00 	.word	0x40020c00
 8003024:	40021000 	.word	0x40021000
 8003028:	40021400 	.word	0x40021400
 800302c:	40021800 	.word	0x40021800
 8003030:	40021c00 	.word	0x40021c00
 8003034:	40013c00 	.word	0x40013c00

08003038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
 8003054:	e001      	b.n	800305a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
 8003074:	4613      	mov	r3, r2
 8003076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003078:	787b      	ldrb	r3, [r7, #1]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003084:	e003      	b.n	800308e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	041a      	lsls	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	619a      	str	r2, [r3, #24]
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e267      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d075      	beq.n	80031a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ba:	4b88      	ldr	r3, [pc, #544]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d00c      	beq.n	80030e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c6:	4b85      	ldr	r3, [pc, #532]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d112      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d2:	4b82      	ldr	r3, [pc, #520]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030de:	d10b      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e0:	4b7e      	ldr	r3, [pc, #504]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d05b      	beq.n	80031a4 <HAL_RCC_OscConfig+0x108>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d157      	bne.n	80031a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e242      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003100:	d106      	bne.n	8003110 <HAL_RCC_OscConfig+0x74>
 8003102:	4b76      	ldr	r3, [pc, #472]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a75      	ldr	r2, [pc, #468]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e01d      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x98>
 800311a:	4b70      	ldr	r3, [pc, #448]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6f      	ldr	r2, [pc, #444]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b6d      	ldr	r3, [pc, #436]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6c      	ldr	r2, [pc, #432]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003134:	4b69      	ldr	r3, [pc, #420]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a68      	ldr	r2, [pc, #416]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800313a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4b66      	ldr	r3, [pc, #408]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a65      	ldr	r2, [pc, #404]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800314a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7ff fb86 	bl	8002864 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800315c:	f7ff fb82 	bl	8002864 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	@ 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e207      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b5b      	ldr	r3, [pc, #364]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0xc0>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7ff fb72 	bl	8002864 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003184:	f7ff fb6e 	bl	8002864 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	@ 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e1f3      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	4b51      	ldr	r3, [pc, #324]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0xe8>
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d063      	beq.n	800327a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b2:	4b4a      	ldr	r3, [pc, #296]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031be:	4b47      	ldr	r3, [pc, #284]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d11c      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ca:	4b44      	ldr	r3, [pc, #272]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d6:	4b41      	ldr	r3, [pc, #260]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d001      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e1c7      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ee:	4b3b      	ldr	r3, [pc, #236]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4937      	ldr	r1, [pc, #220]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003202:	e03a      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320c:	4b34      	ldr	r3, [pc, #208]	@ (80032e0 <HAL_RCC_OscConfig+0x244>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003212:	f7ff fb27 	bl	8002864 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321a:	f7ff fb23 	bl	8002864 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e1a8      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	4b2b      	ldr	r3, [pc, #172]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	4b28      	ldr	r3, [pc, #160]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4925      	ldr	r1, [pc, #148]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
 800324c:	e015      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324e:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <HAL_RCC_OscConfig+0x244>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7ff fb06 	bl	8002864 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325c:	f7ff fb02 	bl	8002864 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e187      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	4b1b      	ldr	r3, [pc, #108]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d036      	beq.n	80032f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328e:	4b15      	ldr	r3, [pc, #84]	@ (80032e4 <HAL_RCC_OscConfig+0x248>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7ff fae6 	bl	8002864 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329c:	f7ff fae2 	bl	8002864 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e167      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80032b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x200>
 80032ba:	e01b      	b.n	80032f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032bc:	4b09      	ldr	r3, [pc, #36]	@ (80032e4 <HAL_RCC_OscConfig+0x248>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c2:	f7ff facf 	bl	8002864 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c8:	e00e      	b.n	80032e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ca:	f7ff facb 	bl	8002864 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d907      	bls.n	80032e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e150      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
 80032dc:	40023800 	.word	0x40023800
 80032e0:	42470000 	.word	0x42470000
 80032e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	4b88      	ldr	r3, [pc, #544]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1ea      	bne.n	80032ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8097 	beq.w	8003430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003306:	4b81      	ldr	r3, [pc, #516]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10f      	bne.n	8003332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	4b7d      	ldr	r3, [pc, #500]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	4a7c      	ldr	r2, [pc, #496]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	@ 0x40
 8003322:	4b7a      	ldr	r3, [pc, #488]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b77      	ldr	r3, [pc, #476]	@ (8003510 <HAL_RCC_OscConfig+0x474>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333e:	4b74      	ldr	r3, [pc, #464]	@ (8003510 <HAL_RCC_OscConfig+0x474>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a73      	ldr	r2, [pc, #460]	@ (8003510 <HAL_RCC_OscConfig+0x474>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7ff fa8b 	bl	8002864 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7ff fa87 	bl	8002864 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e10c      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	4b6a      	ldr	r3, [pc, #424]	@ (8003510 <HAL_RCC_OscConfig+0x474>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x2ea>
 8003378:	4b64      	ldr	r3, [pc, #400]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337c:	4a63      	ldr	r2, [pc, #396]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	@ 0x70
 8003384:	e01c      	b.n	80033c0 <HAL_RCC_OscConfig+0x324>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b05      	cmp	r3, #5
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x30c>
 800338e:	4b5f      	ldr	r3, [pc, #380]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003392:	4a5e      	ldr	r2, [pc, #376]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6713      	str	r3, [r2, #112]	@ 0x70
 800339a:	4b5c      	ldr	r3, [pc, #368]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339e:	4a5b      	ldr	r2, [pc, #364]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0x324>
 80033a8:	4b58      	ldr	r3, [pc, #352]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ac:	4a57      	ldr	r2, [pc, #348]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b4:	4b55      	ldr	r3, [pc, #340]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b8:	4a54      	ldr	r2, [pc, #336]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033ba:	f023 0304 	bic.w	r3, r3, #4
 80033be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d015      	beq.n	80033f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7ff fa4c 	bl	8002864 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d0:	f7ff fa48 	bl	8002864 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e0cb      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	4b49      	ldr	r3, [pc, #292]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ee      	beq.n	80033d0 <HAL_RCC_OscConfig+0x334>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f4:	f7ff fa36 	bl	8002864 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033fc:	f7ff fa32 	bl	8002864 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e0b5      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003412:	4b3e      	ldr	r3, [pc, #248]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1ee      	bne.n	80033fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003424:	4b39      	ldr	r3, [pc, #228]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	4a38      	ldr	r2, [pc, #224]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800342a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800342e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a1 	beq.w	800357c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800343a:	4b34      	ldr	r3, [pc, #208]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b08      	cmp	r3, #8
 8003444:	d05c      	beq.n	8003500 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d141      	bne.n	80034d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b31      	ldr	r3, [pc, #196]	@ (8003514 <HAL_RCC_OscConfig+0x478>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7ff fa06 	bl	8002864 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345c:	f7ff fa02 	bl	8002864 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e087      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	4b27      	ldr	r3, [pc, #156]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	019b      	lsls	r3, r3, #6
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	3b01      	subs	r3, #1
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	491b      	ldr	r1, [pc, #108]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003514 <HAL_RCC_OscConfig+0x478>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7ff f9db 	bl	8002864 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b2:	f7ff f9d7 	bl	8002864 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e05c      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c4:	4b11      	ldr	r3, [pc, #68]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x416>
 80034d0:	e054      	b.n	800357c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d2:	4b10      	ldr	r3, [pc, #64]	@ (8003514 <HAL_RCC_OscConfig+0x478>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7ff f9c4 	bl	8002864 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e0:	f7ff f9c0 	bl	8002864 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e045      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	4b06      	ldr	r3, [pc, #24]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x444>
 80034fe:	e03d      	b.n	800357c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d107      	bne.n	8003518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e038      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000
 8003514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003518:	4b1b      	ldr	r3, [pc, #108]	@ (8003588 <HAL_RCC_OscConfig+0x4ec>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d028      	beq.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d121      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d11a      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003548:	4013      	ands	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800354e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003550:	4293      	cmp	r3, r2
 8003552:	d111      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	3b01      	subs	r3, #1
 8003562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d107      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0cc      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a0:	4b68      	ldr	r3, [pc, #416]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d90c      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b65      	ldr	r3, [pc, #404]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b63      	ldr	r3, [pc, #396]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0b8      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d020      	beq.n	8003616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e0:	4b59      	ldr	r3, [pc, #356]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4a58      	ldr	r2, [pc, #352]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f8:	4b53      	ldr	r3, [pc, #332]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a52      	ldr	r2, [pc, #328]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	4b50      	ldr	r3, [pc, #320]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	494d      	ldr	r1, [pc, #308]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d044      	beq.n	80036ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b47      	ldr	r3, [pc, #284]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d119      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d003      	beq.n	800364a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003646:	2b03      	cmp	r3, #3
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364a:	4b3f      	ldr	r3, [pc, #252]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365a:	4b3b      	ldr	r3, [pc, #236]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e067      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366a:	4b37      	ldr	r3, [pc, #220]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4934      	ldr	r1, [pc, #208]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	4313      	orrs	r3, r2
 800367a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800367c:	f7ff f8f2 	bl	8002864 <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	e00a      	b.n	800369a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003684:	f7ff f8ee 	bl	8002864 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e04f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	4b2b      	ldr	r3, [pc, #172]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 020c 	and.w	r2, r3, #12
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1eb      	bne.n	8003684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ac:	4b25      	ldr	r3, [pc, #148]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d20c      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b22      	ldr	r3, [pc, #136]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b20      	ldr	r3, [pc, #128]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e032      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	4b19      	ldr	r3, [pc, #100]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4916      	ldr	r1, [pc, #88]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fe:	4b12      	ldr	r3, [pc, #72]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	490e      	ldr	r1, [pc, #56]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003712:	f000 f821 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	490a      	ldr	r1, [pc, #40]	@ (800374c <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	5ccb      	ldrb	r3, [r1, r3]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	4a09      	ldr	r2, [pc, #36]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800372e:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <HAL_RCC_ClockConfig+0x1c8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f852 	bl	80027dc <HAL_InitTick>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023c00 	.word	0x40023c00
 8003748:	40023800 	.word	0x40023800
 800374c:	08008e6c 	.word	0x08008e6c
 8003750:	20000000 	.word	0x20000000
 8003754:	20000004 	.word	0x20000004

08003758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800375c:	b094      	sub	sp, #80	@ 0x50
 800375e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	647b      	str	r3, [r7, #68]	@ 0x44
 8003764:	2300      	movs	r3, #0
 8003766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003768:	2300      	movs	r3, #0
 800376a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003770:	4b79      	ldr	r3, [pc, #484]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b08      	cmp	r3, #8
 800377a:	d00d      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x40>
 800377c:	2b08      	cmp	r3, #8
 800377e:	f200 80e1 	bhi.w	8003944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x34>
 8003786:	2b04      	cmp	r3, #4
 8003788:	d003      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x3a>
 800378a:	e0db      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b73      	ldr	r3, [pc, #460]	@ (800395c <HAL_RCC_GetSysClockFreq+0x204>)
 800378e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003790:	e0db      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003792:	4b73      	ldr	r3, [pc, #460]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x208>)
 8003794:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003796:	e0d8      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003798:	4b6f      	ldr	r3, [pc, #444]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d063      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ae:	4b6a      	ldr	r3, [pc, #424]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	2200      	movs	r2, #0
 80037b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037c2:	2300      	movs	r3, #0
 80037c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80037c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037ca:	4622      	mov	r2, r4
 80037cc:	462b      	mov	r3, r5
 80037ce:	f04f 0000 	mov.w	r0, #0
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	0159      	lsls	r1, r3, #5
 80037d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037dc:	0150      	lsls	r0, r2, #5
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4621      	mov	r1, r4
 80037e4:	1a51      	subs	r1, r2, r1
 80037e6:	6139      	str	r1, [r7, #16]
 80037e8:	4629      	mov	r1, r5
 80037ea:	eb63 0301 	sbc.w	r3, r3, r1
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037fc:	4659      	mov	r1, fp
 80037fe:	018b      	lsls	r3, r1, #6
 8003800:	4651      	mov	r1, sl
 8003802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003806:	4651      	mov	r1, sl
 8003808:	018a      	lsls	r2, r1, #6
 800380a:	4651      	mov	r1, sl
 800380c:	ebb2 0801 	subs.w	r8, r2, r1
 8003810:	4659      	mov	r1, fp
 8003812:	eb63 0901 	sbc.w	r9, r3, r1
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800382a:	4690      	mov	r8, r2
 800382c:	4699      	mov	r9, r3
 800382e:	4623      	mov	r3, r4
 8003830:	eb18 0303 	adds.w	r3, r8, r3
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	462b      	mov	r3, r5
 8003838:	eb49 0303 	adc.w	r3, r9, r3
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800384a:	4629      	mov	r1, r5
 800384c:	024b      	lsls	r3, r1, #9
 800384e:	4621      	mov	r1, r4
 8003850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003854:	4621      	mov	r1, r4
 8003856:	024a      	lsls	r2, r1, #9
 8003858:	4610      	mov	r0, r2
 800385a:	4619      	mov	r1, r3
 800385c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800385e:	2200      	movs	r2, #0
 8003860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003862:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003868:	f7fd f9ee 	bl	8000c48 <__aeabi_uldivmod>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4613      	mov	r3, r2
 8003872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003874:	e058      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003876:	4b38      	ldr	r3, [pc, #224]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	099b      	lsrs	r3, r3, #6
 800387c:	2200      	movs	r2, #0
 800387e:	4618      	mov	r0, r3
 8003880:	4611      	mov	r1, r2
 8003882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003886:	623b      	str	r3, [r7, #32]
 8003888:	2300      	movs	r3, #0
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
 800388c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003890:	4642      	mov	r2, r8
 8003892:	464b      	mov	r3, r9
 8003894:	f04f 0000 	mov.w	r0, #0
 8003898:	f04f 0100 	mov.w	r1, #0
 800389c:	0159      	lsls	r1, r3, #5
 800389e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038a2:	0150      	lsls	r0, r2, #5
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4641      	mov	r1, r8
 80038aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80038ae:	4649      	mov	r1, r9
 80038b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038c8:	ebb2 040a 	subs.w	r4, r2, sl
 80038cc:	eb63 050b 	sbc.w	r5, r3, fp
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	00eb      	lsls	r3, r5, #3
 80038da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038de:	00e2      	lsls	r2, r4, #3
 80038e0:	4614      	mov	r4, r2
 80038e2:	461d      	mov	r5, r3
 80038e4:	4643      	mov	r3, r8
 80038e6:	18e3      	adds	r3, r4, r3
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	464b      	mov	r3, r9
 80038ec:	eb45 0303 	adc.w	r3, r5, r3
 80038f0:	607b      	str	r3, [r7, #4]
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038fe:	4629      	mov	r1, r5
 8003900:	028b      	lsls	r3, r1, #10
 8003902:	4621      	mov	r1, r4
 8003904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003908:	4621      	mov	r1, r4
 800390a:	028a      	lsls	r2, r1, #10
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003912:	2200      	movs	r2, #0
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	61fa      	str	r2, [r7, #28]
 8003918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800391c:	f7fd f994 	bl	8000c48 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4613      	mov	r3, r2
 8003926:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003928:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	3301      	adds	r3, #1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003938:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800393a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003942:	e002      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003944:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_RCC_GetSysClockFreq+0x204>)
 8003946:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800394a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800394c:	4618      	mov	r0, r3
 800394e:	3750      	adds	r7, #80	@ 0x50
 8003950:	46bd      	mov	sp, r7
 8003952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800
 800395c:	00f42400 	.word	0x00f42400
 8003960:	007a1200 	.word	0x007a1200

08003964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003968:	4b03      	ldr	r3, [pc, #12]	@ (8003978 <HAL_RCC_GetHCLKFreq+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000000 	.word	0x20000000

0800397c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003980:	f7ff fff0 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	@ (800399c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0a9b      	lsrs	r3, r3, #10
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4903      	ldr	r1, [pc, #12]	@ (80039a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40023800 	.word	0x40023800
 80039a0:	08008e7c 	.word	0x08008e7c

080039a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039a8:	f7ff ffdc 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	0b5b      	lsrs	r3, r3, #13
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	@ (80039c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	08008e7c 	.word	0x08008e7c

080039cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e041      	b.n	8003a62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fe fd30 	bl	8002458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	f000 fdac 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d001      	beq.n	8003a84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e046      	b.n	8003b12 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a23      	ldr	r2, [pc, #140]	@ (8003b20 <HAL_TIM_Base_Start+0xb4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d022      	beq.n	8003adc <HAL_TIM_Base_Start+0x70>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9e:	d01d      	beq.n	8003adc <HAL_TIM_Base_Start+0x70>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b24 <HAL_TIM_Base_Start+0xb8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d018      	beq.n	8003adc <HAL_TIM_Base_Start+0x70>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1e      	ldr	r2, [pc, #120]	@ (8003b28 <HAL_TIM_Base_Start+0xbc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <HAL_TIM_Base_Start+0x70>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b2c <HAL_TIM_Base_Start+0xc0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00e      	beq.n	8003adc <HAL_TIM_Base_Start+0x70>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b30 <HAL_TIM_Base_Start+0xc4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d009      	beq.n	8003adc <HAL_TIM_Base_Start+0x70>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a19      	ldr	r2, [pc, #100]	@ (8003b34 <HAL_TIM_Base_Start+0xc8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_TIM_Base_Start+0x70>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a18      	ldr	r2, [pc, #96]	@ (8003b38 <HAL_TIM_Base_Start+0xcc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d111      	bne.n	8003b00 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d010      	beq.n	8003b10 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	e007      	b.n	8003b10 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40010000 	.word	0x40010000
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800
 8003b2c:	40000c00 	.word	0x40000c00
 8003b30:	40010400 	.word	0x40010400
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40001800 	.word	0x40001800

08003b3c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6a1a      	ldr	r2, [r3, #32]
 8003b4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10f      	bne.n	8003b74 <HAL_TIM_Base_Stop+0x38>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6a1a      	ldr	r2, [r3, #32]
 8003b5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d107      	bne.n	8003b74 <HAL_TIM_Base_Stop+0x38>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0201 	bic.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e041      	b.n	8003c20 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f839 	bl	8003c28 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f000 fccd 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_IC_Start_IT+0x1e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	e013      	b.n	8003c82 <HAL_TIM_IC_Start_IT+0x46>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_IC_Start_IT+0x2e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	e00b      	b.n	8003c82 <HAL_TIM_IC_Start_IT+0x46>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_IC_Start_IT+0x3e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e003      	b.n	8003c82 <HAL_TIM_IC_Start_IT+0x46>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d104      	bne.n	8003c94 <HAL_TIM_IC_Start_IT+0x58>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	e013      	b.n	8003cbc <HAL_TIM_IC_Start_IT+0x80>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d104      	bne.n	8003ca4 <HAL_TIM_IC_Start_IT+0x68>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e00b      	b.n	8003cbc <HAL_TIM_IC_Start_IT+0x80>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d104      	bne.n	8003cb4 <HAL_TIM_IC_Start_IT+0x78>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	e003      	b.n	8003cbc <HAL_TIM_IC_Start_IT+0x80>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cbe:	7bbb      	ldrb	r3, [r7, #14]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d102      	bne.n	8003cca <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cc4:	7b7b      	ldrb	r3, [r7, #13]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d001      	beq.n	8003cce <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e0cc      	b.n	8003e68 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d104      	bne.n	8003cde <HAL_TIM_IC_Start_IT+0xa2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cdc:	e013      	b.n	8003d06 <HAL_TIM_IC_Start_IT+0xca>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d104      	bne.n	8003cee <HAL_TIM_IC_Start_IT+0xb2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cec:	e00b      	b.n	8003d06 <HAL_TIM_IC_Start_IT+0xca>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d104      	bne.n	8003cfe <HAL_TIM_IC_Start_IT+0xc2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cfc:	e003      	b.n	8003d06 <HAL_TIM_IC_Start_IT+0xca>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2202      	movs	r2, #2
 8003d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <HAL_TIM_IC_Start_IT+0xda>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d14:	e013      	b.n	8003d3e <HAL_TIM_IC_Start_IT+0x102>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_IC_Start_IT+0xea>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d24:	e00b      	b.n	8003d3e <HAL_TIM_IC_Start_IT+0x102>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_IC_Start_IT+0xfa>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d34:	e003      	b.n	8003d3e <HAL_TIM_IC_Start_IT+0x102>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b0c      	cmp	r3, #12
 8003d42:	d841      	bhi.n	8003dc8 <HAL_TIM_IC_Start_IT+0x18c>
 8003d44:	a201      	add	r2, pc, #4	@ (adr r2, 8003d4c <HAL_TIM_IC_Start_IT+0x110>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d81 	.word	0x08003d81
 8003d50:	08003dc9 	.word	0x08003dc9
 8003d54:	08003dc9 	.word	0x08003dc9
 8003d58:	08003dc9 	.word	0x08003dc9
 8003d5c:	08003d93 	.word	0x08003d93
 8003d60:	08003dc9 	.word	0x08003dc9
 8003d64:	08003dc9 	.word	0x08003dc9
 8003d68:	08003dc9 	.word	0x08003dc9
 8003d6c:	08003da5 	.word	0x08003da5
 8003d70:	08003dc9 	.word	0x08003dc9
 8003d74:	08003dc9 	.word	0x08003dc9
 8003d78:	08003dc9 	.word	0x08003dc9
 8003d7c:	08003db7 	.word	0x08003db7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0202 	orr.w	r2, r2, #2
 8003d8e:	60da      	str	r2, [r3, #12]
      break;
 8003d90:	e01d      	b.n	8003dce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0204 	orr.w	r2, r2, #4
 8003da0:	60da      	str	r2, [r3, #12]
      break;
 8003da2:	e014      	b.n	8003dce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0208 	orr.w	r2, r2, #8
 8003db2:	60da      	str	r2, [r3, #12]
      break;
 8003db4:	e00b      	b.n	8003dce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0210 	orr.w	r2, r2, #16
 8003dc4:	60da      	str	r2, [r3, #12]
      break;
 8003dc6:	e002      	b.n	8003dce <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      break;
 8003dcc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d148      	bne.n	8003e66 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	6839      	ldr	r1, [r7, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fe33 	bl	8004a48 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a22      	ldr	r2, [pc, #136]	@ (8003e70 <HAL_TIM_IC_Start_IT+0x234>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d022      	beq.n	8003e32 <HAL_TIM_IC_Start_IT+0x1f6>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df4:	d01d      	beq.n	8003e32 <HAL_TIM_IC_Start_IT+0x1f6>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8003e74 <HAL_TIM_IC_Start_IT+0x238>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d018      	beq.n	8003e32 <HAL_TIM_IC_Start_IT+0x1f6>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1c      	ldr	r2, [pc, #112]	@ (8003e78 <HAL_TIM_IC_Start_IT+0x23c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d013      	beq.n	8003e32 <HAL_TIM_IC_Start_IT+0x1f6>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003e7c <HAL_TIM_IC_Start_IT+0x240>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00e      	beq.n	8003e32 <HAL_TIM_IC_Start_IT+0x1f6>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a19      	ldr	r2, [pc, #100]	@ (8003e80 <HAL_TIM_IC_Start_IT+0x244>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d009      	beq.n	8003e32 <HAL_TIM_IC_Start_IT+0x1f6>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a18      	ldr	r2, [pc, #96]	@ (8003e84 <HAL_TIM_IC_Start_IT+0x248>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d004      	beq.n	8003e32 <HAL_TIM_IC_Start_IT+0x1f6>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a16      	ldr	r2, [pc, #88]	@ (8003e88 <HAL_TIM_IC_Start_IT+0x24c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d111      	bne.n	8003e56 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b06      	cmp	r3, #6
 8003e42:	d010      	beq.n	8003e66 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e54:	e007      	b.n	8003e66 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0201 	orr.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	40010400 	.word	0x40010400
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40001800 	.word	0x40001800

08003e8c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	d841      	bhi.n	8003f24 <HAL_TIM_IC_Stop_IT+0x98>
 8003ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea8 <HAL_TIM_IC_Stop_IT+0x1c>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003f25 	.word	0x08003f25
 8003eb0:	08003f25 	.word	0x08003f25
 8003eb4:	08003f25 	.word	0x08003f25
 8003eb8:	08003eef 	.word	0x08003eef
 8003ebc:	08003f25 	.word	0x08003f25
 8003ec0:	08003f25 	.word	0x08003f25
 8003ec4:	08003f25 	.word	0x08003f25
 8003ec8:	08003f01 	.word	0x08003f01
 8003ecc:	08003f25 	.word	0x08003f25
 8003ed0:	08003f25 	.word	0x08003f25
 8003ed4:	08003f25 	.word	0x08003f25
 8003ed8:	08003f13 	.word	0x08003f13
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0202 	bic.w	r2, r2, #2
 8003eea:	60da      	str	r2, [r3, #12]
      break;
 8003eec:	e01d      	b.n	8003f2a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0204 	bic.w	r2, r2, #4
 8003efc:	60da      	str	r2, [r3, #12]
      break;
 8003efe:	e014      	b.n	8003f2a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0208 	bic.w	r2, r2, #8
 8003f0e:	60da      	str	r2, [r3, #12]
      break;
 8003f10:	e00b      	b.n	8003f2a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0210 	bic.w	r2, r2, #16
 8003f20:	60da      	str	r2, [r3, #12]
      break;
 8003f22:	e002      	b.n	8003f2a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
      break;
 8003f28:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d156      	bne.n	8003fde <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2200      	movs	r2, #0
 8003f36:	6839      	ldr	r1, [r7, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fd85 	bl	8004a48 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a1a      	ldr	r2, [r3, #32]
 8003f44:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003f48:	4013      	ands	r3, r2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10f      	bne.n	8003f6e <HAL_TIM_IC_Stop_IT+0xe2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	f240 4344 	movw	r3, #1092	@ 0x444
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d107      	bne.n	8003f6e <HAL_TIM_IC_Stop_IT+0xe2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <HAL_TIM_IC_Stop_IT+0xf2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f7c:	e013      	b.n	8003fa6 <HAL_TIM_IC_Stop_IT+0x11a>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d104      	bne.n	8003f8e <HAL_TIM_IC_Stop_IT+0x102>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f8c:	e00b      	b.n	8003fa6 <HAL_TIM_IC_Stop_IT+0x11a>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d104      	bne.n	8003f9e <HAL_TIM_IC_Stop_IT+0x112>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f9c:	e003      	b.n	8003fa6 <HAL_TIM_IC_Stop_IT+0x11a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d104      	bne.n	8003fb6 <HAL_TIM_IC_Stop_IT+0x12a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fb4:	e013      	b.n	8003fde <HAL_TIM_IC_Stop_IT+0x152>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d104      	bne.n	8003fc6 <HAL_TIM_IC_Stop_IT+0x13a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fc4:	e00b      	b.n	8003fde <HAL_TIM_IC_Stop_IT+0x152>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d104      	bne.n	8003fd6 <HAL_TIM_IC_Stop_IT+0x14a>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fd4:	e003      	b.n	8003fde <HAL_TIM_IC_Stop_IT+0x152>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d020      	beq.n	800404c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01b      	beq.n	800404c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0202 	mvn.w	r2, #2
 800401c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fd fbc4 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8004038:	e005      	b.n	8004046 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fa76 	bl	800452c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fa7d 	bl	8004540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b00      	cmp	r3, #0
 8004054:	d020      	beq.n	8004098 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01b      	beq.n	8004098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0204 	mvn.w	r2, #4
 8004068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2202      	movs	r2, #2
 800406e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fd fb9e 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8004084:	e005      	b.n	8004092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fa50 	bl	800452c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fa57 	bl	8004540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d020      	beq.n	80040e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01b      	beq.n	80040e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0208 	mvn.w	r2, #8
 80040b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2204      	movs	r2, #4
 80040ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fd fb78 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 80040d0:	e005      	b.n	80040de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fa2a 	bl	800452c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fa31 	bl	8004540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d020      	beq.n	8004130 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01b      	beq.n	8004130 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0210 	mvn.w	r2, #16
 8004100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2208      	movs	r2, #8
 8004106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fd fb52 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fa04 	bl	800452c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fa0b 	bl	8004540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0201 	mvn.w	r2, #1
 800414c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f9e2 	bl	8004518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00c      	beq.n	8004178 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004164:	2b00      	cmp	r3, #0
 8004166:	d007      	beq.n	8004178 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fd14 	bl	8004ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00c      	beq.n	800419c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f9dc 	bl	8004554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00c      	beq.n	80041c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0220 	mvn.w	r2, #32
 80041b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fce6 	bl	8004b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e088      	b.n	80042f8 <HAL_TIM_IC_ConfigChannel+0x130>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d11b      	bne.n	800422c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004204:	f000 fa5c 	bl	80046c0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 020c 	bic.w	r2, r2, #12
 8004216:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6999      	ldr	r1, [r3, #24]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	619a      	str	r2, [r3, #24]
 800422a:	e060      	b.n	80042ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b04      	cmp	r3, #4
 8004230:	d11c      	bne.n	800426c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004242:	f000 fae0 	bl	8004806 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699a      	ldr	r2, [r3, #24]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004254:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6999      	ldr	r1, [r3, #24]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	021a      	lsls	r2, r3, #8
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	619a      	str	r2, [r3, #24]
 800426a:	e040      	b.n	80042ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b08      	cmp	r3, #8
 8004270:	d11b      	bne.n	80042aa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004282:	f000 fb2d 	bl	80048e0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 020c 	bic.w	r2, r2, #12
 8004294:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69d9      	ldr	r1, [r3, #28]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	61da      	str	r2, [r3, #28]
 80042a8:	e021      	b.n	80042ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b0c      	cmp	r3, #12
 80042ae:	d11c      	bne.n	80042ea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80042c0:	f000 fb4a 	bl	8004958 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69da      	ldr	r2, [r3, #28]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80042d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69d9      	ldr	r1, [r3, #28]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	021a      	lsls	r2, r3, #8
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	61da      	str	r2, [r3, #28]
 80042e8:	e001      	b.n	80042ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_TIM_ConfigClockSource+0x1c>
 8004318:	2302      	movs	r3, #2
 800431a:	e0b4      	b.n	8004486 <HAL_TIM_ConfigClockSource+0x186>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800433a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004354:	d03e      	beq.n	80043d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800435a:	f200 8087 	bhi.w	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800435e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004362:	f000 8086 	beq.w	8004472 <HAL_TIM_ConfigClockSource+0x172>
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436a:	d87f      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b70      	cmp	r3, #112	@ 0x70
 800436e:	d01a      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004370:	2b70      	cmp	r3, #112	@ 0x70
 8004372:	d87b      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b60      	cmp	r3, #96	@ 0x60
 8004376:	d050      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x11a>
 8004378:	2b60      	cmp	r3, #96	@ 0x60
 800437a:	d877      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800437c:	2b50      	cmp	r3, #80	@ 0x50
 800437e:	d03c      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0xfa>
 8004380:	2b50      	cmp	r3, #80	@ 0x50
 8004382:	d873      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	2b40      	cmp	r3, #64	@ 0x40
 8004386:	d058      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x13a>
 8004388:	2b40      	cmp	r3, #64	@ 0x40
 800438a:	d86f      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800438c:	2b30      	cmp	r3, #48	@ 0x30
 800438e:	d064      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x15a>
 8004390:	2b30      	cmp	r3, #48	@ 0x30
 8004392:	d86b      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 8004394:	2b20      	cmp	r3, #32
 8004396:	d060      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x15a>
 8004398:	2b20      	cmp	r3, #32
 800439a:	d867      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d05c      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x15a>
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d05a      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x15a>
 80043a4:	e062      	b.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043b6:	f000 fb27 	bl	8004a08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	609a      	str	r2, [r3, #8]
      break;
 80043d2:	e04f      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043e4:	f000 fb10 	bl	8004a08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043f6:	609a      	str	r2, [r3, #8]
      break;
 80043f8:	e03c      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004406:	461a      	mov	r2, r3
 8004408:	f000 f9ce 	bl	80047a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2150      	movs	r1, #80	@ 0x50
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fadd 	bl	80049d2 <TIM_ITRx_SetConfig>
      break;
 8004418:	e02c      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004426:	461a      	mov	r2, r3
 8004428:	f000 fa2a 	bl	8004880 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2160      	movs	r1, #96	@ 0x60
 8004432:	4618      	mov	r0, r3
 8004434:	f000 facd 	bl	80049d2 <TIM_ITRx_SetConfig>
      break;
 8004438:	e01c      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004446:	461a      	mov	r2, r3
 8004448:	f000 f9ae 	bl	80047a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2140      	movs	r1, #64	@ 0x40
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fabd 	bl	80049d2 <TIM_ITRx_SetConfig>
      break;
 8004458:	e00c      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4619      	mov	r1, r3
 8004464:	4610      	mov	r0, r2
 8004466:	f000 fab4 	bl	80049d2 <TIM_ITRx_SetConfig>
      break;
 800446a:	e003      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	73fb      	strb	r3, [r7, #15]
      break;
 8004470:	e000      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b0c      	cmp	r3, #12
 80044a2:	d831      	bhi.n	8004508 <HAL_TIM_ReadCapturedValue+0x78>
 80044a4:	a201      	add	r2, pc, #4	@ (adr r2, 80044ac <HAL_TIM_ReadCapturedValue+0x1c>)
 80044a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044aa:	bf00      	nop
 80044ac:	080044e1 	.word	0x080044e1
 80044b0:	08004509 	.word	0x08004509
 80044b4:	08004509 	.word	0x08004509
 80044b8:	08004509 	.word	0x08004509
 80044bc:	080044eb 	.word	0x080044eb
 80044c0:	08004509 	.word	0x08004509
 80044c4:	08004509 	.word	0x08004509
 80044c8:	08004509 	.word	0x08004509
 80044cc:	080044f5 	.word	0x080044f5
 80044d0:	08004509 	.word	0x08004509
 80044d4:	08004509 	.word	0x08004509
 80044d8:	08004509 	.word	0x08004509
 80044dc:	080044ff 	.word	0x080044ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e6:	60fb      	str	r3, [r7, #12]

      break;
 80044e8:	e00f      	b.n	800450a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f0:	60fb      	str	r3, [r7, #12]

      break;
 80044f2:	e00a      	b.n	800450a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fa:	60fb      	str	r3, [r7, #12]

      break;
 80044fc:	e005      	b.n	800450a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004504:	60fb      	str	r3, [r7, #12]

      break;
 8004506:	e000      	b.n	800450a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004508:	bf00      	nop
  }

  return tmpreg;
 800450a:	68fb      	ldr	r3, [r7, #12]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a46      	ldr	r2, [pc, #280]	@ (8004694 <TIM_Base_SetConfig+0x12c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d013      	beq.n	80045a8 <TIM_Base_SetConfig+0x40>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004586:	d00f      	beq.n	80045a8 <TIM_Base_SetConfig+0x40>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a43      	ldr	r2, [pc, #268]	@ (8004698 <TIM_Base_SetConfig+0x130>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00b      	beq.n	80045a8 <TIM_Base_SetConfig+0x40>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a42      	ldr	r2, [pc, #264]	@ (800469c <TIM_Base_SetConfig+0x134>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d007      	beq.n	80045a8 <TIM_Base_SetConfig+0x40>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a41      	ldr	r2, [pc, #260]	@ (80046a0 <TIM_Base_SetConfig+0x138>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_Base_SetConfig+0x40>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a40      	ldr	r2, [pc, #256]	@ (80046a4 <TIM_Base_SetConfig+0x13c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d108      	bne.n	80045ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a35      	ldr	r2, [pc, #212]	@ (8004694 <TIM_Base_SetConfig+0x12c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d02b      	beq.n	800461a <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c8:	d027      	beq.n	800461a <TIM_Base_SetConfig+0xb2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a32      	ldr	r2, [pc, #200]	@ (8004698 <TIM_Base_SetConfig+0x130>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d023      	beq.n	800461a <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a31      	ldr	r2, [pc, #196]	@ (800469c <TIM_Base_SetConfig+0x134>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d01f      	beq.n	800461a <TIM_Base_SetConfig+0xb2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a30      	ldr	r2, [pc, #192]	@ (80046a0 <TIM_Base_SetConfig+0x138>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01b      	beq.n	800461a <TIM_Base_SetConfig+0xb2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a2f      	ldr	r2, [pc, #188]	@ (80046a4 <TIM_Base_SetConfig+0x13c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d017      	beq.n	800461a <TIM_Base_SetConfig+0xb2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a2e      	ldr	r2, [pc, #184]	@ (80046a8 <TIM_Base_SetConfig+0x140>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d013      	beq.n	800461a <TIM_Base_SetConfig+0xb2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a2d      	ldr	r2, [pc, #180]	@ (80046ac <TIM_Base_SetConfig+0x144>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00f      	beq.n	800461a <TIM_Base_SetConfig+0xb2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a2c      	ldr	r2, [pc, #176]	@ (80046b0 <TIM_Base_SetConfig+0x148>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00b      	beq.n	800461a <TIM_Base_SetConfig+0xb2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a2b      	ldr	r2, [pc, #172]	@ (80046b4 <TIM_Base_SetConfig+0x14c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d007      	beq.n	800461a <TIM_Base_SetConfig+0xb2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a2a      	ldr	r2, [pc, #168]	@ (80046b8 <TIM_Base_SetConfig+0x150>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d003      	beq.n	800461a <TIM_Base_SetConfig+0xb2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a29      	ldr	r2, [pc, #164]	@ (80046bc <TIM_Base_SetConfig+0x154>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d108      	bne.n	800462c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a10      	ldr	r2, [pc, #64]	@ (8004694 <TIM_Base_SetConfig+0x12c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d003      	beq.n	8004660 <TIM_Base_SetConfig+0xf8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a12      	ldr	r2, [pc, #72]	@ (80046a4 <TIM_Base_SetConfig+0x13c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d103      	bne.n	8004668 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b01      	cmp	r3, #1
 8004678:	d105      	bne.n	8004686 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f023 0201 	bic.w	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	611a      	str	r2, [r3, #16]
  }
}
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40010000 	.word	0x40010000
 8004698:	40000400 	.word	0x40000400
 800469c:	40000800 	.word	0x40000800
 80046a0:	40000c00 	.word	0x40000c00
 80046a4:	40010400 	.word	0x40010400
 80046a8:	40014000 	.word	0x40014000
 80046ac:	40014400 	.word	0x40014400
 80046b0:	40014800 	.word	0x40014800
 80046b4:	40001800 	.word	0x40001800
 80046b8:	40001c00 	.word	0x40001c00
 80046bc:	40002000 	.word	0x40002000

080046c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f023 0201 	bic.w	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a28      	ldr	r2, [pc, #160]	@ (800478c <TIM_TI1_SetConfig+0xcc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01b      	beq.n	8004726 <TIM_TI1_SetConfig+0x66>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f4:	d017      	beq.n	8004726 <TIM_TI1_SetConfig+0x66>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a25      	ldr	r2, [pc, #148]	@ (8004790 <TIM_TI1_SetConfig+0xd0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <TIM_TI1_SetConfig+0x66>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4a24      	ldr	r2, [pc, #144]	@ (8004794 <TIM_TI1_SetConfig+0xd4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00f      	beq.n	8004726 <TIM_TI1_SetConfig+0x66>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a23      	ldr	r2, [pc, #140]	@ (8004798 <TIM_TI1_SetConfig+0xd8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <TIM_TI1_SetConfig+0x66>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4a22      	ldr	r2, [pc, #136]	@ (800479c <TIM_TI1_SetConfig+0xdc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_TI1_SetConfig+0x66>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a21      	ldr	r2, [pc, #132]	@ (80047a0 <TIM_TI1_SetConfig+0xe0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_TI1_SetConfig+0x66>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a20      	ldr	r2, [pc, #128]	@ (80047a4 <TIM_TI1_SetConfig+0xe4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <TIM_TI1_SetConfig+0x6a>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <TIM_TI1_SetConfig+0x6c>
 800472a:	2300      	movs	r3, #0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f023 0303 	bic.w	r3, r3, #3
 8004736:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	e003      	b.n	800474a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	b2db      	uxtb	r3, r3
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f023 030a 	bic.w	r3, r3, #10
 8004764:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f003 030a 	and.w	r3, r3, #10
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	621a      	str	r2, [r3, #32]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40010000 	.word	0x40010000
 8004790:	40000400 	.word	0x40000400
 8004794:	40000800 	.word	0x40000800
 8004798:	40000c00 	.word	0x40000c00
 800479c:	40010400 	.word	0x40010400
 80047a0:	40014000 	.word	0x40014000
 80047a4:	40001800 	.word	0x40001800

080047a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f023 0201 	bic.w	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f023 030a 	bic.w	r3, r3, #10
 80047e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004806:	b480      	push	{r7}
 8004808:	b087      	sub	sp, #28
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
 8004812:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f023 0210 	bic.w	r2, r3, #16
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	031b      	lsls	r3, r3, #12
 800484a:	b29b      	uxth	r3, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004858:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	621a      	str	r2, [r3, #32]
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0210 	bic.w	r2, r3, #16
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	031b      	lsls	r3, r3, #12
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	621a      	str	r2, [r3, #32]
}
 80048d4:	bf00      	nop
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f023 0303 	bic.w	r3, r3, #3
 800490c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800491c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	b2db      	uxtb	r3, r3
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004930:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004984:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004996:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	031b      	lsls	r3, r3, #12
 800499c:	b29b      	uxth	r3, r3
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80049aa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	031b      	lsls	r3, r3, #12
 80049b0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b085      	sub	sp, #20
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f043 0307 	orr.w	r3, r3, #7
 80049f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	609a      	str	r2, [r3, #8]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	021a      	lsls	r2, r3, #8
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	609a      	str	r2, [r3, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	371c      	adds	r7, #28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1a      	ldr	r2, [r3, #32]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a1a      	ldr	r2, [r3, #32]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a80:	431a      	orrs	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e05a      	b.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a21      	ldr	r2, [pc, #132]	@ (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d022      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af8:	d01d      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1d      	ldr	r2, [pc, #116]	@ (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d018      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1b      	ldr	r2, [pc, #108]	@ (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1a      	ldr	r2, [pc, #104]	@ (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00e      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a18      	ldr	r2, [pc, #96]	@ (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d009      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a17      	ldr	r2, [pc, #92]	@ (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a15      	ldr	r2, [pc, #84]	@ (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d10c      	bne.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40010000 	.word	0x40010000
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40000c00 	.word	0x40000c00
 8004b80:	40010400 	.word	0x40010400
 8004b84:	40014000 	.word	0x40014000
 8004b88:	40001800 	.word	0x40001800

08004b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e042      	b.n	8004c4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fd fcf6 	bl	80025cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2224      	movs	r2, #36	@ 0x24
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fe8b 	bl	8005914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695a      	ldr	r2, [r3, #20]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08a      	sub	sp, #40	@ 0x28
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d175      	bne.n	8004d60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_UART_Transmit+0x2c>
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e06e      	b.n	8004d62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2221      	movs	r2, #33	@ 0x21
 8004c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c92:	f7fd fde7 	bl	8002864 <HAL_GetTick>
 8004c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	88fa      	ldrh	r2, [r7, #6]
 8004c9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	88fa      	ldrh	r2, [r7, #6]
 8004ca2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cac:	d108      	bne.n	8004cc0 <HAL_UART_Transmit+0x6c>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	e003      	b.n	8004cc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cc8:	e02e      	b.n	8004d28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2180      	movs	r1, #128	@ 0x80
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fbed 	bl	80054b4 <UART_WaitOnFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e03a      	b.n	8004d62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10b      	bne.n	8004d0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	3302      	adds	r3, #2
 8004d06:	61bb      	str	r3, [r7, #24]
 8004d08:	e007      	b.n	8004d1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	781a      	ldrb	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	3301      	adds	r3, #1
 8004d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1cb      	bne.n	8004cca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2140      	movs	r1, #64	@ 0x40
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 fbb9 	bl	80054b4 <UART_WaitOnFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e006      	b.n	8004d62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e000      	b.n	8004d62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
  }
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3720      	adds	r7, #32
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b08a      	sub	sp, #40	@ 0x28
 8004d6e:	af02      	add	r7, sp, #8
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	603b      	str	r3, [r7, #0]
 8004d76:	4613      	mov	r3, r2
 8004d78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	f040 8081 	bne.w	8004e8e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_UART_Receive+0x2e>
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e079      	b.n	8004e90 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2222      	movs	r2, #34	@ 0x22
 8004da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004db0:	f7fd fd58 	bl	8002864 <HAL_GetTick>
 8004db4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dca:	d108      	bne.n	8004dde <HAL_UART_Receive+0x74>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d104      	bne.n	8004dde <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	61bb      	str	r3, [r7, #24]
 8004ddc:	e003      	b.n	8004de6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004de6:	e047      	b.n	8004e78 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2200      	movs	r2, #0
 8004df0:	2120      	movs	r1, #32
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fb5e 	bl	80054b4 <UART_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e042      	b.n	8004e90 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10c      	bne.n	8004e2a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	3302      	adds	r3, #2
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	e01f      	b.n	8004e6a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e32:	d007      	beq.n	8004e44 <HAL_UART_Receive+0xda>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <HAL_UART_Receive+0xe8>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	e008      	b.n	8004e64 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	3301      	adds	r3, #1
 8004e68:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1b2      	bne.n	8004de8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e000      	b.n	8004e90 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004e8e:	2302      	movs	r3, #2
  }
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3720      	adds	r7, #32
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d121      	bne.n	8004ef6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_UART_Transmit_IT+0x26>
 8004eb8:	88fb      	ldrh	r3, [r7, #6]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e01a      	b.n	8004ef8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	88fa      	ldrh	r2, [r7, #6]
 8004ecc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	88fa      	ldrh	r2, [r7, #6]
 8004ed2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2221      	movs	r2, #33	@ 0x21
 8004ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ef0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e000      	b.n	8004ef8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004ef6:	2302      	movs	r3, #2
  }
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	d112      	bne.n	8004f44 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <HAL_UART_Receive_IT+0x26>
 8004f24:	88fb      	ldrh	r3, [r7, #6]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e00b      	b.n	8004f46 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f34:	88fb      	ldrh	r3, [r7, #6]
 8004f36:	461a      	mov	r2, r3
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fb13 	bl	8005566 <UART_Start_Receive_IT>
 8004f40:	4603      	mov	r3, r0
 8004f42:	e000      	b.n	8004f46 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004f44:	2302      	movs	r3, #2
  }
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b0ba      	sub	sp, #232	@ 0xe8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10f      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x66>
 8004fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fbf2 	bl	8005798 <UART_Receive_IT>
      return;
 8004fb4:	e25b      	b.n	800546e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 80de 	beq.w	800517c <HAL_UART_IRQHandler+0x22c>
 8004fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80d1 	beq.w	800517c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <HAL_UART_IRQHandler+0xae>
 8004fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d005      	beq.n	8004ffe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff6:	f043 0201 	orr.w	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00b      	beq.n	8005022 <HAL_UART_IRQHandler+0xd2>
 800500a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501a:	f043 0202 	orr.w	r2, r3, #2
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00b      	beq.n	8005046 <HAL_UART_IRQHandler+0xf6>
 800502e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503e:	f043 0204 	orr.w	r2, r3, #4
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d011      	beq.n	8005076 <HAL_UART_IRQHandler+0x126>
 8005052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d105      	bne.n	800506a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800505e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506e:	f043 0208 	orr.w	r2, r3, #8
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 81f2 	beq.w	8005464 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <HAL_UART_IRQHandler+0x14e>
 800508c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fb7d 	bl	8005798 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a8:	2b40      	cmp	r3, #64	@ 0x40
 80050aa:	bf0c      	ite	eq
 80050ac:	2301      	moveq	r3, #1
 80050ae:	2300      	movne	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d103      	bne.n	80050ca <HAL_UART_IRQHandler+0x17a>
 80050c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d04f      	beq.n	800516a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fa85 	bl	80055da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050da:	2b40      	cmp	r3, #64	@ 0x40
 80050dc:	d141      	bne.n	8005162 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3314      	adds	r3, #20
 80050e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80050f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3314      	adds	r3, #20
 8005106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800510a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800510e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1d9      	bne.n	80050de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d013      	beq.n	800515a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005136:	4a7e      	ldr	r2, [pc, #504]	@ (8005330 <HAL_UART_IRQHandler+0x3e0>)
 8005138:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513e:	4618      	mov	r0, r3
 8005140:	f7fd fdbc 	bl	8002cbc <HAL_DMA_Abort_IT>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d016      	beq.n	8005178 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005154:	4610      	mov	r0, r2
 8005156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005158:	e00e      	b.n	8005178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f994 	bl	8005488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005160:	e00a      	b.n	8005178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f990 	bl	8005488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005168:	e006      	b.n	8005178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f98c 	bl	8005488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005176:	e175      	b.n	8005464 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005178:	bf00      	nop
    return;
 800517a:	e173      	b.n	8005464 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005180:	2b01      	cmp	r3, #1
 8005182:	f040 814f 	bne.w	8005424 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 8148 	beq.w	8005424 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 8141 	beq.w	8005424 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051a2:	2300      	movs	r3, #0
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c2:	2b40      	cmp	r3, #64	@ 0x40
 80051c4:	f040 80b6 	bne.w	8005334 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8145 	beq.w	8005468 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051e6:	429a      	cmp	r2, r3
 80051e8:	f080 813e 	bcs.w	8005468 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051fe:	f000 8088 	beq.w	8005312 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005218:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800521c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	330c      	adds	r3, #12
 800522a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800522e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005236:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800523a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005246:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1d9      	bne.n	8005202 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3314      	adds	r3, #20
 8005254:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800525e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005260:	f023 0301 	bic.w	r3, r3, #1
 8005264:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3314      	adds	r3, #20
 800526e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005272:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005276:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800527a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e1      	bne.n	800524e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3314      	adds	r3, #20
 8005290:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800529a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800529c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1e3      	bne.n	800528a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	330c      	adds	r3, #12
 80052d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052da:	e853 3f00 	ldrex	r3, [r3]
 80052de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052e2:	f023 0310 	bic.w	r3, r3, #16
 80052e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80052f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80052f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e3      	bne.n	80052d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530c:	4618      	mov	r0, r3
 800530e:	f7fd fc65 	bl	8002bdc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005320:	b29b      	uxth	r3, r3
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	b29b      	uxth	r3, r3
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f8b7 	bl	800549c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800532e:	e09b      	b.n	8005468 <HAL_UART_IRQHandler+0x518>
 8005330:	080056a1 	.word	0x080056a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800533c:	b29b      	uxth	r3, r3
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 808e 	beq.w	800546c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8089 	beq.w	800546c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	330c      	adds	r3, #12
 8005360:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800536a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800536c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005370:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	330c      	adds	r3, #12
 800537a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800537e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005380:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005384:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800538c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e3      	bne.n	800535a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3314      	adds	r3, #20
 8005398:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	623b      	str	r3, [r7, #32]
   return(result);
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3314      	adds	r3, #20
 80053b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80053b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e3      	bne.n	8005392 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	330c      	adds	r3, #12
 80053de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0310 	bic.w	r3, r3, #16
 80053ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	330c      	adds	r3, #12
 80053f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80053fc:	61fa      	str	r2, [r7, #28]
 80053fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	69b9      	ldr	r1, [r7, #24]
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	e841 2300 	strex	r3, r2, [r1]
 8005408:	617b      	str	r3, [r7, #20]
   return(result);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e3      	bne.n	80053d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005416:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f83d 	bl	800549c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005422:	e023      	b.n	800546c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800542c:	2b00      	cmp	r3, #0
 800542e:	d009      	beq.n	8005444 <HAL_UART_IRQHandler+0x4f4>
 8005430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f943 	bl	80056c8 <UART_Transmit_IT>
    return;
 8005442:	e014      	b.n	800546e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00e      	beq.n	800546e <HAL_UART_IRQHandler+0x51e>
 8005450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f983 	bl	8005768 <UART_EndTransmit_IT>
    return;
 8005462:	e004      	b.n	800546e <HAL_UART_IRQHandler+0x51e>
    return;
 8005464:	bf00      	nop
 8005466:	e002      	b.n	800546e <HAL_UART_IRQHandler+0x51e>
      return;
 8005468:	bf00      	nop
 800546a:	e000      	b.n	800546e <HAL_UART_IRQHandler+0x51e>
      return;
 800546c:	bf00      	nop
  }
}
 800546e:	37e8      	adds	r7, #232	@ 0xe8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c4:	e03b      	b.n	800553e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d037      	beq.n	800553e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ce:	f7fd f9c9 	bl	8002864 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	6a3a      	ldr	r2, [r7, #32]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e03a      	b.n	800555e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d023      	beq.n	800553e <UART_WaitOnFlagUntilTimeout+0x8a>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b80      	cmp	r3, #128	@ 0x80
 80054fa:	d020      	beq.n	800553e <UART_WaitOnFlagUntilTimeout+0x8a>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b40      	cmp	r3, #64	@ 0x40
 8005500:	d01d      	beq.n	800553e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b08      	cmp	r3, #8
 800550e:	d116      	bne.n	800553e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 f857 	bl	80055da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2208      	movs	r2, #8
 8005530:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e00f      	b.n	800555e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4013      	ands	r3, r2
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	429a      	cmp	r2, r3
 800554c:	bf0c      	ite	eq
 800554e:	2301      	moveq	r3, #1
 8005550:	2300      	movne	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	429a      	cmp	r2, r3
 800555a:	d0b4      	beq.n	80054c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	4613      	mov	r3, r2
 8005572:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	88fa      	ldrh	r2, [r7, #6]
 800557e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	88fa      	ldrh	r2, [r7, #6]
 8005584:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2222      	movs	r2, #34	@ 0x22
 8005590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d007      	beq.n	80055ac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055aa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0220 	orr.w	r2, r2, #32
 80055ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055da:	b480      	push	{r7}
 80055dc:	b095      	sub	sp, #84	@ 0x54
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	330c      	adds	r3, #12
 80055e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	330c      	adds	r3, #12
 8005600:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005602:	643a      	str	r2, [r7, #64]	@ 0x40
 8005604:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005608:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e5      	bne.n	80055e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3314      	adds	r3, #20
 800561c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	61fb      	str	r3, [r7, #28]
   return(result);
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	f023 0301 	bic.w	r3, r3, #1
 800562c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3314      	adds	r3, #20
 8005634:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005638:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800563c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e5      	bne.n	8005616 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564e:	2b01      	cmp	r3, #1
 8005650:	d119      	bne.n	8005686 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	60bb      	str	r3, [r7, #8]
   return(result);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f023 0310 	bic.w	r3, r3, #16
 8005668:	647b      	str	r3, [r7, #68]	@ 0x44
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	330c      	adds	r3, #12
 8005670:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005672:	61ba      	str	r2, [r7, #24]
 8005674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	6979      	ldr	r1, [r7, #20]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	613b      	str	r3, [r7, #16]
   return(result);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e5      	bne.n	8005652 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005694:	bf00      	nop
 8005696:	3754      	adds	r7, #84	@ 0x54
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f7ff fee4 	bl	8005488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b21      	cmp	r3, #33	@ 0x21
 80056da:	d13e      	bne.n	800575a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e4:	d114      	bne.n	8005710 <UART_Transmit_IT+0x48>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d110      	bne.n	8005710 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005702:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	1c9a      	adds	r2, r3, #2
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	621a      	str	r2, [r3, #32]
 800570e:	e008      	b.n	8005722 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	1c59      	adds	r1, r3, #1
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6211      	str	r1, [r2, #32]
 800571a:	781a      	ldrb	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29b      	uxth	r3, r3
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	4619      	mov	r1, r3
 8005730:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10f      	bne.n	8005756 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005744:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005754:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	e000      	b.n	800575c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800575a:	2302      	movs	r3, #2
  }
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800577e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff fe73 	bl	8005474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08c      	sub	sp, #48	@ 0x30
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b22      	cmp	r3, #34	@ 0x22
 80057aa:	f040 80ae 	bne.w	800590a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b6:	d117      	bne.n	80057e8 <UART_Receive_IT+0x50>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d113      	bne.n	80057e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e0:	1c9a      	adds	r2, r3, #2
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80057e6:	e026      	b.n	8005836 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057fa:	d007      	beq.n	800580c <UART_Receive_IT+0x74>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <UART_Receive_IT+0x82>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	b2da      	uxtb	r2, r3
 8005814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	e008      	b.n	800582c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005826:	b2da      	uxtb	r2, r3
 8005828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800582a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29b      	uxth	r3, r3
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4619      	mov	r1, r3
 8005844:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005846:	2b00      	cmp	r3, #0
 8005848:	d15d      	bne.n	8005906 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0220 	bic.w	r2, r2, #32
 8005858:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005868:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588c:	2b01      	cmp	r3, #1
 800588e:	d135      	bne.n	80058fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	330c      	adds	r3, #12
 800589c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	613b      	str	r3, [r7, #16]
   return(result);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f023 0310 	bic.w	r3, r3, #16
 80058ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	330c      	adds	r3, #12
 80058b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b6:	623a      	str	r2, [r7, #32]
 80058b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	69f9      	ldr	r1, [r7, #28]
 80058bc:	6a3a      	ldr	r2, [r7, #32]
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e5      	bne.n	8005896 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d10a      	bne.n	80058ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff fdd1 	bl	800549c <HAL_UARTEx_RxEventCallback>
 80058fa:	e002      	b.n	8005902 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 faeb 	bl	8005ed8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e002      	b.n	800590c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	e000      	b.n	800590c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800590a:	2302      	movs	r3, #2
  }
}
 800590c:	4618      	mov	r0, r3
 800590e:	3730      	adds	r7, #48	@ 0x30
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005918:	b0c0      	sub	sp, #256	@ 0x100
 800591a:	af00      	add	r7, sp, #0
 800591c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005930:	68d9      	ldr	r1, [r3, #12]
 8005932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	ea40 0301 	orr.w	r3, r0, r1
 800593c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800593e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	431a      	orrs	r2, r3
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	431a      	orrs	r2, r3
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800596c:	f021 010c 	bic.w	r1, r1, #12
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800597a:	430b      	orrs	r3, r1
 800597c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800597e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800598a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598e:	6999      	ldr	r1, [r3, #24]
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	ea40 0301 	orr.w	r3, r0, r1
 800599a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800599c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4b8f      	ldr	r3, [pc, #572]	@ (8005be0 <UART_SetConfig+0x2cc>)
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d005      	beq.n	80059b4 <UART_SetConfig+0xa0>
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4b8d      	ldr	r3, [pc, #564]	@ (8005be4 <UART_SetConfig+0x2d0>)
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d104      	bne.n	80059be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059b4:	f7fd fff6 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 80059b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059bc:	e003      	b.n	80059c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059be:	f7fd ffdd 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 80059c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059d0:	f040 810c 	bne.w	8005bec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059d8:	2200      	movs	r2, #0
 80059da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059e6:	4622      	mov	r2, r4
 80059e8:	462b      	mov	r3, r5
 80059ea:	1891      	adds	r1, r2, r2
 80059ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059ee:	415b      	adcs	r3, r3
 80059f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059f6:	4621      	mov	r1, r4
 80059f8:	eb12 0801 	adds.w	r8, r2, r1
 80059fc:	4629      	mov	r1, r5
 80059fe:	eb43 0901 	adc.w	r9, r3, r1
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a16:	4690      	mov	r8, r2
 8005a18:	4699      	mov	r9, r3
 8005a1a:	4623      	mov	r3, r4
 8005a1c:	eb18 0303 	adds.w	r3, r8, r3
 8005a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a24:	462b      	mov	r3, r5
 8005a26:	eb49 0303 	adc.w	r3, r9, r3
 8005a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a42:	460b      	mov	r3, r1
 8005a44:	18db      	adds	r3, r3, r3
 8005a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a48:	4613      	mov	r3, r2
 8005a4a:	eb42 0303 	adc.w	r3, r2, r3
 8005a4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a58:	f7fb f8f6 	bl	8000c48 <__aeabi_uldivmod>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4b61      	ldr	r3, [pc, #388]	@ (8005be8 <UART_SetConfig+0x2d4>)
 8005a62:	fba3 2302 	umull	r2, r3, r3, r2
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	011c      	lsls	r4, r3, #4
 8005a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a7c:	4642      	mov	r2, r8
 8005a7e:	464b      	mov	r3, r9
 8005a80:	1891      	adds	r1, r2, r2
 8005a82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a84:	415b      	adcs	r3, r3
 8005a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a8c:	4641      	mov	r1, r8
 8005a8e:	eb12 0a01 	adds.w	sl, r2, r1
 8005a92:	4649      	mov	r1, r9
 8005a94:	eb43 0b01 	adc.w	fp, r3, r1
 8005a98:	f04f 0200 	mov.w	r2, #0
 8005a9c:	f04f 0300 	mov.w	r3, #0
 8005aa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005aa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005aa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aac:	4692      	mov	sl, r2
 8005aae:	469b      	mov	fp, r3
 8005ab0:	4643      	mov	r3, r8
 8005ab2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005aba:	464b      	mov	r3, r9
 8005abc:	eb4b 0303 	adc.w	r3, fp, r3
 8005ac0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ad0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ad4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	18db      	adds	r3, r3, r3
 8005adc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ade:	4613      	mov	r3, r2
 8005ae0:	eb42 0303 	adc.w	r3, r2, r3
 8005ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ae6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005aea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005aee:	f7fb f8ab 	bl	8000c48 <__aeabi_uldivmod>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4611      	mov	r1, r2
 8005af8:	4b3b      	ldr	r3, [pc, #236]	@ (8005be8 <UART_SetConfig+0x2d4>)
 8005afa:	fba3 2301 	umull	r2, r3, r3, r1
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	2264      	movs	r2, #100	@ 0x64
 8005b02:	fb02 f303 	mul.w	r3, r2, r3
 8005b06:	1acb      	subs	r3, r1, r3
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b0e:	4b36      	ldr	r3, [pc, #216]	@ (8005be8 <UART_SetConfig+0x2d4>)
 8005b10:	fba3 2302 	umull	r2, r3, r3, r2
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b1c:	441c      	add	r4, r3
 8005b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b30:	4642      	mov	r2, r8
 8005b32:	464b      	mov	r3, r9
 8005b34:	1891      	adds	r1, r2, r2
 8005b36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b38:	415b      	adcs	r3, r3
 8005b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b40:	4641      	mov	r1, r8
 8005b42:	1851      	adds	r1, r2, r1
 8005b44:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b46:	4649      	mov	r1, r9
 8005b48:	414b      	adcs	r3, r1
 8005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b58:	4659      	mov	r1, fp
 8005b5a:	00cb      	lsls	r3, r1, #3
 8005b5c:	4651      	mov	r1, sl
 8005b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b62:	4651      	mov	r1, sl
 8005b64:	00ca      	lsls	r2, r1, #3
 8005b66:	4610      	mov	r0, r2
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	4642      	mov	r2, r8
 8005b6e:	189b      	adds	r3, r3, r2
 8005b70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b74:	464b      	mov	r3, r9
 8005b76:	460a      	mov	r2, r1
 8005b78:	eb42 0303 	adc.w	r3, r2, r3
 8005b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b94:	460b      	mov	r3, r1
 8005b96:	18db      	adds	r3, r3, r3
 8005b98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ba2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ba6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005baa:	f7fb f84d 	bl	8000c48 <__aeabi_uldivmod>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <UART_SetConfig+0x2d4>)
 8005bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	2164      	movs	r1, #100	@ 0x64
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	3332      	adds	r3, #50	@ 0x32
 8005bc6:	4a08      	ldr	r2, [pc, #32]	@ (8005be8 <UART_SetConfig+0x2d4>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	f003 0207 	and.w	r2, r3, #7
 8005bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4422      	add	r2, r4
 8005bda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bdc:	e106      	b.n	8005dec <UART_SetConfig+0x4d8>
 8005bde:	bf00      	nop
 8005be0:	40011000 	.word	0x40011000
 8005be4:	40011400 	.word	0x40011400
 8005be8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bf6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bfe:	4642      	mov	r2, r8
 8005c00:	464b      	mov	r3, r9
 8005c02:	1891      	adds	r1, r2, r2
 8005c04:	6239      	str	r1, [r7, #32]
 8005c06:	415b      	adcs	r3, r3
 8005c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c0e:	4641      	mov	r1, r8
 8005c10:	1854      	adds	r4, r2, r1
 8005c12:	4649      	mov	r1, r9
 8005c14:	eb43 0501 	adc.w	r5, r3, r1
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	00eb      	lsls	r3, r5, #3
 8005c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c26:	00e2      	lsls	r2, r4, #3
 8005c28:	4614      	mov	r4, r2
 8005c2a:	461d      	mov	r5, r3
 8005c2c:	4643      	mov	r3, r8
 8005c2e:	18e3      	adds	r3, r4, r3
 8005c30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c34:	464b      	mov	r3, r9
 8005c36:	eb45 0303 	adc.w	r3, r5, r3
 8005c3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	008b      	lsls	r3, r1, #2
 8005c5e:	4621      	mov	r1, r4
 8005c60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c64:	4621      	mov	r1, r4
 8005c66:	008a      	lsls	r2, r1, #2
 8005c68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c6c:	f7fa ffec 	bl	8000c48 <__aeabi_uldivmod>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4b60      	ldr	r3, [pc, #384]	@ (8005df8 <UART_SetConfig+0x4e4>)
 8005c76:	fba3 2302 	umull	r2, r3, r3, r2
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	011c      	lsls	r4, r3, #4
 8005c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c90:	4642      	mov	r2, r8
 8005c92:	464b      	mov	r3, r9
 8005c94:	1891      	adds	r1, r2, r2
 8005c96:	61b9      	str	r1, [r7, #24]
 8005c98:	415b      	adcs	r3, r3
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ca0:	4641      	mov	r1, r8
 8005ca2:	1851      	adds	r1, r2, r1
 8005ca4:	6139      	str	r1, [r7, #16]
 8005ca6:	4649      	mov	r1, r9
 8005ca8:	414b      	adcs	r3, r1
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	f04f 0200 	mov.w	r2, #0
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cb8:	4659      	mov	r1, fp
 8005cba:	00cb      	lsls	r3, r1, #3
 8005cbc:	4651      	mov	r1, sl
 8005cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cc2:	4651      	mov	r1, sl
 8005cc4:	00ca      	lsls	r2, r1, #3
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4642      	mov	r2, r8
 8005cce:	189b      	adds	r3, r3, r2
 8005cd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cd4:	464b      	mov	r3, r9
 8005cd6:	460a      	mov	r2, r1
 8005cd8:	eb42 0303 	adc.w	r3, r2, r3
 8005cdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005cf8:	4649      	mov	r1, r9
 8005cfa:	008b      	lsls	r3, r1, #2
 8005cfc:	4641      	mov	r1, r8
 8005cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d02:	4641      	mov	r1, r8
 8005d04:	008a      	lsls	r2, r1, #2
 8005d06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d0a:	f7fa ff9d 	bl	8000c48 <__aeabi_uldivmod>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	4611      	mov	r1, r2
 8005d14:	4b38      	ldr	r3, [pc, #224]	@ (8005df8 <UART_SetConfig+0x4e4>)
 8005d16:	fba3 2301 	umull	r2, r3, r3, r1
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	2264      	movs	r2, #100	@ 0x64
 8005d1e:	fb02 f303 	mul.w	r3, r2, r3
 8005d22:	1acb      	subs	r3, r1, r3
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	3332      	adds	r3, #50	@ 0x32
 8005d28:	4a33      	ldr	r2, [pc, #204]	@ (8005df8 <UART_SetConfig+0x4e4>)
 8005d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d34:	441c      	add	r4, r3
 8005d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d44:	4642      	mov	r2, r8
 8005d46:	464b      	mov	r3, r9
 8005d48:	1891      	adds	r1, r2, r2
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	415b      	adcs	r3, r3
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d54:	4641      	mov	r1, r8
 8005d56:	1851      	adds	r1, r2, r1
 8005d58:	6039      	str	r1, [r7, #0]
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	414b      	adcs	r3, r1
 8005d5e:	607b      	str	r3, [r7, #4]
 8005d60:	f04f 0200 	mov.w	r2, #0
 8005d64:	f04f 0300 	mov.w	r3, #0
 8005d68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d6c:	4659      	mov	r1, fp
 8005d6e:	00cb      	lsls	r3, r1, #3
 8005d70:	4651      	mov	r1, sl
 8005d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d76:	4651      	mov	r1, sl
 8005d78:	00ca      	lsls	r2, r1, #3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4603      	mov	r3, r0
 8005d80:	4642      	mov	r2, r8
 8005d82:	189b      	adds	r3, r3, r2
 8005d84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d86:	464b      	mov	r3, r9
 8005d88:	460a      	mov	r2, r1
 8005d8a:	eb42 0303 	adc.w	r3, r2, r3
 8005d8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005da8:	4649      	mov	r1, r9
 8005daa:	008b      	lsls	r3, r1, #2
 8005dac:	4641      	mov	r1, r8
 8005dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005db2:	4641      	mov	r1, r8
 8005db4:	008a      	lsls	r2, r1, #2
 8005db6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005dba:	f7fa ff45 	bl	8000c48 <__aeabi_uldivmod>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005df8 <UART_SetConfig+0x4e4>)
 8005dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	2164      	movs	r1, #100	@ 0x64
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	3332      	adds	r3, #50	@ 0x32
 8005dd6:	4a08      	ldr	r2, [pc, #32]	@ (8005df8 <UART_SetConfig+0x4e4>)
 8005dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	f003 020f 	and.w	r2, r3, #15
 8005de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4422      	add	r2, r4
 8005dea:	609a      	str	r2, [r3, #8]
}
 8005dec:	bf00      	nop
 8005dee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005df2:	46bd      	mov	sp, r7
 8005df4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005df8:	51eb851f 	.word	0x51eb851f

08005dfc <TJCPrintf>:




void TJCPrintf(const char *str, ...)
{
 8005dfc:	b40f      	push	{r0, r1, r2, r3}
 8005dfe:	b590      	push	{r4, r7, lr}
 8005e00:	b09d      	sub	sp, #116	@ 0x74
 8005e02:	af00      	add	r7, sp, #0


	uint8_t end = 0xff;
 8005e04:	23ff      	movs	r3, #255	@ 0xff
 8005e06:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	char buffer[STR_LENGTH+1];  // 数据长度
	uint8_t i = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	va_list arg_ptr;
	va_start(arg_ptr, str);
 8005e10:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8005e14:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, STR_LENGTH+1, str, arg_ptr);
 8005e16:	f107 0008 	add.w	r0, r7, #8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e20:	2165      	movs	r1, #101	@ 0x65
 8005e22:	f000 fec5 	bl	8006bb0 <vsniprintf>
	va_end(arg_ptr);
	while ((i < STR_LENGTH) && (i < strlen(buffer)))
 8005e26:	e014      	b.n	8005e52 <TJCPrintf+0x56>
	{
		HAL_UART_Transmit_IT(&huart3, (uint8_t *)(buffer) + i++, 1);
 8005e28:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
 8005e32:	461a      	mov	r2, r3
 8005e34:	f107 0308 	add.w	r3, r7, #8
 8005e38:	4413      	add	r3, r2
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4825      	ldr	r0, [pc, #148]	@ (8005ed4 <TJCPrintf+0xd8>)
 8005e40:	f7ff f82a 	bl	8004e98 <HAL_UART_Transmit_IT>
		while(huart3.gState != HAL_UART_STATE_READY);	// 等待发送完毕
 8005e44:	bf00      	nop
 8005e46:	4b23      	ldr	r3, [pc, #140]	@ (8005ed4 <TJCPrintf+0xd8>)
 8005e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d1f9      	bne.n	8005e46 <TJCPrintf+0x4a>
	while ((i < STR_LENGTH) && (i < strlen(buffer)))
 8005e52:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8005e56:	2b63      	cmp	r3, #99	@ 0x63
 8005e58:	d809      	bhi.n	8005e6e <TJCPrintf+0x72>
 8005e5a:	f897 406f 	ldrb.w	r4, [r7, #111]	@ 0x6f
 8005e5e:	f107 0308 	add.w	r3, r7, #8
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fa fa04 	bl	8000270 <strlen>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	429c      	cmp	r4, r3
 8005e6c:	d3dc      	bcc.n	8005e28 <TJCPrintf+0x2c>
	}

	HAL_UART_Transmit_IT(&huart3, &end, 1);			// 这个函数改为你的单片机的串口发送单字节函数
 8005e6e:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8005e72:	2201      	movs	r2, #1
 8005e74:	4619      	mov	r1, r3
 8005e76:	4817      	ldr	r0, [pc, #92]	@ (8005ed4 <TJCPrintf+0xd8>)
 8005e78:	f7ff f80e 	bl	8004e98 <HAL_UART_Transmit_IT>
	while(huart3.gState != HAL_UART_STATE_READY);	//等待发送完毕
 8005e7c:	bf00      	nop
 8005e7e:	4b15      	ldr	r3, [pc, #84]	@ (8005ed4 <TJCPrintf+0xd8>)
 8005e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d1f9      	bne.n	8005e7e <TJCPrintf+0x82>
	HAL_UART_Transmit_IT(&huart3, &end, 1);			//这个函数改为你的单片机的串口发送单字节函数
 8005e8a:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8005e8e:	2201      	movs	r2, #1
 8005e90:	4619      	mov	r1, r3
 8005e92:	4810      	ldr	r0, [pc, #64]	@ (8005ed4 <TJCPrintf+0xd8>)
 8005e94:	f7ff f800 	bl	8004e98 <HAL_UART_Transmit_IT>
	while(huart3.gState != HAL_UART_STATE_READY);	//等待发送完毕
 8005e98:	bf00      	nop
 8005e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed4 <TJCPrintf+0xd8>)
 8005e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d1f9      	bne.n	8005e9a <TJCPrintf+0x9e>
	HAL_UART_Transmit_IT(&huart3, &end, 1);			//这个函数改为你的单片机的串口发送单字节函数
 8005ea6:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8005eaa:	2201      	movs	r2, #1
 8005eac:	4619      	mov	r1, r3
 8005eae:	4809      	ldr	r0, [pc, #36]	@ (8005ed4 <TJCPrintf+0xd8>)
 8005eb0:	f7fe fff2 	bl	8004e98 <HAL_UART_Transmit_IT>
	while(huart3.gState != HAL_UART_STATE_READY);	//等待发送完毕
 8005eb4:	bf00      	nop
 8005eb6:	4b07      	ldr	r3, [pc, #28]	@ (8005ed4 <TJCPrintf+0xd8>)
 8005eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	d1f9      	bne.n	8005eb6 <TJCPrintf+0xba>

}
 8005ec2:	bf00      	nop
 8005ec4:	bf00      	nop
 8005ec6:	3774      	adds	r7, #116	@ 0x74
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005ece:	b004      	add	sp, #16
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	20000330 	.word	0x20000330

08005ed8 <HAL_UART_RxCpltCallback>:
输入参数：
返回值： 		void
修改记录：
**********************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART3)	//判断是由哪个串口触发的中断
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a08      	ldr	r2, [pc, #32]	@ (8005f08 <HAL_UART_RxCpltCallback+0x30>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d109      	bne.n	8005efe <HAL_UART_RxCpltCallback+0x26>
	{
		writeRingBuff(RxBuff[0]);
 8005eea:	4b08      	ldr	r3, [pc, #32]	@ (8005f0c <HAL_UART_RxCpltCallback+0x34>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f822 	bl	8005f38 <writeRingBuff>
		HAL_UART_Receive_IT(&huart3,RxBuff,1);		//重新使能串口2接收中断
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	4905      	ldr	r1, [pc, #20]	@ (8005f0c <HAL_UART_RxCpltCallback+0x34>)
 8005ef8:	4805      	ldr	r0, [pc, #20]	@ (8005f10 <HAL_UART_RxCpltCallback+0x38>)
 8005efa:	f7ff f803 	bl	8004f04 <HAL_UART_Receive_IT>
	}
}
 8005efe:	bf00      	nop
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	40004800 	.word	0x40004800
 8005f0c:	20000578 	.word	0x20000578
 8005f10:	20000330 	.word	0x20000330

08005f14 <initRingBuff>:
输入参数：
返回值： 		void
修改记录：
**********************************************************/
void initRingBuff(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
  //初始化相关信息
  ringBuff.Head = 0;
 8005f18:	4b06      	ldr	r3, [pc, #24]	@ (8005f34 <initRingBuff+0x20>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	801a      	strh	r2, [r3, #0]
  ringBuff.Tail = 0;
 8005f1e:	4b05      	ldr	r3, [pc, #20]	@ (8005f34 <initRingBuff+0x20>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	805a      	strh	r2, [r3, #2]
  ringBuff.Lenght = 0;
 8005f24:	4b03      	ldr	r3, [pc, #12]	@ (8005f34 <initRingBuff+0x20>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	809a      	strh	r2, [r3, #4]
}
 8005f2a:	bf00      	nop
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	2000037c 	.word	0x2000037c

08005f38 <writeRingBuff>:
输入参数：
返回值： 		void
修改记录：
**********************************************************/
void writeRingBuff(uint8_t data)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	4603      	mov	r3, r0
 8005f40:	71fb      	strb	r3, [r7, #7]
  if(ringBuff.Lenght >= RINGBUFF_LEN) //判断缓冲区是否已满
 8005f42:	4b15      	ldr	r3, [pc, #84]	@ (8005f98 <writeRingBuff+0x60>)
 8005f44:	889b      	ldrh	r3, [r3, #4]
 8005f46:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005f4a:	d21e      	bcs.n	8005f8a <writeRingBuff+0x52>
  {
    return ;
  }
  ringBuff.Ring_data[ringBuff.Tail]=data;
 8005f4c:	4b12      	ldr	r3, [pc, #72]	@ (8005f98 <writeRingBuff+0x60>)
 8005f4e:	885b      	ldrh	r3, [r3, #2]
 8005f50:	461a      	mov	r2, r3
 8005f52:	4b11      	ldr	r3, [pc, #68]	@ (8005f98 <writeRingBuff+0x60>)
 8005f54:	4413      	add	r3, r2
 8005f56:	79fa      	ldrb	r2, [r7, #7]
 8005f58:	719a      	strb	r2, [r3, #6]
  ringBuff.Tail = (ringBuff.Tail+1)%RINGBUFF_LEN;//防止越界非法访问
 8005f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8005f98 <writeRingBuff+0x60>)
 8005f5c:	885b      	ldrh	r3, [r3, #2]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	4a0e      	ldr	r2, [pc, #56]	@ (8005f9c <writeRingBuff+0x64>)
 8005f62:	fb82 1203 	smull	r1, r2, r2, r3
 8005f66:	1151      	asrs	r1, r2, #5
 8005f68:	17da      	asrs	r2, r3, #31
 8005f6a:	1a8a      	subs	r2, r1, r2
 8005f6c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005f70:	fb01 f202 	mul.w	r2, r1, r2
 8005f74:	1a9a      	subs	r2, r3, r2
 8005f76:	b292      	uxth	r2, r2
 8005f78:	4b07      	ldr	r3, [pc, #28]	@ (8005f98 <writeRingBuff+0x60>)
 8005f7a:	805a      	strh	r2, [r3, #2]
  ringBuff.Lenght++;
 8005f7c:	4b06      	ldr	r3, [pc, #24]	@ (8005f98 <writeRingBuff+0x60>)
 8005f7e:	889b      	ldrh	r3, [r3, #4]
 8005f80:	3301      	adds	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	4b04      	ldr	r3, [pc, #16]	@ (8005f98 <writeRingBuff+0x60>)
 8005f86:	809a      	strh	r2, [r3, #4]
 8005f88:	e000      	b.n	8005f8c <writeRingBuff+0x54>
    return ;
 8005f8a:	bf00      	nop

}
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	2000037c 	.word	0x2000037c
 8005f9c:	10624dd3 	.word	0x10624dd3

08005fa0 <deleteRingBuff>:
输入参数：		要删除的长度
返回值： 		void
修改记录：
**********************************************************/
void deleteRingBuff(uint16_t size)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	80fb      	strh	r3, [r7, #6]
	if(size >= ringBuff.Lenght)
 8005faa:	4b19      	ldr	r3, [pc, #100]	@ (8006010 <deleteRingBuff+0x70>)
 8005fac:	889b      	ldrh	r3, [r3, #4]
 8005fae:	88fa      	ldrh	r2, [r7, #6]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d302      	bcc.n	8005fba <deleteRingBuff+0x1a>
	{
	    initRingBuff();
 8005fb4:	f7ff ffae 	bl	8005f14 <initRingBuff>
	    return;
 8005fb8:	e027      	b.n	800600a <deleteRingBuff+0x6a>
	}
	for(int i = 0; i < size; i++)
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	e020      	b.n	8006002 <deleteRingBuff+0x62>
	{

		if(ringBuff.Lenght == 0)// 判断非空
 8005fc0:	4b13      	ldr	r3, [pc, #76]	@ (8006010 <deleteRingBuff+0x70>)
 8005fc2:	889b      	ldrh	r3, [r3, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <deleteRingBuff+0x2e>
		{
		initRingBuff();
 8005fc8:	f7ff ffa4 	bl	8005f14 <initRingBuff>
		return;
 8005fcc:	e01d      	b.n	800600a <deleteRingBuff+0x6a>
		}
		ringBuff.Head = (ringBuff.Head+1)%RINGBUFF_LEN;//防止越界非法访问
 8005fce:	4b10      	ldr	r3, [pc, #64]	@ (8006010 <deleteRingBuff+0x70>)
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	4a0f      	ldr	r2, [pc, #60]	@ (8006014 <deleteRingBuff+0x74>)
 8005fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8005fda:	1151      	asrs	r1, r2, #5
 8005fdc:	17da      	asrs	r2, r3, #31
 8005fde:	1a8a      	subs	r2, r1, r2
 8005fe0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005fe4:	fb01 f202 	mul.w	r2, r1, r2
 8005fe8:	1a9a      	subs	r2, r3, r2
 8005fea:	b292      	uxth	r2, r2
 8005fec:	4b08      	ldr	r3, [pc, #32]	@ (8006010 <deleteRingBuff+0x70>)
 8005fee:	801a      	strh	r2, [r3, #0]
		ringBuff.Lenght--;
 8005ff0:	4b07      	ldr	r3, [pc, #28]	@ (8006010 <deleteRingBuff+0x70>)
 8005ff2:	889b      	ldrh	r3, [r3, #4]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	4b05      	ldr	r3, [pc, #20]	@ (8006010 <deleteRingBuff+0x70>)
 8005ffa:	809a      	strh	r2, [r3, #4]
	for(int i = 0; i < size; i++)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3301      	adds	r3, #1
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	429a      	cmp	r2, r3
 8006008:	dbda      	blt.n	8005fc0 <deleteRingBuff+0x20>

	}

}
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	2000037c 	.word	0x2000037c
 8006014:	10624dd3 	.word	0x10624dd3

08006018 <read1BFromRingBuff>:
输入参数：		position:读取的位置
返回值： 		所在位置的数据(1字节)
修改记录：
**********************************************************/
uint8_t read1BFromRingBuff(uint16_t position)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	4603      	mov	r3, r0
 8006020:	80fb      	strh	r3, [r7, #6]
	uint16_t realPosition = (ringBuff.Head + position) % RINGBUFF_LEN;
 8006022:	4b0e      	ldr	r3, [pc, #56]	@ (800605c <read1BFromRingBuff+0x44>)
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	4413      	add	r3, r2
 800602c:	4a0c      	ldr	r2, [pc, #48]	@ (8006060 <read1BFromRingBuff+0x48>)
 800602e:	fb82 1203 	smull	r1, r2, r2, r3
 8006032:	1151      	asrs	r1, r2, #5
 8006034:	17da      	asrs	r2, r3, #31
 8006036:	1a8a      	subs	r2, r1, r2
 8006038:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800603c:	fb01 f202 	mul.w	r2, r1, r2
 8006040:	1a9a      	subs	r2, r3, r2
 8006042:	4613      	mov	r3, r2
 8006044:	81fb      	strh	r3, [r7, #14]

	return ringBuff.Ring_data[realPosition];
 8006046:	89fb      	ldrh	r3, [r7, #14]
 8006048:	4a04      	ldr	r2, [pc, #16]	@ (800605c <read1BFromRingBuff+0x44>)
 800604a:	4413      	add	r3, r2
 800604c:	799b      	ldrb	r3, [r3, #6]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	2000037c 	.word	0x2000037c
 8006060:	10624dd3 	.word	0x10624dd3

08006064 <getRingBuffLenght>:
输入参数：
返回值： 		串口缓冲区的数据数量
修改记录：
**********************************************************/
uint16_t getRingBuffLenght()
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
	return ringBuff.Lenght;
 8006068:	4b03      	ldr	r3, [pc, #12]	@ (8006078 <getRingBuffLenght+0x14>)
 800606a:	889b      	ldrh	r3, [r3, #4]
}
 800606c:	4618      	mov	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	2000037c 	.word	0x2000037c

0800607c <__cvt>:
 800607c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006080:	ec57 6b10 	vmov	r6, r7, d0
 8006084:	2f00      	cmp	r7, #0
 8006086:	460c      	mov	r4, r1
 8006088:	4619      	mov	r1, r3
 800608a:	463b      	mov	r3, r7
 800608c:	bfbb      	ittet	lt
 800608e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006092:	461f      	movlt	r7, r3
 8006094:	2300      	movge	r3, #0
 8006096:	232d      	movlt	r3, #45	@ 0x2d
 8006098:	700b      	strb	r3, [r1, #0]
 800609a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800609c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80060a0:	4691      	mov	r9, r2
 80060a2:	f023 0820 	bic.w	r8, r3, #32
 80060a6:	bfbc      	itt	lt
 80060a8:	4632      	movlt	r2, r6
 80060aa:	4616      	movlt	r6, r2
 80060ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80060b0:	d005      	beq.n	80060be <__cvt+0x42>
 80060b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80060b6:	d100      	bne.n	80060ba <__cvt+0x3e>
 80060b8:	3401      	adds	r4, #1
 80060ba:	2102      	movs	r1, #2
 80060bc:	e000      	b.n	80060c0 <__cvt+0x44>
 80060be:	2103      	movs	r1, #3
 80060c0:	ab03      	add	r3, sp, #12
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	ab02      	add	r3, sp, #8
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	ec47 6b10 	vmov	d0, r6, r7
 80060cc:	4653      	mov	r3, sl
 80060ce:	4622      	mov	r2, r4
 80060d0:	f000 fe86 	bl	8006de0 <_dtoa_r>
 80060d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80060d8:	4605      	mov	r5, r0
 80060da:	d119      	bne.n	8006110 <__cvt+0x94>
 80060dc:	f019 0f01 	tst.w	r9, #1
 80060e0:	d00e      	beq.n	8006100 <__cvt+0x84>
 80060e2:	eb00 0904 	add.w	r9, r0, r4
 80060e6:	2200      	movs	r2, #0
 80060e8:	2300      	movs	r3, #0
 80060ea:	4630      	mov	r0, r6
 80060ec:	4639      	mov	r1, r7
 80060ee:	f7fa fceb 	bl	8000ac8 <__aeabi_dcmpeq>
 80060f2:	b108      	cbz	r0, 80060f8 <__cvt+0x7c>
 80060f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80060f8:	2230      	movs	r2, #48	@ 0x30
 80060fa:	9b03      	ldr	r3, [sp, #12]
 80060fc:	454b      	cmp	r3, r9
 80060fe:	d31e      	bcc.n	800613e <__cvt+0xc2>
 8006100:	9b03      	ldr	r3, [sp, #12]
 8006102:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006104:	1b5b      	subs	r3, r3, r5
 8006106:	4628      	mov	r0, r5
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	b004      	add	sp, #16
 800610c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006110:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006114:	eb00 0904 	add.w	r9, r0, r4
 8006118:	d1e5      	bne.n	80060e6 <__cvt+0x6a>
 800611a:	7803      	ldrb	r3, [r0, #0]
 800611c:	2b30      	cmp	r3, #48	@ 0x30
 800611e:	d10a      	bne.n	8006136 <__cvt+0xba>
 8006120:	2200      	movs	r2, #0
 8006122:	2300      	movs	r3, #0
 8006124:	4630      	mov	r0, r6
 8006126:	4639      	mov	r1, r7
 8006128:	f7fa fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 800612c:	b918      	cbnz	r0, 8006136 <__cvt+0xba>
 800612e:	f1c4 0401 	rsb	r4, r4, #1
 8006132:	f8ca 4000 	str.w	r4, [sl]
 8006136:	f8da 3000 	ldr.w	r3, [sl]
 800613a:	4499      	add	r9, r3
 800613c:	e7d3      	b.n	80060e6 <__cvt+0x6a>
 800613e:	1c59      	adds	r1, r3, #1
 8006140:	9103      	str	r1, [sp, #12]
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	e7d9      	b.n	80060fa <__cvt+0x7e>

08006146 <__exponent>:
 8006146:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006148:	2900      	cmp	r1, #0
 800614a:	bfba      	itte	lt
 800614c:	4249      	neglt	r1, r1
 800614e:	232d      	movlt	r3, #45	@ 0x2d
 8006150:	232b      	movge	r3, #43	@ 0x2b
 8006152:	2909      	cmp	r1, #9
 8006154:	7002      	strb	r2, [r0, #0]
 8006156:	7043      	strb	r3, [r0, #1]
 8006158:	dd29      	ble.n	80061ae <__exponent+0x68>
 800615a:	f10d 0307 	add.w	r3, sp, #7
 800615e:	461d      	mov	r5, r3
 8006160:	270a      	movs	r7, #10
 8006162:	461a      	mov	r2, r3
 8006164:	fbb1 f6f7 	udiv	r6, r1, r7
 8006168:	fb07 1416 	mls	r4, r7, r6, r1
 800616c:	3430      	adds	r4, #48	@ 0x30
 800616e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006172:	460c      	mov	r4, r1
 8006174:	2c63      	cmp	r4, #99	@ 0x63
 8006176:	f103 33ff 	add.w	r3, r3, #4294967295
 800617a:	4631      	mov	r1, r6
 800617c:	dcf1      	bgt.n	8006162 <__exponent+0x1c>
 800617e:	3130      	adds	r1, #48	@ 0x30
 8006180:	1e94      	subs	r4, r2, #2
 8006182:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006186:	1c41      	adds	r1, r0, #1
 8006188:	4623      	mov	r3, r4
 800618a:	42ab      	cmp	r3, r5
 800618c:	d30a      	bcc.n	80061a4 <__exponent+0x5e>
 800618e:	f10d 0309 	add.w	r3, sp, #9
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	42ac      	cmp	r4, r5
 8006196:	bf88      	it	hi
 8006198:	2300      	movhi	r3, #0
 800619a:	3302      	adds	r3, #2
 800619c:	4403      	add	r3, r0
 800619e:	1a18      	subs	r0, r3, r0
 80061a0:	b003      	add	sp, #12
 80061a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80061a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80061ac:	e7ed      	b.n	800618a <__exponent+0x44>
 80061ae:	2330      	movs	r3, #48	@ 0x30
 80061b0:	3130      	adds	r1, #48	@ 0x30
 80061b2:	7083      	strb	r3, [r0, #2]
 80061b4:	70c1      	strb	r1, [r0, #3]
 80061b6:	1d03      	adds	r3, r0, #4
 80061b8:	e7f1      	b.n	800619e <__exponent+0x58>
	...

080061bc <_printf_float>:
 80061bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c0:	b08d      	sub	sp, #52	@ 0x34
 80061c2:	460c      	mov	r4, r1
 80061c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80061c8:	4616      	mov	r6, r2
 80061ca:	461f      	mov	r7, r3
 80061cc:	4605      	mov	r5, r0
 80061ce:	f000 fd05 	bl	8006bdc <_localeconv_r>
 80061d2:	6803      	ldr	r3, [r0, #0]
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fa f84a 	bl	8000270 <strlen>
 80061dc:	2300      	movs	r3, #0
 80061de:	930a      	str	r3, [sp, #40]	@ 0x28
 80061e0:	f8d8 3000 	ldr.w	r3, [r8]
 80061e4:	9005      	str	r0, [sp, #20]
 80061e6:	3307      	adds	r3, #7
 80061e8:	f023 0307 	bic.w	r3, r3, #7
 80061ec:	f103 0208 	add.w	r2, r3, #8
 80061f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80061f4:	f8d4 b000 	ldr.w	fp, [r4]
 80061f8:	f8c8 2000 	str.w	r2, [r8]
 80061fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006200:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006204:	9307      	str	r3, [sp, #28]
 8006206:	f8cd 8018 	str.w	r8, [sp, #24]
 800620a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800620e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006212:	4b9c      	ldr	r3, [pc, #624]	@ (8006484 <_printf_float+0x2c8>)
 8006214:	f04f 32ff 	mov.w	r2, #4294967295
 8006218:	f7fa fc88 	bl	8000b2c <__aeabi_dcmpun>
 800621c:	bb70      	cbnz	r0, 800627c <_printf_float+0xc0>
 800621e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006222:	4b98      	ldr	r3, [pc, #608]	@ (8006484 <_printf_float+0x2c8>)
 8006224:	f04f 32ff 	mov.w	r2, #4294967295
 8006228:	f7fa fc62 	bl	8000af0 <__aeabi_dcmple>
 800622c:	bb30      	cbnz	r0, 800627c <_printf_float+0xc0>
 800622e:	2200      	movs	r2, #0
 8006230:	2300      	movs	r3, #0
 8006232:	4640      	mov	r0, r8
 8006234:	4649      	mov	r1, r9
 8006236:	f7fa fc51 	bl	8000adc <__aeabi_dcmplt>
 800623a:	b110      	cbz	r0, 8006242 <_printf_float+0x86>
 800623c:	232d      	movs	r3, #45	@ 0x2d
 800623e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006242:	4a91      	ldr	r2, [pc, #580]	@ (8006488 <_printf_float+0x2cc>)
 8006244:	4b91      	ldr	r3, [pc, #580]	@ (800648c <_printf_float+0x2d0>)
 8006246:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800624a:	bf94      	ite	ls
 800624c:	4690      	movls	r8, r2
 800624e:	4698      	movhi	r8, r3
 8006250:	2303      	movs	r3, #3
 8006252:	6123      	str	r3, [r4, #16]
 8006254:	f02b 0304 	bic.w	r3, fp, #4
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	f04f 0900 	mov.w	r9, #0
 800625e:	9700      	str	r7, [sp, #0]
 8006260:	4633      	mov	r3, r6
 8006262:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006264:	4621      	mov	r1, r4
 8006266:	4628      	mov	r0, r5
 8006268:	f000 f9d2 	bl	8006610 <_printf_common>
 800626c:	3001      	adds	r0, #1
 800626e:	f040 808d 	bne.w	800638c <_printf_float+0x1d0>
 8006272:	f04f 30ff 	mov.w	r0, #4294967295
 8006276:	b00d      	add	sp, #52	@ 0x34
 8006278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627c:	4642      	mov	r2, r8
 800627e:	464b      	mov	r3, r9
 8006280:	4640      	mov	r0, r8
 8006282:	4649      	mov	r1, r9
 8006284:	f7fa fc52 	bl	8000b2c <__aeabi_dcmpun>
 8006288:	b140      	cbz	r0, 800629c <_printf_float+0xe0>
 800628a:	464b      	mov	r3, r9
 800628c:	2b00      	cmp	r3, #0
 800628e:	bfbc      	itt	lt
 8006290:	232d      	movlt	r3, #45	@ 0x2d
 8006292:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006296:	4a7e      	ldr	r2, [pc, #504]	@ (8006490 <_printf_float+0x2d4>)
 8006298:	4b7e      	ldr	r3, [pc, #504]	@ (8006494 <_printf_float+0x2d8>)
 800629a:	e7d4      	b.n	8006246 <_printf_float+0x8a>
 800629c:	6863      	ldr	r3, [r4, #4]
 800629e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80062a2:	9206      	str	r2, [sp, #24]
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	d13b      	bne.n	8006320 <_printf_float+0x164>
 80062a8:	2306      	movs	r3, #6
 80062aa:	6063      	str	r3, [r4, #4]
 80062ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80062b0:	2300      	movs	r3, #0
 80062b2:	6022      	str	r2, [r4, #0]
 80062b4:	9303      	str	r3, [sp, #12]
 80062b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80062b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80062bc:	ab09      	add	r3, sp, #36	@ 0x24
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	6861      	ldr	r1, [r4, #4]
 80062c2:	ec49 8b10 	vmov	d0, r8, r9
 80062c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80062ca:	4628      	mov	r0, r5
 80062cc:	f7ff fed6 	bl	800607c <__cvt>
 80062d0:	9b06      	ldr	r3, [sp, #24]
 80062d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80062d4:	2b47      	cmp	r3, #71	@ 0x47
 80062d6:	4680      	mov	r8, r0
 80062d8:	d129      	bne.n	800632e <_printf_float+0x172>
 80062da:	1cc8      	adds	r0, r1, #3
 80062dc:	db02      	blt.n	80062e4 <_printf_float+0x128>
 80062de:	6863      	ldr	r3, [r4, #4]
 80062e0:	4299      	cmp	r1, r3
 80062e2:	dd41      	ble.n	8006368 <_printf_float+0x1ac>
 80062e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80062e8:	fa5f fa8a 	uxtb.w	sl, sl
 80062ec:	3901      	subs	r1, #1
 80062ee:	4652      	mov	r2, sl
 80062f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80062f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80062f6:	f7ff ff26 	bl	8006146 <__exponent>
 80062fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062fc:	1813      	adds	r3, r2, r0
 80062fe:	2a01      	cmp	r2, #1
 8006300:	4681      	mov	r9, r0
 8006302:	6123      	str	r3, [r4, #16]
 8006304:	dc02      	bgt.n	800630c <_printf_float+0x150>
 8006306:	6822      	ldr	r2, [r4, #0]
 8006308:	07d2      	lsls	r2, r2, #31
 800630a:	d501      	bpl.n	8006310 <_printf_float+0x154>
 800630c:	3301      	adds	r3, #1
 800630e:	6123      	str	r3, [r4, #16]
 8006310:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0a2      	beq.n	800625e <_printf_float+0xa2>
 8006318:	232d      	movs	r3, #45	@ 0x2d
 800631a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800631e:	e79e      	b.n	800625e <_printf_float+0xa2>
 8006320:	9a06      	ldr	r2, [sp, #24]
 8006322:	2a47      	cmp	r2, #71	@ 0x47
 8006324:	d1c2      	bne.n	80062ac <_printf_float+0xf0>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1c0      	bne.n	80062ac <_printf_float+0xf0>
 800632a:	2301      	movs	r3, #1
 800632c:	e7bd      	b.n	80062aa <_printf_float+0xee>
 800632e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006332:	d9db      	bls.n	80062ec <_printf_float+0x130>
 8006334:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006338:	d118      	bne.n	800636c <_printf_float+0x1b0>
 800633a:	2900      	cmp	r1, #0
 800633c:	6863      	ldr	r3, [r4, #4]
 800633e:	dd0b      	ble.n	8006358 <_printf_float+0x19c>
 8006340:	6121      	str	r1, [r4, #16]
 8006342:	b913      	cbnz	r3, 800634a <_printf_float+0x18e>
 8006344:	6822      	ldr	r2, [r4, #0]
 8006346:	07d0      	lsls	r0, r2, #31
 8006348:	d502      	bpl.n	8006350 <_printf_float+0x194>
 800634a:	3301      	adds	r3, #1
 800634c:	440b      	add	r3, r1
 800634e:	6123      	str	r3, [r4, #16]
 8006350:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006352:	f04f 0900 	mov.w	r9, #0
 8006356:	e7db      	b.n	8006310 <_printf_float+0x154>
 8006358:	b913      	cbnz	r3, 8006360 <_printf_float+0x1a4>
 800635a:	6822      	ldr	r2, [r4, #0]
 800635c:	07d2      	lsls	r2, r2, #31
 800635e:	d501      	bpl.n	8006364 <_printf_float+0x1a8>
 8006360:	3302      	adds	r3, #2
 8006362:	e7f4      	b.n	800634e <_printf_float+0x192>
 8006364:	2301      	movs	r3, #1
 8006366:	e7f2      	b.n	800634e <_printf_float+0x192>
 8006368:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800636c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800636e:	4299      	cmp	r1, r3
 8006370:	db05      	blt.n	800637e <_printf_float+0x1c2>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	6121      	str	r1, [r4, #16]
 8006376:	07d8      	lsls	r0, r3, #31
 8006378:	d5ea      	bpl.n	8006350 <_printf_float+0x194>
 800637a:	1c4b      	adds	r3, r1, #1
 800637c:	e7e7      	b.n	800634e <_printf_float+0x192>
 800637e:	2900      	cmp	r1, #0
 8006380:	bfd4      	ite	le
 8006382:	f1c1 0202 	rsble	r2, r1, #2
 8006386:	2201      	movgt	r2, #1
 8006388:	4413      	add	r3, r2
 800638a:	e7e0      	b.n	800634e <_printf_float+0x192>
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	055a      	lsls	r2, r3, #21
 8006390:	d407      	bmi.n	80063a2 <_printf_float+0x1e6>
 8006392:	6923      	ldr	r3, [r4, #16]
 8006394:	4642      	mov	r2, r8
 8006396:	4631      	mov	r1, r6
 8006398:	4628      	mov	r0, r5
 800639a:	47b8      	blx	r7
 800639c:	3001      	adds	r0, #1
 800639e:	d12b      	bne.n	80063f8 <_printf_float+0x23c>
 80063a0:	e767      	b.n	8006272 <_printf_float+0xb6>
 80063a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063a6:	f240 80dd 	bls.w	8006564 <_printf_float+0x3a8>
 80063aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80063ae:	2200      	movs	r2, #0
 80063b0:	2300      	movs	r3, #0
 80063b2:	f7fa fb89 	bl	8000ac8 <__aeabi_dcmpeq>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d033      	beq.n	8006422 <_printf_float+0x266>
 80063ba:	4a37      	ldr	r2, [pc, #220]	@ (8006498 <_printf_float+0x2dc>)
 80063bc:	2301      	movs	r3, #1
 80063be:	4631      	mov	r1, r6
 80063c0:	4628      	mov	r0, r5
 80063c2:	47b8      	blx	r7
 80063c4:	3001      	adds	r0, #1
 80063c6:	f43f af54 	beq.w	8006272 <_printf_float+0xb6>
 80063ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80063ce:	4543      	cmp	r3, r8
 80063d0:	db02      	blt.n	80063d8 <_printf_float+0x21c>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	07d8      	lsls	r0, r3, #31
 80063d6:	d50f      	bpl.n	80063f8 <_printf_float+0x23c>
 80063d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063dc:	4631      	mov	r1, r6
 80063de:	4628      	mov	r0, r5
 80063e0:	47b8      	blx	r7
 80063e2:	3001      	adds	r0, #1
 80063e4:	f43f af45 	beq.w	8006272 <_printf_float+0xb6>
 80063e8:	f04f 0900 	mov.w	r9, #0
 80063ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80063f0:	f104 0a1a 	add.w	sl, r4, #26
 80063f4:	45c8      	cmp	r8, r9
 80063f6:	dc09      	bgt.n	800640c <_printf_float+0x250>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	079b      	lsls	r3, r3, #30
 80063fc:	f100 8103 	bmi.w	8006606 <_printf_float+0x44a>
 8006400:	68e0      	ldr	r0, [r4, #12]
 8006402:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006404:	4298      	cmp	r0, r3
 8006406:	bfb8      	it	lt
 8006408:	4618      	movlt	r0, r3
 800640a:	e734      	b.n	8006276 <_printf_float+0xba>
 800640c:	2301      	movs	r3, #1
 800640e:	4652      	mov	r2, sl
 8006410:	4631      	mov	r1, r6
 8006412:	4628      	mov	r0, r5
 8006414:	47b8      	blx	r7
 8006416:	3001      	adds	r0, #1
 8006418:	f43f af2b 	beq.w	8006272 <_printf_float+0xb6>
 800641c:	f109 0901 	add.w	r9, r9, #1
 8006420:	e7e8      	b.n	80063f4 <_printf_float+0x238>
 8006422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	dc39      	bgt.n	800649c <_printf_float+0x2e0>
 8006428:	4a1b      	ldr	r2, [pc, #108]	@ (8006498 <_printf_float+0x2dc>)
 800642a:	2301      	movs	r3, #1
 800642c:	4631      	mov	r1, r6
 800642e:	4628      	mov	r0, r5
 8006430:	47b8      	blx	r7
 8006432:	3001      	adds	r0, #1
 8006434:	f43f af1d 	beq.w	8006272 <_printf_float+0xb6>
 8006438:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800643c:	ea59 0303 	orrs.w	r3, r9, r3
 8006440:	d102      	bne.n	8006448 <_printf_float+0x28c>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	07d9      	lsls	r1, r3, #31
 8006446:	d5d7      	bpl.n	80063f8 <_printf_float+0x23c>
 8006448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800644c:	4631      	mov	r1, r6
 800644e:	4628      	mov	r0, r5
 8006450:	47b8      	blx	r7
 8006452:	3001      	adds	r0, #1
 8006454:	f43f af0d 	beq.w	8006272 <_printf_float+0xb6>
 8006458:	f04f 0a00 	mov.w	sl, #0
 800645c:	f104 0b1a 	add.w	fp, r4, #26
 8006460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006462:	425b      	negs	r3, r3
 8006464:	4553      	cmp	r3, sl
 8006466:	dc01      	bgt.n	800646c <_printf_float+0x2b0>
 8006468:	464b      	mov	r3, r9
 800646a:	e793      	b.n	8006394 <_printf_float+0x1d8>
 800646c:	2301      	movs	r3, #1
 800646e:	465a      	mov	r2, fp
 8006470:	4631      	mov	r1, r6
 8006472:	4628      	mov	r0, r5
 8006474:	47b8      	blx	r7
 8006476:	3001      	adds	r0, #1
 8006478:	f43f aefb 	beq.w	8006272 <_printf_float+0xb6>
 800647c:	f10a 0a01 	add.w	sl, sl, #1
 8006480:	e7ee      	b.n	8006460 <_printf_float+0x2a4>
 8006482:	bf00      	nop
 8006484:	7fefffff 	.word	0x7fefffff
 8006488:	08008e84 	.word	0x08008e84
 800648c:	08008e88 	.word	0x08008e88
 8006490:	08008e8c 	.word	0x08008e8c
 8006494:	08008e90 	.word	0x08008e90
 8006498:	08008e94 	.word	0x08008e94
 800649c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800649e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80064a2:	4553      	cmp	r3, sl
 80064a4:	bfa8      	it	ge
 80064a6:	4653      	movge	r3, sl
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	4699      	mov	r9, r3
 80064ac:	dc36      	bgt.n	800651c <_printf_float+0x360>
 80064ae:	f04f 0b00 	mov.w	fp, #0
 80064b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064b6:	f104 021a 	add.w	r2, r4, #26
 80064ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064bc:	9306      	str	r3, [sp, #24]
 80064be:	eba3 0309 	sub.w	r3, r3, r9
 80064c2:	455b      	cmp	r3, fp
 80064c4:	dc31      	bgt.n	800652a <_printf_float+0x36e>
 80064c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064c8:	459a      	cmp	sl, r3
 80064ca:	dc3a      	bgt.n	8006542 <_printf_float+0x386>
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	07da      	lsls	r2, r3, #31
 80064d0:	d437      	bmi.n	8006542 <_printf_float+0x386>
 80064d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d4:	ebaa 0903 	sub.w	r9, sl, r3
 80064d8:	9b06      	ldr	r3, [sp, #24]
 80064da:	ebaa 0303 	sub.w	r3, sl, r3
 80064de:	4599      	cmp	r9, r3
 80064e0:	bfa8      	it	ge
 80064e2:	4699      	movge	r9, r3
 80064e4:	f1b9 0f00 	cmp.w	r9, #0
 80064e8:	dc33      	bgt.n	8006552 <_printf_float+0x396>
 80064ea:	f04f 0800 	mov.w	r8, #0
 80064ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064f2:	f104 0b1a 	add.w	fp, r4, #26
 80064f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f8:	ebaa 0303 	sub.w	r3, sl, r3
 80064fc:	eba3 0309 	sub.w	r3, r3, r9
 8006500:	4543      	cmp	r3, r8
 8006502:	f77f af79 	ble.w	80063f8 <_printf_float+0x23c>
 8006506:	2301      	movs	r3, #1
 8006508:	465a      	mov	r2, fp
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	47b8      	blx	r7
 8006510:	3001      	adds	r0, #1
 8006512:	f43f aeae 	beq.w	8006272 <_printf_float+0xb6>
 8006516:	f108 0801 	add.w	r8, r8, #1
 800651a:	e7ec      	b.n	80064f6 <_printf_float+0x33a>
 800651c:	4642      	mov	r2, r8
 800651e:	4631      	mov	r1, r6
 8006520:	4628      	mov	r0, r5
 8006522:	47b8      	blx	r7
 8006524:	3001      	adds	r0, #1
 8006526:	d1c2      	bne.n	80064ae <_printf_float+0x2f2>
 8006528:	e6a3      	b.n	8006272 <_printf_float+0xb6>
 800652a:	2301      	movs	r3, #1
 800652c:	4631      	mov	r1, r6
 800652e:	4628      	mov	r0, r5
 8006530:	9206      	str	r2, [sp, #24]
 8006532:	47b8      	blx	r7
 8006534:	3001      	adds	r0, #1
 8006536:	f43f ae9c 	beq.w	8006272 <_printf_float+0xb6>
 800653a:	9a06      	ldr	r2, [sp, #24]
 800653c:	f10b 0b01 	add.w	fp, fp, #1
 8006540:	e7bb      	b.n	80064ba <_printf_float+0x2fe>
 8006542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006546:	4631      	mov	r1, r6
 8006548:	4628      	mov	r0, r5
 800654a:	47b8      	blx	r7
 800654c:	3001      	adds	r0, #1
 800654e:	d1c0      	bne.n	80064d2 <_printf_float+0x316>
 8006550:	e68f      	b.n	8006272 <_printf_float+0xb6>
 8006552:	9a06      	ldr	r2, [sp, #24]
 8006554:	464b      	mov	r3, r9
 8006556:	4442      	add	r2, r8
 8006558:	4631      	mov	r1, r6
 800655a:	4628      	mov	r0, r5
 800655c:	47b8      	blx	r7
 800655e:	3001      	adds	r0, #1
 8006560:	d1c3      	bne.n	80064ea <_printf_float+0x32e>
 8006562:	e686      	b.n	8006272 <_printf_float+0xb6>
 8006564:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006568:	f1ba 0f01 	cmp.w	sl, #1
 800656c:	dc01      	bgt.n	8006572 <_printf_float+0x3b6>
 800656e:	07db      	lsls	r3, r3, #31
 8006570:	d536      	bpl.n	80065e0 <_printf_float+0x424>
 8006572:	2301      	movs	r3, #1
 8006574:	4642      	mov	r2, r8
 8006576:	4631      	mov	r1, r6
 8006578:	4628      	mov	r0, r5
 800657a:	47b8      	blx	r7
 800657c:	3001      	adds	r0, #1
 800657e:	f43f ae78 	beq.w	8006272 <_printf_float+0xb6>
 8006582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006586:	4631      	mov	r1, r6
 8006588:	4628      	mov	r0, r5
 800658a:	47b8      	blx	r7
 800658c:	3001      	adds	r0, #1
 800658e:	f43f ae70 	beq.w	8006272 <_printf_float+0xb6>
 8006592:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006596:	2200      	movs	r2, #0
 8006598:	2300      	movs	r3, #0
 800659a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800659e:	f7fa fa93 	bl	8000ac8 <__aeabi_dcmpeq>
 80065a2:	b9c0      	cbnz	r0, 80065d6 <_printf_float+0x41a>
 80065a4:	4653      	mov	r3, sl
 80065a6:	f108 0201 	add.w	r2, r8, #1
 80065aa:	4631      	mov	r1, r6
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b8      	blx	r7
 80065b0:	3001      	adds	r0, #1
 80065b2:	d10c      	bne.n	80065ce <_printf_float+0x412>
 80065b4:	e65d      	b.n	8006272 <_printf_float+0xb6>
 80065b6:	2301      	movs	r3, #1
 80065b8:	465a      	mov	r2, fp
 80065ba:	4631      	mov	r1, r6
 80065bc:	4628      	mov	r0, r5
 80065be:	47b8      	blx	r7
 80065c0:	3001      	adds	r0, #1
 80065c2:	f43f ae56 	beq.w	8006272 <_printf_float+0xb6>
 80065c6:	f108 0801 	add.w	r8, r8, #1
 80065ca:	45d0      	cmp	r8, sl
 80065cc:	dbf3      	blt.n	80065b6 <_printf_float+0x3fa>
 80065ce:	464b      	mov	r3, r9
 80065d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80065d4:	e6df      	b.n	8006396 <_printf_float+0x1da>
 80065d6:	f04f 0800 	mov.w	r8, #0
 80065da:	f104 0b1a 	add.w	fp, r4, #26
 80065de:	e7f4      	b.n	80065ca <_printf_float+0x40e>
 80065e0:	2301      	movs	r3, #1
 80065e2:	4642      	mov	r2, r8
 80065e4:	e7e1      	b.n	80065aa <_printf_float+0x3ee>
 80065e6:	2301      	movs	r3, #1
 80065e8:	464a      	mov	r2, r9
 80065ea:	4631      	mov	r1, r6
 80065ec:	4628      	mov	r0, r5
 80065ee:	47b8      	blx	r7
 80065f0:	3001      	adds	r0, #1
 80065f2:	f43f ae3e 	beq.w	8006272 <_printf_float+0xb6>
 80065f6:	f108 0801 	add.w	r8, r8, #1
 80065fa:	68e3      	ldr	r3, [r4, #12]
 80065fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065fe:	1a5b      	subs	r3, r3, r1
 8006600:	4543      	cmp	r3, r8
 8006602:	dcf0      	bgt.n	80065e6 <_printf_float+0x42a>
 8006604:	e6fc      	b.n	8006400 <_printf_float+0x244>
 8006606:	f04f 0800 	mov.w	r8, #0
 800660a:	f104 0919 	add.w	r9, r4, #25
 800660e:	e7f4      	b.n	80065fa <_printf_float+0x43e>

08006610 <_printf_common>:
 8006610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	4616      	mov	r6, r2
 8006616:	4698      	mov	r8, r3
 8006618:	688a      	ldr	r2, [r1, #8]
 800661a:	690b      	ldr	r3, [r1, #16]
 800661c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006620:	4293      	cmp	r3, r2
 8006622:	bfb8      	it	lt
 8006624:	4613      	movlt	r3, r2
 8006626:	6033      	str	r3, [r6, #0]
 8006628:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800662c:	4607      	mov	r7, r0
 800662e:	460c      	mov	r4, r1
 8006630:	b10a      	cbz	r2, 8006636 <_printf_common+0x26>
 8006632:	3301      	adds	r3, #1
 8006634:	6033      	str	r3, [r6, #0]
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	0699      	lsls	r1, r3, #26
 800663a:	bf42      	ittt	mi
 800663c:	6833      	ldrmi	r3, [r6, #0]
 800663e:	3302      	addmi	r3, #2
 8006640:	6033      	strmi	r3, [r6, #0]
 8006642:	6825      	ldr	r5, [r4, #0]
 8006644:	f015 0506 	ands.w	r5, r5, #6
 8006648:	d106      	bne.n	8006658 <_printf_common+0x48>
 800664a:	f104 0a19 	add.w	sl, r4, #25
 800664e:	68e3      	ldr	r3, [r4, #12]
 8006650:	6832      	ldr	r2, [r6, #0]
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	42ab      	cmp	r3, r5
 8006656:	dc26      	bgt.n	80066a6 <_printf_common+0x96>
 8006658:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800665c:	6822      	ldr	r2, [r4, #0]
 800665e:	3b00      	subs	r3, #0
 8006660:	bf18      	it	ne
 8006662:	2301      	movne	r3, #1
 8006664:	0692      	lsls	r2, r2, #26
 8006666:	d42b      	bmi.n	80066c0 <_printf_common+0xb0>
 8006668:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800666c:	4641      	mov	r1, r8
 800666e:	4638      	mov	r0, r7
 8006670:	47c8      	blx	r9
 8006672:	3001      	adds	r0, #1
 8006674:	d01e      	beq.n	80066b4 <_printf_common+0xa4>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	6922      	ldr	r2, [r4, #16]
 800667a:	f003 0306 	and.w	r3, r3, #6
 800667e:	2b04      	cmp	r3, #4
 8006680:	bf02      	ittt	eq
 8006682:	68e5      	ldreq	r5, [r4, #12]
 8006684:	6833      	ldreq	r3, [r6, #0]
 8006686:	1aed      	subeq	r5, r5, r3
 8006688:	68a3      	ldr	r3, [r4, #8]
 800668a:	bf0c      	ite	eq
 800668c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006690:	2500      	movne	r5, #0
 8006692:	4293      	cmp	r3, r2
 8006694:	bfc4      	itt	gt
 8006696:	1a9b      	subgt	r3, r3, r2
 8006698:	18ed      	addgt	r5, r5, r3
 800669a:	2600      	movs	r6, #0
 800669c:	341a      	adds	r4, #26
 800669e:	42b5      	cmp	r5, r6
 80066a0:	d11a      	bne.n	80066d8 <_printf_common+0xc8>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e008      	b.n	80066b8 <_printf_common+0xa8>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4652      	mov	r2, sl
 80066aa:	4641      	mov	r1, r8
 80066ac:	4638      	mov	r0, r7
 80066ae:	47c8      	blx	r9
 80066b0:	3001      	adds	r0, #1
 80066b2:	d103      	bne.n	80066bc <_printf_common+0xac>
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295
 80066b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066bc:	3501      	adds	r5, #1
 80066be:	e7c6      	b.n	800664e <_printf_common+0x3e>
 80066c0:	18e1      	adds	r1, r4, r3
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	2030      	movs	r0, #48	@ 0x30
 80066c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066ca:	4422      	add	r2, r4
 80066cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066d4:	3302      	adds	r3, #2
 80066d6:	e7c7      	b.n	8006668 <_printf_common+0x58>
 80066d8:	2301      	movs	r3, #1
 80066da:	4622      	mov	r2, r4
 80066dc:	4641      	mov	r1, r8
 80066de:	4638      	mov	r0, r7
 80066e0:	47c8      	blx	r9
 80066e2:	3001      	adds	r0, #1
 80066e4:	d0e6      	beq.n	80066b4 <_printf_common+0xa4>
 80066e6:	3601      	adds	r6, #1
 80066e8:	e7d9      	b.n	800669e <_printf_common+0x8e>
	...

080066ec <_printf_i>:
 80066ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	7e0f      	ldrb	r7, [r1, #24]
 80066f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066f4:	2f78      	cmp	r7, #120	@ 0x78
 80066f6:	4691      	mov	r9, r2
 80066f8:	4680      	mov	r8, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	469a      	mov	sl, r3
 80066fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006702:	d807      	bhi.n	8006714 <_printf_i+0x28>
 8006704:	2f62      	cmp	r7, #98	@ 0x62
 8006706:	d80a      	bhi.n	800671e <_printf_i+0x32>
 8006708:	2f00      	cmp	r7, #0
 800670a:	f000 80d2 	beq.w	80068b2 <_printf_i+0x1c6>
 800670e:	2f58      	cmp	r7, #88	@ 0x58
 8006710:	f000 80b9 	beq.w	8006886 <_printf_i+0x19a>
 8006714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006718:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800671c:	e03a      	b.n	8006794 <_printf_i+0xa8>
 800671e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006722:	2b15      	cmp	r3, #21
 8006724:	d8f6      	bhi.n	8006714 <_printf_i+0x28>
 8006726:	a101      	add	r1, pc, #4	@ (adr r1, 800672c <_printf_i+0x40>)
 8006728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800672c:	08006785 	.word	0x08006785
 8006730:	08006799 	.word	0x08006799
 8006734:	08006715 	.word	0x08006715
 8006738:	08006715 	.word	0x08006715
 800673c:	08006715 	.word	0x08006715
 8006740:	08006715 	.word	0x08006715
 8006744:	08006799 	.word	0x08006799
 8006748:	08006715 	.word	0x08006715
 800674c:	08006715 	.word	0x08006715
 8006750:	08006715 	.word	0x08006715
 8006754:	08006715 	.word	0x08006715
 8006758:	08006899 	.word	0x08006899
 800675c:	080067c3 	.word	0x080067c3
 8006760:	08006853 	.word	0x08006853
 8006764:	08006715 	.word	0x08006715
 8006768:	08006715 	.word	0x08006715
 800676c:	080068bb 	.word	0x080068bb
 8006770:	08006715 	.word	0x08006715
 8006774:	080067c3 	.word	0x080067c3
 8006778:	08006715 	.word	0x08006715
 800677c:	08006715 	.word	0x08006715
 8006780:	0800685b 	.word	0x0800685b
 8006784:	6833      	ldr	r3, [r6, #0]
 8006786:	1d1a      	adds	r2, r3, #4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6032      	str	r2, [r6, #0]
 800678c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006790:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006794:	2301      	movs	r3, #1
 8006796:	e09d      	b.n	80068d4 <_printf_i+0x1e8>
 8006798:	6833      	ldr	r3, [r6, #0]
 800679a:	6820      	ldr	r0, [r4, #0]
 800679c:	1d19      	adds	r1, r3, #4
 800679e:	6031      	str	r1, [r6, #0]
 80067a0:	0606      	lsls	r6, r0, #24
 80067a2:	d501      	bpl.n	80067a8 <_printf_i+0xbc>
 80067a4:	681d      	ldr	r5, [r3, #0]
 80067a6:	e003      	b.n	80067b0 <_printf_i+0xc4>
 80067a8:	0645      	lsls	r5, r0, #25
 80067aa:	d5fb      	bpl.n	80067a4 <_printf_i+0xb8>
 80067ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	da03      	bge.n	80067bc <_printf_i+0xd0>
 80067b4:	232d      	movs	r3, #45	@ 0x2d
 80067b6:	426d      	negs	r5, r5
 80067b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067bc:	4859      	ldr	r0, [pc, #356]	@ (8006924 <_printf_i+0x238>)
 80067be:	230a      	movs	r3, #10
 80067c0:	e011      	b.n	80067e6 <_printf_i+0xfa>
 80067c2:	6821      	ldr	r1, [r4, #0]
 80067c4:	6833      	ldr	r3, [r6, #0]
 80067c6:	0608      	lsls	r0, r1, #24
 80067c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80067cc:	d402      	bmi.n	80067d4 <_printf_i+0xe8>
 80067ce:	0649      	lsls	r1, r1, #25
 80067d0:	bf48      	it	mi
 80067d2:	b2ad      	uxthmi	r5, r5
 80067d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80067d6:	4853      	ldr	r0, [pc, #332]	@ (8006924 <_printf_i+0x238>)
 80067d8:	6033      	str	r3, [r6, #0]
 80067da:	bf14      	ite	ne
 80067dc:	230a      	movne	r3, #10
 80067de:	2308      	moveq	r3, #8
 80067e0:	2100      	movs	r1, #0
 80067e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067e6:	6866      	ldr	r6, [r4, #4]
 80067e8:	60a6      	str	r6, [r4, #8]
 80067ea:	2e00      	cmp	r6, #0
 80067ec:	bfa2      	ittt	ge
 80067ee:	6821      	ldrge	r1, [r4, #0]
 80067f0:	f021 0104 	bicge.w	r1, r1, #4
 80067f4:	6021      	strge	r1, [r4, #0]
 80067f6:	b90d      	cbnz	r5, 80067fc <_printf_i+0x110>
 80067f8:	2e00      	cmp	r6, #0
 80067fa:	d04b      	beq.n	8006894 <_printf_i+0x1a8>
 80067fc:	4616      	mov	r6, r2
 80067fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006802:	fb03 5711 	mls	r7, r3, r1, r5
 8006806:	5dc7      	ldrb	r7, [r0, r7]
 8006808:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800680c:	462f      	mov	r7, r5
 800680e:	42bb      	cmp	r3, r7
 8006810:	460d      	mov	r5, r1
 8006812:	d9f4      	bls.n	80067fe <_printf_i+0x112>
 8006814:	2b08      	cmp	r3, #8
 8006816:	d10b      	bne.n	8006830 <_printf_i+0x144>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	07df      	lsls	r7, r3, #31
 800681c:	d508      	bpl.n	8006830 <_printf_i+0x144>
 800681e:	6923      	ldr	r3, [r4, #16]
 8006820:	6861      	ldr	r1, [r4, #4]
 8006822:	4299      	cmp	r1, r3
 8006824:	bfde      	ittt	le
 8006826:	2330      	movle	r3, #48	@ 0x30
 8006828:	f806 3c01 	strble.w	r3, [r6, #-1]
 800682c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006830:	1b92      	subs	r2, r2, r6
 8006832:	6122      	str	r2, [r4, #16]
 8006834:	f8cd a000 	str.w	sl, [sp]
 8006838:	464b      	mov	r3, r9
 800683a:	aa03      	add	r2, sp, #12
 800683c:	4621      	mov	r1, r4
 800683e:	4640      	mov	r0, r8
 8006840:	f7ff fee6 	bl	8006610 <_printf_common>
 8006844:	3001      	adds	r0, #1
 8006846:	d14a      	bne.n	80068de <_printf_i+0x1f2>
 8006848:	f04f 30ff 	mov.w	r0, #4294967295
 800684c:	b004      	add	sp, #16
 800684e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	f043 0320 	orr.w	r3, r3, #32
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	4833      	ldr	r0, [pc, #204]	@ (8006928 <_printf_i+0x23c>)
 800685c:	2778      	movs	r7, #120	@ 0x78
 800685e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	6831      	ldr	r1, [r6, #0]
 8006866:	061f      	lsls	r7, r3, #24
 8006868:	f851 5b04 	ldr.w	r5, [r1], #4
 800686c:	d402      	bmi.n	8006874 <_printf_i+0x188>
 800686e:	065f      	lsls	r7, r3, #25
 8006870:	bf48      	it	mi
 8006872:	b2ad      	uxthmi	r5, r5
 8006874:	6031      	str	r1, [r6, #0]
 8006876:	07d9      	lsls	r1, r3, #31
 8006878:	bf44      	itt	mi
 800687a:	f043 0320 	orrmi.w	r3, r3, #32
 800687e:	6023      	strmi	r3, [r4, #0]
 8006880:	b11d      	cbz	r5, 800688a <_printf_i+0x19e>
 8006882:	2310      	movs	r3, #16
 8006884:	e7ac      	b.n	80067e0 <_printf_i+0xf4>
 8006886:	4827      	ldr	r0, [pc, #156]	@ (8006924 <_printf_i+0x238>)
 8006888:	e7e9      	b.n	800685e <_printf_i+0x172>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	f023 0320 	bic.w	r3, r3, #32
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	e7f6      	b.n	8006882 <_printf_i+0x196>
 8006894:	4616      	mov	r6, r2
 8006896:	e7bd      	b.n	8006814 <_printf_i+0x128>
 8006898:	6833      	ldr	r3, [r6, #0]
 800689a:	6825      	ldr	r5, [r4, #0]
 800689c:	6961      	ldr	r1, [r4, #20]
 800689e:	1d18      	adds	r0, r3, #4
 80068a0:	6030      	str	r0, [r6, #0]
 80068a2:	062e      	lsls	r6, r5, #24
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	d501      	bpl.n	80068ac <_printf_i+0x1c0>
 80068a8:	6019      	str	r1, [r3, #0]
 80068aa:	e002      	b.n	80068b2 <_printf_i+0x1c6>
 80068ac:	0668      	lsls	r0, r5, #25
 80068ae:	d5fb      	bpl.n	80068a8 <_printf_i+0x1bc>
 80068b0:	8019      	strh	r1, [r3, #0]
 80068b2:	2300      	movs	r3, #0
 80068b4:	6123      	str	r3, [r4, #16]
 80068b6:	4616      	mov	r6, r2
 80068b8:	e7bc      	b.n	8006834 <_printf_i+0x148>
 80068ba:	6833      	ldr	r3, [r6, #0]
 80068bc:	1d1a      	adds	r2, r3, #4
 80068be:	6032      	str	r2, [r6, #0]
 80068c0:	681e      	ldr	r6, [r3, #0]
 80068c2:	6862      	ldr	r2, [r4, #4]
 80068c4:	2100      	movs	r1, #0
 80068c6:	4630      	mov	r0, r6
 80068c8:	f7f9 fc82 	bl	80001d0 <memchr>
 80068cc:	b108      	cbz	r0, 80068d2 <_printf_i+0x1e6>
 80068ce:	1b80      	subs	r0, r0, r6
 80068d0:	6060      	str	r0, [r4, #4]
 80068d2:	6863      	ldr	r3, [r4, #4]
 80068d4:	6123      	str	r3, [r4, #16]
 80068d6:	2300      	movs	r3, #0
 80068d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068dc:	e7aa      	b.n	8006834 <_printf_i+0x148>
 80068de:	6923      	ldr	r3, [r4, #16]
 80068e0:	4632      	mov	r2, r6
 80068e2:	4649      	mov	r1, r9
 80068e4:	4640      	mov	r0, r8
 80068e6:	47d0      	blx	sl
 80068e8:	3001      	adds	r0, #1
 80068ea:	d0ad      	beq.n	8006848 <_printf_i+0x15c>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	079b      	lsls	r3, r3, #30
 80068f0:	d413      	bmi.n	800691a <_printf_i+0x22e>
 80068f2:	68e0      	ldr	r0, [r4, #12]
 80068f4:	9b03      	ldr	r3, [sp, #12]
 80068f6:	4298      	cmp	r0, r3
 80068f8:	bfb8      	it	lt
 80068fa:	4618      	movlt	r0, r3
 80068fc:	e7a6      	b.n	800684c <_printf_i+0x160>
 80068fe:	2301      	movs	r3, #1
 8006900:	4632      	mov	r2, r6
 8006902:	4649      	mov	r1, r9
 8006904:	4640      	mov	r0, r8
 8006906:	47d0      	blx	sl
 8006908:	3001      	adds	r0, #1
 800690a:	d09d      	beq.n	8006848 <_printf_i+0x15c>
 800690c:	3501      	adds	r5, #1
 800690e:	68e3      	ldr	r3, [r4, #12]
 8006910:	9903      	ldr	r1, [sp, #12]
 8006912:	1a5b      	subs	r3, r3, r1
 8006914:	42ab      	cmp	r3, r5
 8006916:	dcf2      	bgt.n	80068fe <_printf_i+0x212>
 8006918:	e7eb      	b.n	80068f2 <_printf_i+0x206>
 800691a:	2500      	movs	r5, #0
 800691c:	f104 0619 	add.w	r6, r4, #25
 8006920:	e7f5      	b.n	800690e <_printf_i+0x222>
 8006922:	bf00      	nop
 8006924:	08008e96 	.word	0x08008e96
 8006928:	08008ea7 	.word	0x08008ea7

0800692c <std>:
 800692c:	2300      	movs	r3, #0
 800692e:	b510      	push	{r4, lr}
 8006930:	4604      	mov	r4, r0
 8006932:	e9c0 3300 	strd	r3, r3, [r0]
 8006936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800693a:	6083      	str	r3, [r0, #8]
 800693c:	8181      	strh	r1, [r0, #12]
 800693e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006940:	81c2      	strh	r2, [r0, #14]
 8006942:	6183      	str	r3, [r0, #24]
 8006944:	4619      	mov	r1, r3
 8006946:	2208      	movs	r2, #8
 8006948:	305c      	adds	r0, #92	@ 0x5c
 800694a:	f000 f93f 	bl	8006bcc <memset>
 800694e:	4b0d      	ldr	r3, [pc, #52]	@ (8006984 <std+0x58>)
 8006950:	6263      	str	r3, [r4, #36]	@ 0x24
 8006952:	4b0d      	ldr	r3, [pc, #52]	@ (8006988 <std+0x5c>)
 8006954:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006956:	4b0d      	ldr	r3, [pc, #52]	@ (800698c <std+0x60>)
 8006958:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800695a:	4b0d      	ldr	r3, [pc, #52]	@ (8006990 <std+0x64>)
 800695c:	6323      	str	r3, [r4, #48]	@ 0x30
 800695e:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <std+0x68>)
 8006960:	6224      	str	r4, [r4, #32]
 8006962:	429c      	cmp	r4, r3
 8006964:	d006      	beq.n	8006974 <std+0x48>
 8006966:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800696a:	4294      	cmp	r4, r2
 800696c:	d002      	beq.n	8006974 <std+0x48>
 800696e:	33d0      	adds	r3, #208	@ 0xd0
 8006970:	429c      	cmp	r4, r3
 8006972:	d105      	bne.n	8006980 <std+0x54>
 8006974:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800697c:	f000 b9a2 	b.w	8006cc4 <__retarget_lock_init_recursive>
 8006980:	bd10      	pop	{r4, pc}
 8006982:	bf00      	nop
 8006984:	08006ad5 	.word	0x08006ad5
 8006988:	08006af7 	.word	0x08006af7
 800698c:	08006b2f 	.word	0x08006b2f
 8006990:	08006b53 	.word	0x08006b53
 8006994:	2000057c 	.word	0x2000057c

08006998 <stdio_exit_handler>:
 8006998:	4a02      	ldr	r2, [pc, #8]	@ (80069a4 <stdio_exit_handler+0xc>)
 800699a:	4903      	ldr	r1, [pc, #12]	@ (80069a8 <stdio_exit_handler+0x10>)
 800699c:	4803      	ldr	r0, [pc, #12]	@ (80069ac <stdio_exit_handler+0x14>)
 800699e:	f000 b869 	b.w	8006a74 <_fwalk_sglue>
 80069a2:	bf00      	nop
 80069a4:	2000000c 	.word	0x2000000c
 80069a8:	080088a9 	.word	0x080088a9
 80069ac:	2000001c 	.word	0x2000001c

080069b0 <cleanup_stdio>:
 80069b0:	6841      	ldr	r1, [r0, #4]
 80069b2:	4b0c      	ldr	r3, [pc, #48]	@ (80069e4 <cleanup_stdio+0x34>)
 80069b4:	4299      	cmp	r1, r3
 80069b6:	b510      	push	{r4, lr}
 80069b8:	4604      	mov	r4, r0
 80069ba:	d001      	beq.n	80069c0 <cleanup_stdio+0x10>
 80069bc:	f001 ff74 	bl	80088a8 <_fflush_r>
 80069c0:	68a1      	ldr	r1, [r4, #8]
 80069c2:	4b09      	ldr	r3, [pc, #36]	@ (80069e8 <cleanup_stdio+0x38>)
 80069c4:	4299      	cmp	r1, r3
 80069c6:	d002      	beq.n	80069ce <cleanup_stdio+0x1e>
 80069c8:	4620      	mov	r0, r4
 80069ca:	f001 ff6d 	bl	80088a8 <_fflush_r>
 80069ce:	68e1      	ldr	r1, [r4, #12]
 80069d0:	4b06      	ldr	r3, [pc, #24]	@ (80069ec <cleanup_stdio+0x3c>)
 80069d2:	4299      	cmp	r1, r3
 80069d4:	d004      	beq.n	80069e0 <cleanup_stdio+0x30>
 80069d6:	4620      	mov	r0, r4
 80069d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069dc:	f001 bf64 	b.w	80088a8 <_fflush_r>
 80069e0:	bd10      	pop	{r4, pc}
 80069e2:	bf00      	nop
 80069e4:	2000057c 	.word	0x2000057c
 80069e8:	200005e4 	.word	0x200005e4
 80069ec:	2000064c 	.word	0x2000064c

080069f0 <global_stdio_init.part.0>:
 80069f0:	b510      	push	{r4, lr}
 80069f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <global_stdio_init.part.0+0x30>)
 80069f4:	4c0b      	ldr	r4, [pc, #44]	@ (8006a24 <global_stdio_init.part.0+0x34>)
 80069f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006a28 <global_stdio_init.part.0+0x38>)
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	4620      	mov	r0, r4
 80069fc:	2200      	movs	r2, #0
 80069fe:	2104      	movs	r1, #4
 8006a00:	f7ff ff94 	bl	800692c <std>
 8006a04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a08:	2201      	movs	r2, #1
 8006a0a:	2109      	movs	r1, #9
 8006a0c:	f7ff ff8e 	bl	800692c <std>
 8006a10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a14:	2202      	movs	r2, #2
 8006a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a1a:	2112      	movs	r1, #18
 8006a1c:	f7ff bf86 	b.w	800692c <std>
 8006a20:	200006b4 	.word	0x200006b4
 8006a24:	2000057c 	.word	0x2000057c
 8006a28:	08006999 	.word	0x08006999

08006a2c <__sfp_lock_acquire>:
 8006a2c:	4801      	ldr	r0, [pc, #4]	@ (8006a34 <__sfp_lock_acquire+0x8>)
 8006a2e:	f000 b94a 	b.w	8006cc6 <__retarget_lock_acquire_recursive>
 8006a32:	bf00      	nop
 8006a34:	200006bd 	.word	0x200006bd

08006a38 <__sfp_lock_release>:
 8006a38:	4801      	ldr	r0, [pc, #4]	@ (8006a40 <__sfp_lock_release+0x8>)
 8006a3a:	f000 b945 	b.w	8006cc8 <__retarget_lock_release_recursive>
 8006a3e:	bf00      	nop
 8006a40:	200006bd 	.word	0x200006bd

08006a44 <__sinit>:
 8006a44:	b510      	push	{r4, lr}
 8006a46:	4604      	mov	r4, r0
 8006a48:	f7ff fff0 	bl	8006a2c <__sfp_lock_acquire>
 8006a4c:	6a23      	ldr	r3, [r4, #32]
 8006a4e:	b11b      	cbz	r3, 8006a58 <__sinit+0x14>
 8006a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a54:	f7ff bff0 	b.w	8006a38 <__sfp_lock_release>
 8006a58:	4b04      	ldr	r3, [pc, #16]	@ (8006a6c <__sinit+0x28>)
 8006a5a:	6223      	str	r3, [r4, #32]
 8006a5c:	4b04      	ldr	r3, [pc, #16]	@ (8006a70 <__sinit+0x2c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f5      	bne.n	8006a50 <__sinit+0xc>
 8006a64:	f7ff ffc4 	bl	80069f0 <global_stdio_init.part.0>
 8006a68:	e7f2      	b.n	8006a50 <__sinit+0xc>
 8006a6a:	bf00      	nop
 8006a6c:	080069b1 	.word	0x080069b1
 8006a70:	200006b4 	.word	0x200006b4

08006a74 <_fwalk_sglue>:
 8006a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a78:	4607      	mov	r7, r0
 8006a7a:	4688      	mov	r8, r1
 8006a7c:	4614      	mov	r4, r2
 8006a7e:	2600      	movs	r6, #0
 8006a80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a84:	f1b9 0901 	subs.w	r9, r9, #1
 8006a88:	d505      	bpl.n	8006a96 <_fwalk_sglue+0x22>
 8006a8a:	6824      	ldr	r4, [r4, #0]
 8006a8c:	2c00      	cmp	r4, #0
 8006a8e:	d1f7      	bne.n	8006a80 <_fwalk_sglue+0xc>
 8006a90:	4630      	mov	r0, r6
 8006a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a96:	89ab      	ldrh	r3, [r5, #12]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d907      	bls.n	8006aac <_fwalk_sglue+0x38>
 8006a9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	d003      	beq.n	8006aac <_fwalk_sglue+0x38>
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	47c0      	blx	r8
 8006aaa:	4306      	orrs	r6, r0
 8006aac:	3568      	adds	r5, #104	@ 0x68
 8006aae:	e7e9      	b.n	8006a84 <_fwalk_sglue+0x10>

08006ab0 <iprintf>:
 8006ab0:	b40f      	push	{r0, r1, r2, r3}
 8006ab2:	b507      	push	{r0, r1, r2, lr}
 8006ab4:	4906      	ldr	r1, [pc, #24]	@ (8006ad0 <iprintf+0x20>)
 8006ab6:	ab04      	add	r3, sp, #16
 8006ab8:	6808      	ldr	r0, [r1, #0]
 8006aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006abe:	6881      	ldr	r1, [r0, #8]
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	f001 fd55 	bl	8008570 <_vfiprintf_r>
 8006ac6:	b003      	add	sp, #12
 8006ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006acc:	b004      	add	sp, #16
 8006ace:	4770      	bx	lr
 8006ad0:	20000018 	.word	0x20000018

08006ad4 <__sread>:
 8006ad4:	b510      	push	{r4, lr}
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006adc:	f000 f8a4 	bl	8006c28 <_read_r>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	bfab      	itete	ge
 8006ae4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ae8:	181b      	addge	r3, r3, r0
 8006aea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006aee:	bfac      	ite	ge
 8006af0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006af2:	81a3      	strhlt	r3, [r4, #12]
 8006af4:	bd10      	pop	{r4, pc}

08006af6 <__swrite>:
 8006af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006afa:	461f      	mov	r7, r3
 8006afc:	898b      	ldrh	r3, [r1, #12]
 8006afe:	05db      	lsls	r3, r3, #23
 8006b00:	4605      	mov	r5, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	4616      	mov	r6, r2
 8006b06:	d505      	bpl.n	8006b14 <__swrite+0x1e>
 8006b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f000 f878 	bl	8006c04 <_lseek_r>
 8006b14:	89a3      	ldrh	r3, [r4, #12]
 8006b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b1e:	81a3      	strh	r3, [r4, #12]
 8006b20:	4632      	mov	r2, r6
 8006b22:	463b      	mov	r3, r7
 8006b24:	4628      	mov	r0, r5
 8006b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2a:	f000 b88f 	b.w	8006c4c <_write_r>

08006b2e <__sseek>:
 8006b2e:	b510      	push	{r4, lr}
 8006b30:	460c      	mov	r4, r1
 8006b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b36:	f000 f865 	bl	8006c04 <_lseek_r>
 8006b3a:	1c43      	adds	r3, r0, #1
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	bf15      	itete	ne
 8006b40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b4a:	81a3      	strheq	r3, [r4, #12]
 8006b4c:	bf18      	it	ne
 8006b4e:	81a3      	strhne	r3, [r4, #12]
 8006b50:	bd10      	pop	{r4, pc}

08006b52 <__sclose>:
 8006b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b56:	f000 b845 	b.w	8006be4 <_close_r>

08006b5a <_vsniprintf_r>:
 8006b5a:	b530      	push	{r4, r5, lr}
 8006b5c:	4614      	mov	r4, r2
 8006b5e:	2c00      	cmp	r4, #0
 8006b60:	b09b      	sub	sp, #108	@ 0x6c
 8006b62:	4605      	mov	r5, r0
 8006b64:	461a      	mov	r2, r3
 8006b66:	da05      	bge.n	8006b74 <_vsniprintf_r+0x1a>
 8006b68:	238b      	movs	r3, #139	@ 0x8b
 8006b6a:	6003      	str	r3, [r0, #0]
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b70:	b01b      	add	sp, #108	@ 0x6c
 8006b72:	bd30      	pop	{r4, r5, pc}
 8006b74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006b78:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006b7c:	bf14      	ite	ne
 8006b7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006b82:	4623      	moveq	r3, r4
 8006b84:	9302      	str	r3, [sp, #8]
 8006b86:	9305      	str	r3, [sp, #20]
 8006b88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b8c:	9100      	str	r1, [sp, #0]
 8006b8e:	9104      	str	r1, [sp, #16]
 8006b90:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006b94:	4669      	mov	r1, sp
 8006b96:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006b98:	f001 fbc4 	bl	8008324 <_svfiprintf_r>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	bfbc      	itt	lt
 8006ba0:	238b      	movlt	r3, #139	@ 0x8b
 8006ba2:	602b      	strlt	r3, [r5, #0]
 8006ba4:	2c00      	cmp	r4, #0
 8006ba6:	d0e3      	beq.n	8006b70 <_vsniprintf_r+0x16>
 8006ba8:	9b00      	ldr	r3, [sp, #0]
 8006baa:	2200      	movs	r2, #0
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	e7df      	b.n	8006b70 <_vsniprintf_r+0x16>

08006bb0 <vsniprintf>:
 8006bb0:	b507      	push	{r0, r1, r2, lr}
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	460a      	mov	r2, r1
 8006bb8:	4601      	mov	r1, r0
 8006bba:	4803      	ldr	r0, [pc, #12]	@ (8006bc8 <vsniprintf+0x18>)
 8006bbc:	6800      	ldr	r0, [r0, #0]
 8006bbe:	f7ff ffcc 	bl	8006b5a <_vsniprintf_r>
 8006bc2:	b003      	add	sp, #12
 8006bc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bc8:	20000018 	.word	0x20000018

08006bcc <memset>:
 8006bcc:	4402      	add	r2, r0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d100      	bne.n	8006bd6 <memset+0xa>
 8006bd4:	4770      	bx	lr
 8006bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bda:	e7f9      	b.n	8006bd0 <memset+0x4>

08006bdc <_localeconv_r>:
 8006bdc:	4800      	ldr	r0, [pc, #0]	@ (8006be0 <_localeconv_r+0x4>)
 8006bde:	4770      	bx	lr
 8006be0:	20000158 	.word	0x20000158

08006be4 <_close_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4d06      	ldr	r5, [pc, #24]	@ (8006c00 <_close_r+0x1c>)
 8006be8:	2300      	movs	r3, #0
 8006bea:	4604      	mov	r4, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	602b      	str	r3, [r5, #0]
 8006bf0:	f7fb faf6 	bl	80021e0 <_close>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_close_r+0x1a>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_close_r+0x1a>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	200006b8 	.word	0x200006b8

08006c04 <_lseek_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4d07      	ldr	r5, [pc, #28]	@ (8006c24 <_lseek_r+0x20>)
 8006c08:	4604      	mov	r4, r0
 8006c0a:	4608      	mov	r0, r1
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	602a      	str	r2, [r5, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	f7fb fb0b 	bl	800222e <_lseek>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_lseek_r+0x1e>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_lseek_r+0x1e>
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	200006b8 	.word	0x200006b8

08006c28 <_read_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4d07      	ldr	r5, [pc, #28]	@ (8006c48 <_read_r+0x20>)
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	4608      	mov	r0, r1
 8006c30:	4611      	mov	r1, r2
 8006c32:	2200      	movs	r2, #0
 8006c34:	602a      	str	r2, [r5, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	f7fb fa99 	bl	800216e <_read>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_read_r+0x1e>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_read_r+0x1e>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	200006b8 	.word	0x200006b8

08006c4c <_write_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4d07      	ldr	r5, [pc, #28]	@ (8006c6c <_write_r+0x20>)
 8006c50:	4604      	mov	r4, r0
 8006c52:	4608      	mov	r0, r1
 8006c54:	4611      	mov	r1, r2
 8006c56:	2200      	movs	r2, #0
 8006c58:	602a      	str	r2, [r5, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f7fb faa4 	bl	80021a8 <_write>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d102      	bne.n	8006c6a <_write_r+0x1e>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	b103      	cbz	r3, 8006c6a <_write_r+0x1e>
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	200006b8 	.word	0x200006b8

08006c70 <__errno>:
 8006c70:	4b01      	ldr	r3, [pc, #4]	@ (8006c78 <__errno+0x8>)
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	20000018 	.word	0x20000018

08006c7c <__libc_init_array>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	4d0d      	ldr	r5, [pc, #52]	@ (8006cb4 <__libc_init_array+0x38>)
 8006c80:	4c0d      	ldr	r4, [pc, #52]	@ (8006cb8 <__libc_init_array+0x3c>)
 8006c82:	1b64      	subs	r4, r4, r5
 8006c84:	10a4      	asrs	r4, r4, #2
 8006c86:	2600      	movs	r6, #0
 8006c88:	42a6      	cmp	r6, r4
 8006c8a:	d109      	bne.n	8006ca0 <__libc_init_array+0x24>
 8006c8c:	4d0b      	ldr	r5, [pc, #44]	@ (8006cbc <__libc_init_array+0x40>)
 8006c8e:	4c0c      	ldr	r4, [pc, #48]	@ (8006cc0 <__libc_init_array+0x44>)
 8006c90:	f002 f868 	bl	8008d64 <_init>
 8006c94:	1b64      	subs	r4, r4, r5
 8006c96:	10a4      	asrs	r4, r4, #2
 8006c98:	2600      	movs	r6, #0
 8006c9a:	42a6      	cmp	r6, r4
 8006c9c:	d105      	bne.n	8006caa <__libc_init_array+0x2e>
 8006c9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca4:	4798      	blx	r3
 8006ca6:	3601      	adds	r6, #1
 8006ca8:	e7ee      	b.n	8006c88 <__libc_init_array+0xc>
 8006caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cae:	4798      	blx	r3
 8006cb0:	3601      	adds	r6, #1
 8006cb2:	e7f2      	b.n	8006c9a <__libc_init_array+0x1e>
 8006cb4:	08009200 	.word	0x08009200
 8006cb8:	08009200 	.word	0x08009200
 8006cbc:	08009200 	.word	0x08009200
 8006cc0:	08009204 	.word	0x08009204

08006cc4 <__retarget_lock_init_recursive>:
 8006cc4:	4770      	bx	lr

08006cc6 <__retarget_lock_acquire_recursive>:
 8006cc6:	4770      	bx	lr

08006cc8 <__retarget_lock_release_recursive>:
 8006cc8:	4770      	bx	lr

08006cca <quorem>:
 8006cca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cce:	6903      	ldr	r3, [r0, #16]
 8006cd0:	690c      	ldr	r4, [r1, #16]
 8006cd2:	42a3      	cmp	r3, r4
 8006cd4:	4607      	mov	r7, r0
 8006cd6:	db7e      	blt.n	8006dd6 <quorem+0x10c>
 8006cd8:	3c01      	subs	r4, #1
 8006cda:	f101 0814 	add.w	r8, r1, #20
 8006cde:	00a3      	lsls	r3, r4, #2
 8006ce0:	f100 0514 	add.w	r5, r0, #20
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cea:	9301      	str	r3, [sp, #4]
 8006cec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cfc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d00:	d32e      	bcc.n	8006d60 <quorem+0x96>
 8006d02:	f04f 0a00 	mov.w	sl, #0
 8006d06:	46c4      	mov	ip, r8
 8006d08:	46ae      	mov	lr, r5
 8006d0a:	46d3      	mov	fp, sl
 8006d0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d10:	b298      	uxth	r0, r3
 8006d12:	fb06 a000 	mla	r0, r6, r0, sl
 8006d16:	0c02      	lsrs	r2, r0, #16
 8006d18:	0c1b      	lsrs	r3, r3, #16
 8006d1a:	fb06 2303 	mla	r3, r6, r3, r2
 8006d1e:	f8de 2000 	ldr.w	r2, [lr]
 8006d22:	b280      	uxth	r0, r0
 8006d24:	b292      	uxth	r2, r2
 8006d26:	1a12      	subs	r2, r2, r0
 8006d28:	445a      	add	r2, fp
 8006d2a:	f8de 0000 	ldr.w	r0, [lr]
 8006d2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d3c:	b292      	uxth	r2, r2
 8006d3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d42:	45e1      	cmp	r9, ip
 8006d44:	f84e 2b04 	str.w	r2, [lr], #4
 8006d48:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d4c:	d2de      	bcs.n	8006d0c <quorem+0x42>
 8006d4e:	9b00      	ldr	r3, [sp, #0]
 8006d50:	58eb      	ldr	r3, [r5, r3]
 8006d52:	b92b      	cbnz	r3, 8006d60 <quorem+0x96>
 8006d54:	9b01      	ldr	r3, [sp, #4]
 8006d56:	3b04      	subs	r3, #4
 8006d58:	429d      	cmp	r5, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	d32f      	bcc.n	8006dbe <quorem+0xf4>
 8006d5e:	613c      	str	r4, [r7, #16]
 8006d60:	4638      	mov	r0, r7
 8006d62:	f001 f97b 	bl	800805c <__mcmp>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	db25      	blt.n	8006db6 <quorem+0xec>
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d72:	f8d1 c000 	ldr.w	ip, [r1]
 8006d76:	fa1f fe82 	uxth.w	lr, r2
 8006d7a:	fa1f f38c 	uxth.w	r3, ip
 8006d7e:	eba3 030e 	sub.w	r3, r3, lr
 8006d82:	4403      	add	r3, r0
 8006d84:	0c12      	lsrs	r2, r2, #16
 8006d86:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006d8a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d94:	45c1      	cmp	r9, r8
 8006d96:	f841 3b04 	str.w	r3, [r1], #4
 8006d9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d9e:	d2e6      	bcs.n	8006d6e <quorem+0xa4>
 8006da0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006da4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006da8:	b922      	cbnz	r2, 8006db4 <quorem+0xea>
 8006daa:	3b04      	subs	r3, #4
 8006dac:	429d      	cmp	r5, r3
 8006dae:	461a      	mov	r2, r3
 8006db0:	d30b      	bcc.n	8006dca <quorem+0x100>
 8006db2:	613c      	str	r4, [r7, #16]
 8006db4:	3601      	adds	r6, #1
 8006db6:	4630      	mov	r0, r6
 8006db8:	b003      	add	sp, #12
 8006dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbe:	6812      	ldr	r2, [r2, #0]
 8006dc0:	3b04      	subs	r3, #4
 8006dc2:	2a00      	cmp	r2, #0
 8006dc4:	d1cb      	bne.n	8006d5e <quorem+0x94>
 8006dc6:	3c01      	subs	r4, #1
 8006dc8:	e7c6      	b.n	8006d58 <quorem+0x8e>
 8006dca:	6812      	ldr	r2, [r2, #0]
 8006dcc:	3b04      	subs	r3, #4
 8006dce:	2a00      	cmp	r2, #0
 8006dd0:	d1ef      	bne.n	8006db2 <quorem+0xe8>
 8006dd2:	3c01      	subs	r4, #1
 8006dd4:	e7ea      	b.n	8006dac <quorem+0xe2>
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	e7ee      	b.n	8006db8 <quorem+0xee>
 8006dda:	0000      	movs	r0, r0
 8006ddc:	0000      	movs	r0, r0
	...

08006de0 <_dtoa_r>:
 8006de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	69c7      	ldr	r7, [r0, #28]
 8006de6:	b099      	sub	sp, #100	@ 0x64
 8006de8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006dec:	ec55 4b10 	vmov	r4, r5, d0
 8006df0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006df2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006df4:	4683      	mov	fp, r0
 8006df6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006df8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006dfa:	b97f      	cbnz	r7, 8006e1c <_dtoa_r+0x3c>
 8006dfc:	2010      	movs	r0, #16
 8006dfe:	f000 fdfd 	bl	80079fc <malloc>
 8006e02:	4602      	mov	r2, r0
 8006e04:	f8cb 001c 	str.w	r0, [fp, #28]
 8006e08:	b920      	cbnz	r0, 8006e14 <_dtoa_r+0x34>
 8006e0a:	4ba7      	ldr	r3, [pc, #668]	@ (80070a8 <_dtoa_r+0x2c8>)
 8006e0c:	21ef      	movs	r1, #239	@ 0xef
 8006e0e:	48a7      	ldr	r0, [pc, #668]	@ (80070ac <_dtoa_r+0x2cc>)
 8006e10:	f001 fe3e 	bl	8008a90 <__assert_func>
 8006e14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e18:	6007      	str	r7, [r0, #0]
 8006e1a:	60c7      	str	r7, [r0, #12]
 8006e1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e20:	6819      	ldr	r1, [r3, #0]
 8006e22:	b159      	cbz	r1, 8006e3c <_dtoa_r+0x5c>
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	604a      	str	r2, [r1, #4]
 8006e28:	2301      	movs	r3, #1
 8006e2a:	4093      	lsls	r3, r2
 8006e2c:	608b      	str	r3, [r1, #8]
 8006e2e:	4658      	mov	r0, fp
 8006e30:	f000 feda 	bl	8007be8 <_Bfree>
 8006e34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	1e2b      	subs	r3, r5, #0
 8006e3e:	bfb9      	ittee	lt
 8006e40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e44:	9303      	strlt	r3, [sp, #12]
 8006e46:	2300      	movge	r3, #0
 8006e48:	6033      	strge	r3, [r6, #0]
 8006e4a:	9f03      	ldr	r7, [sp, #12]
 8006e4c:	4b98      	ldr	r3, [pc, #608]	@ (80070b0 <_dtoa_r+0x2d0>)
 8006e4e:	bfbc      	itt	lt
 8006e50:	2201      	movlt	r2, #1
 8006e52:	6032      	strlt	r2, [r6, #0]
 8006e54:	43bb      	bics	r3, r7
 8006e56:	d112      	bne.n	8006e7e <_dtoa_r+0x9e>
 8006e58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e64:	4323      	orrs	r3, r4
 8006e66:	f000 854d 	beq.w	8007904 <_dtoa_r+0xb24>
 8006e6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80070c4 <_dtoa_r+0x2e4>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 854f 	beq.w	8007914 <_dtoa_r+0xb34>
 8006e76:	f10a 0303 	add.w	r3, sl, #3
 8006e7a:	f000 bd49 	b.w	8007910 <_dtoa_r+0xb30>
 8006e7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e82:	2200      	movs	r2, #0
 8006e84:	ec51 0b17 	vmov	r0, r1, d7
 8006e88:	2300      	movs	r3, #0
 8006e8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006e8e:	f7f9 fe1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e92:	4680      	mov	r8, r0
 8006e94:	b158      	cbz	r0, 8006eae <_dtoa_r+0xce>
 8006e96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e98:	2301      	movs	r3, #1
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e9e:	b113      	cbz	r3, 8006ea6 <_dtoa_r+0xc6>
 8006ea0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ea2:	4b84      	ldr	r3, [pc, #528]	@ (80070b4 <_dtoa_r+0x2d4>)
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80070c8 <_dtoa_r+0x2e8>
 8006eaa:	f000 bd33 	b.w	8007914 <_dtoa_r+0xb34>
 8006eae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006eb2:	aa16      	add	r2, sp, #88	@ 0x58
 8006eb4:	a917      	add	r1, sp, #92	@ 0x5c
 8006eb6:	4658      	mov	r0, fp
 8006eb8:	f001 f980 	bl	80081bc <__d2b>
 8006ebc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ec0:	4681      	mov	r9, r0
 8006ec2:	2e00      	cmp	r6, #0
 8006ec4:	d077      	beq.n	8006fb6 <_dtoa_r+0x1d6>
 8006ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ec8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ed4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ed8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006edc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4b74      	ldr	r3, [pc, #464]	@ (80070b8 <_dtoa_r+0x2d8>)
 8006ee6:	f7f9 f9cf 	bl	8000288 <__aeabi_dsub>
 8006eea:	a369      	add	r3, pc, #420	@ (adr r3, 8007090 <_dtoa_r+0x2b0>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f7f9 fb82 	bl	80005f8 <__aeabi_dmul>
 8006ef4:	a368      	add	r3, pc, #416	@ (adr r3, 8007098 <_dtoa_r+0x2b8>)
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f7f9 f9c7 	bl	800028c <__adddf3>
 8006efe:	4604      	mov	r4, r0
 8006f00:	4630      	mov	r0, r6
 8006f02:	460d      	mov	r5, r1
 8006f04:	f7f9 fb0e 	bl	8000524 <__aeabi_i2d>
 8006f08:	a365      	add	r3, pc, #404	@ (adr r3, 80070a0 <_dtoa_r+0x2c0>)
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	f7f9 fb73 	bl	80005f8 <__aeabi_dmul>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	4620      	mov	r0, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	f7f9 f9b7 	bl	800028c <__adddf3>
 8006f1e:	4604      	mov	r4, r0
 8006f20:	460d      	mov	r5, r1
 8006f22:	f7f9 fe19 	bl	8000b58 <__aeabi_d2iz>
 8006f26:	2200      	movs	r2, #0
 8006f28:	4607      	mov	r7, r0
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	4629      	mov	r1, r5
 8006f30:	f7f9 fdd4 	bl	8000adc <__aeabi_dcmplt>
 8006f34:	b140      	cbz	r0, 8006f48 <_dtoa_r+0x168>
 8006f36:	4638      	mov	r0, r7
 8006f38:	f7f9 faf4 	bl	8000524 <__aeabi_i2d>
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	462b      	mov	r3, r5
 8006f40:	f7f9 fdc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f44:	b900      	cbnz	r0, 8006f48 <_dtoa_r+0x168>
 8006f46:	3f01      	subs	r7, #1
 8006f48:	2f16      	cmp	r7, #22
 8006f4a:	d851      	bhi.n	8006ff0 <_dtoa_r+0x210>
 8006f4c:	4b5b      	ldr	r3, [pc, #364]	@ (80070bc <_dtoa_r+0x2dc>)
 8006f4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f5a:	f7f9 fdbf 	bl	8000adc <__aeabi_dcmplt>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d048      	beq.n	8006ff4 <_dtoa_r+0x214>
 8006f62:	3f01      	subs	r7, #1
 8006f64:	2300      	movs	r3, #0
 8006f66:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f6a:	1b9b      	subs	r3, r3, r6
 8006f6c:	1e5a      	subs	r2, r3, #1
 8006f6e:	bf44      	itt	mi
 8006f70:	f1c3 0801 	rsbmi	r8, r3, #1
 8006f74:	2300      	movmi	r3, #0
 8006f76:	9208      	str	r2, [sp, #32]
 8006f78:	bf54      	ite	pl
 8006f7a:	f04f 0800 	movpl.w	r8, #0
 8006f7e:	9308      	strmi	r3, [sp, #32]
 8006f80:	2f00      	cmp	r7, #0
 8006f82:	db39      	blt.n	8006ff8 <_dtoa_r+0x218>
 8006f84:	9b08      	ldr	r3, [sp, #32]
 8006f86:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006f88:	443b      	add	r3, r7
 8006f8a:	9308      	str	r3, [sp, #32]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f92:	2b09      	cmp	r3, #9
 8006f94:	d864      	bhi.n	8007060 <_dtoa_r+0x280>
 8006f96:	2b05      	cmp	r3, #5
 8006f98:	bfc4      	itt	gt
 8006f9a:	3b04      	subgt	r3, #4
 8006f9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fa0:	f1a3 0302 	sub.w	r3, r3, #2
 8006fa4:	bfcc      	ite	gt
 8006fa6:	2400      	movgt	r4, #0
 8006fa8:	2401      	movle	r4, #1
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d863      	bhi.n	8007076 <_dtoa_r+0x296>
 8006fae:	e8df f003 	tbb	[pc, r3]
 8006fb2:	372a      	.short	0x372a
 8006fb4:	5535      	.short	0x5535
 8006fb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006fba:	441e      	add	r6, r3
 8006fbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	bfc1      	itttt	gt
 8006fc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006fc8:	409f      	lslgt	r7, r3
 8006fca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006fce:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006fd2:	bfd6      	itet	le
 8006fd4:	f1c3 0320 	rsble	r3, r3, #32
 8006fd8:	ea47 0003 	orrgt.w	r0, r7, r3
 8006fdc:	fa04 f003 	lslle.w	r0, r4, r3
 8006fe0:	f7f9 fa90 	bl	8000504 <__aeabi_ui2d>
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006fea:	3e01      	subs	r6, #1
 8006fec:	9214      	str	r2, [sp, #80]	@ 0x50
 8006fee:	e777      	b.n	8006ee0 <_dtoa_r+0x100>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e7b8      	b.n	8006f66 <_dtoa_r+0x186>
 8006ff4:	9012      	str	r0, [sp, #72]	@ 0x48
 8006ff6:	e7b7      	b.n	8006f68 <_dtoa_r+0x188>
 8006ff8:	427b      	negs	r3, r7
 8006ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	eba8 0807 	sub.w	r8, r8, r7
 8007002:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007004:	e7c4      	b.n	8006f90 <_dtoa_r+0x1b0>
 8007006:	2300      	movs	r3, #0
 8007008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800700a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800700c:	2b00      	cmp	r3, #0
 800700e:	dc35      	bgt.n	800707c <_dtoa_r+0x29c>
 8007010:	2301      	movs	r3, #1
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	9307      	str	r3, [sp, #28]
 8007016:	461a      	mov	r2, r3
 8007018:	920e      	str	r2, [sp, #56]	@ 0x38
 800701a:	e00b      	b.n	8007034 <_dtoa_r+0x254>
 800701c:	2301      	movs	r3, #1
 800701e:	e7f3      	b.n	8007008 <_dtoa_r+0x228>
 8007020:	2300      	movs	r3, #0
 8007022:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007024:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007026:	18fb      	adds	r3, r7, r3
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	3301      	adds	r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	9307      	str	r3, [sp, #28]
 8007030:	bfb8      	it	lt
 8007032:	2301      	movlt	r3, #1
 8007034:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007038:	2100      	movs	r1, #0
 800703a:	2204      	movs	r2, #4
 800703c:	f102 0514 	add.w	r5, r2, #20
 8007040:	429d      	cmp	r5, r3
 8007042:	d91f      	bls.n	8007084 <_dtoa_r+0x2a4>
 8007044:	6041      	str	r1, [r0, #4]
 8007046:	4658      	mov	r0, fp
 8007048:	f000 fd8e 	bl	8007b68 <_Balloc>
 800704c:	4682      	mov	sl, r0
 800704e:	2800      	cmp	r0, #0
 8007050:	d13c      	bne.n	80070cc <_dtoa_r+0x2ec>
 8007052:	4b1b      	ldr	r3, [pc, #108]	@ (80070c0 <_dtoa_r+0x2e0>)
 8007054:	4602      	mov	r2, r0
 8007056:	f240 11af 	movw	r1, #431	@ 0x1af
 800705a:	e6d8      	b.n	8006e0e <_dtoa_r+0x2e>
 800705c:	2301      	movs	r3, #1
 800705e:	e7e0      	b.n	8007022 <_dtoa_r+0x242>
 8007060:	2401      	movs	r4, #1
 8007062:	2300      	movs	r3, #0
 8007064:	9309      	str	r3, [sp, #36]	@ 0x24
 8007066:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007068:	f04f 33ff 	mov.w	r3, #4294967295
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	9307      	str	r3, [sp, #28]
 8007070:	2200      	movs	r2, #0
 8007072:	2312      	movs	r3, #18
 8007074:	e7d0      	b.n	8007018 <_dtoa_r+0x238>
 8007076:	2301      	movs	r3, #1
 8007078:	930b      	str	r3, [sp, #44]	@ 0x2c
 800707a:	e7f5      	b.n	8007068 <_dtoa_r+0x288>
 800707c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	9307      	str	r3, [sp, #28]
 8007082:	e7d7      	b.n	8007034 <_dtoa_r+0x254>
 8007084:	3101      	adds	r1, #1
 8007086:	0052      	lsls	r2, r2, #1
 8007088:	e7d8      	b.n	800703c <_dtoa_r+0x25c>
 800708a:	bf00      	nop
 800708c:	f3af 8000 	nop.w
 8007090:	636f4361 	.word	0x636f4361
 8007094:	3fd287a7 	.word	0x3fd287a7
 8007098:	8b60c8b3 	.word	0x8b60c8b3
 800709c:	3fc68a28 	.word	0x3fc68a28
 80070a0:	509f79fb 	.word	0x509f79fb
 80070a4:	3fd34413 	.word	0x3fd34413
 80070a8:	08008ec5 	.word	0x08008ec5
 80070ac:	08008edc 	.word	0x08008edc
 80070b0:	7ff00000 	.word	0x7ff00000
 80070b4:	08008e95 	.word	0x08008e95
 80070b8:	3ff80000 	.word	0x3ff80000
 80070bc:	08008fd8 	.word	0x08008fd8
 80070c0:	08008f34 	.word	0x08008f34
 80070c4:	08008ec1 	.word	0x08008ec1
 80070c8:	08008e94 	.word	0x08008e94
 80070cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070d0:	6018      	str	r0, [r3, #0]
 80070d2:	9b07      	ldr	r3, [sp, #28]
 80070d4:	2b0e      	cmp	r3, #14
 80070d6:	f200 80a4 	bhi.w	8007222 <_dtoa_r+0x442>
 80070da:	2c00      	cmp	r4, #0
 80070dc:	f000 80a1 	beq.w	8007222 <_dtoa_r+0x442>
 80070e0:	2f00      	cmp	r7, #0
 80070e2:	dd33      	ble.n	800714c <_dtoa_r+0x36c>
 80070e4:	4bad      	ldr	r3, [pc, #692]	@ (800739c <_dtoa_r+0x5bc>)
 80070e6:	f007 020f 	and.w	r2, r7, #15
 80070ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070ee:	ed93 7b00 	vldr	d7, [r3]
 80070f2:	05f8      	lsls	r0, r7, #23
 80070f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80070f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80070fc:	d516      	bpl.n	800712c <_dtoa_r+0x34c>
 80070fe:	4ba8      	ldr	r3, [pc, #672]	@ (80073a0 <_dtoa_r+0x5c0>)
 8007100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007108:	f7f9 fba0 	bl	800084c <__aeabi_ddiv>
 800710c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007110:	f004 040f 	and.w	r4, r4, #15
 8007114:	2603      	movs	r6, #3
 8007116:	4da2      	ldr	r5, [pc, #648]	@ (80073a0 <_dtoa_r+0x5c0>)
 8007118:	b954      	cbnz	r4, 8007130 <_dtoa_r+0x350>
 800711a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800711e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007122:	f7f9 fb93 	bl	800084c <__aeabi_ddiv>
 8007126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800712a:	e028      	b.n	800717e <_dtoa_r+0x39e>
 800712c:	2602      	movs	r6, #2
 800712e:	e7f2      	b.n	8007116 <_dtoa_r+0x336>
 8007130:	07e1      	lsls	r1, r4, #31
 8007132:	d508      	bpl.n	8007146 <_dtoa_r+0x366>
 8007134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007138:	e9d5 2300 	ldrd	r2, r3, [r5]
 800713c:	f7f9 fa5c 	bl	80005f8 <__aeabi_dmul>
 8007140:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007144:	3601      	adds	r6, #1
 8007146:	1064      	asrs	r4, r4, #1
 8007148:	3508      	adds	r5, #8
 800714a:	e7e5      	b.n	8007118 <_dtoa_r+0x338>
 800714c:	f000 80d2 	beq.w	80072f4 <_dtoa_r+0x514>
 8007150:	427c      	negs	r4, r7
 8007152:	4b92      	ldr	r3, [pc, #584]	@ (800739c <_dtoa_r+0x5bc>)
 8007154:	4d92      	ldr	r5, [pc, #584]	@ (80073a0 <_dtoa_r+0x5c0>)
 8007156:	f004 020f 	and.w	r2, r4, #15
 800715a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007166:	f7f9 fa47 	bl	80005f8 <__aeabi_dmul>
 800716a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800716e:	1124      	asrs	r4, r4, #4
 8007170:	2300      	movs	r3, #0
 8007172:	2602      	movs	r6, #2
 8007174:	2c00      	cmp	r4, #0
 8007176:	f040 80b2 	bne.w	80072de <_dtoa_r+0x4fe>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1d3      	bne.n	8007126 <_dtoa_r+0x346>
 800717e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007180:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 80b7 	beq.w	80072f8 <_dtoa_r+0x518>
 800718a:	4b86      	ldr	r3, [pc, #536]	@ (80073a4 <_dtoa_r+0x5c4>)
 800718c:	2200      	movs	r2, #0
 800718e:	4620      	mov	r0, r4
 8007190:	4629      	mov	r1, r5
 8007192:	f7f9 fca3 	bl	8000adc <__aeabi_dcmplt>
 8007196:	2800      	cmp	r0, #0
 8007198:	f000 80ae 	beq.w	80072f8 <_dtoa_r+0x518>
 800719c:	9b07      	ldr	r3, [sp, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 80aa 	beq.w	80072f8 <_dtoa_r+0x518>
 80071a4:	9b00      	ldr	r3, [sp, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	dd37      	ble.n	800721a <_dtoa_r+0x43a>
 80071aa:	1e7b      	subs	r3, r7, #1
 80071ac:	9304      	str	r3, [sp, #16]
 80071ae:	4620      	mov	r0, r4
 80071b0:	4b7d      	ldr	r3, [pc, #500]	@ (80073a8 <_dtoa_r+0x5c8>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7f9 fa1f 	bl	80005f8 <__aeabi_dmul>
 80071ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071be:	9c00      	ldr	r4, [sp, #0]
 80071c0:	3601      	adds	r6, #1
 80071c2:	4630      	mov	r0, r6
 80071c4:	f7f9 f9ae 	bl	8000524 <__aeabi_i2d>
 80071c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071cc:	f7f9 fa14 	bl	80005f8 <__aeabi_dmul>
 80071d0:	4b76      	ldr	r3, [pc, #472]	@ (80073ac <_dtoa_r+0x5cc>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	f7f9 f85a 	bl	800028c <__adddf3>
 80071d8:	4605      	mov	r5, r0
 80071da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80071de:	2c00      	cmp	r4, #0
 80071e0:	f040 808d 	bne.w	80072fe <_dtoa_r+0x51e>
 80071e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071e8:	4b71      	ldr	r3, [pc, #452]	@ (80073b0 <_dtoa_r+0x5d0>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	f7f9 f84c 	bl	8000288 <__aeabi_dsub>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071f8:	462a      	mov	r2, r5
 80071fa:	4633      	mov	r3, r6
 80071fc:	f7f9 fc8c 	bl	8000b18 <__aeabi_dcmpgt>
 8007200:	2800      	cmp	r0, #0
 8007202:	f040 828b 	bne.w	800771c <_dtoa_r+0x93c>
 8007206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800720a:	462a      	mov	r2, r5
 800720c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007210:	f7f9 fc64 	bl	8000adc <__aeabi_dcmplt>
 8007214:	2800      	cmp	r0, #0
 8007216:	f040 8128 	bne.w	800746a <_dtoa_r+0x68a>
 800721a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800721e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007222:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007224:	2b00      	cmp	r3, #0
 8007226:	f2c0 815a 	blt.w	80074de <_dtoa_r+0x6fe>
 800722a:	2f0e      	cmp	r7, #14
 800722c:	f300 8157 	bgt.w	80074de <_dtoa_r+0x6fe>
 8007230:	4b5a      	ldr	r3, [pc, #360]	@ (800739c <_dtoa_r+0x5bc>)
 8007232:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007236:	ed93 7b00 	vldr	d7, [r3]
 800723a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800723c:	2b00      	cmp	r3, #0
 800723e:	ed8d 7b00 	vstr	d7, [sp]
 8007242:	da03      	bge.n	800724c <_dtoa_r+0x46c>
 8007244:	9b07      	ldr	r3, [sp, #28]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f340 8101 	ble.w	800744e <_dtoa_r+0x66e>
 800724c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007250:	4656      	mov	r6, sl
 8007252:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f9 faf7 	bl	800084c <__aeabi_ddiv>
 800725e:	f7f9 fc7b 	bl	8000b58 <__aeabi_d2iz>
 8007262:	4680      	mov	r8, r0
 8007264:	f7f9 f95e 	bl	8000524 <__aeabi_i2d>
 8007268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800726c:	f7f9 f9c4 	bl	80005f8 <__aeabi_dmul>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4620      	mov	r0, r4
 8007276:	4629      	mov	r1, r5
 8007278:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800727c:	f7f9 f804 	bl	8000288 <__aeabi_dsub>
 8007280:	f806 4b01 	strb.w	r4, [r6], #1
 8007284:	9d07      	ldr	r5, [sp, #28]
 8007286:	eba6 040a 	sub.w	r4, r6, sl
 800728a:	42a5      	cmp	r5, r4
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	f040 8117 	bne.w	80074c2 <_dtoa_r+0x6e2>
 8007294:	f7f8 fffa 	bl	800028c <__adddf3>
 8007298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800729c:	4604      	mov	r4, r0
 800729e:	460d      	mov	r5, r1
 80072a0:	f7f9 fc3a 	bl	8000b18 <__aeabi_dcmpgt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f040 80f9 	bne.w	800749c <_dtoa_r+0x6bc>
 80072aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072ae:	4620      	mov	r0, r4
 80072b0:	4629      	mov	r1, r5
 80072b2:	f7f9 fc09 	bl	8000ac8 <__aeabi_dcmpeq>
 80072b6:	b118      	cbz	r0, 80072c0 <_dtoa_r+0x4e0>
 80072b8:	f018 0f01 	tst.w	r8, #1
 80072bc:	f040 80ee 	bne.w	800749c <_dtoa_r+0x6bc>
 80072c0:	4649      	mov	r1, r9
 80072c2:	4658      	mov	r0, fp
 80072c4:	f000 fc90 	bl	8007be8 <_Bfree>
 80072c8:	2300      	movs	r3, #0
 80072ca:	7033      	strb	r3, [r6, #0]
 80072cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80072ce:	3701      	adds	r7, #1
 80072d0:	601f      	str	r7, [r3, #0]
 80072d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 831d 	beq.w	8007914 <_dtoa_r+0xb34>
 80072da:	601e      	str	r6, [r3, #0]
 80072dc:	e31a      	b.n	8007914 <_dtoa_r+0xb34>
 80072de:	07e2      	lsls	r2, r4, #31
 80072e0:	d505      	bpl.n	80072ee <_dtoa_r+0x50e>
 80072e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072e6:	f7f9 f987 	bl	80005f8 <__aeabi_dmul>
 80072ea:	3601      	adds	r6, #1
 80072ec:	2301      	movs	r3, #1
 80072ee:	1064      	asrs	r4, r4, #1
 80072f0:	3508      	adds	r5, #8
 80072f2:	e73f      	b.n	8007174 <_dtoa_r+0x394>
 80072f4:	2602      	movs	r6, #2
 80072f6:	e742      	b.n	800717e <_dtoa_r+0x39e>
 80072f8:	9c07      	ldr	r4, [sp, #28]
 80072fa:	9704      	str	r7, [sp, #16]
 80072fc:	e761      	b.n	80071c2 <_dtoa_r+0x3e2>
 80072fe:	4b27      	ldr	r3, [pc, #156]	@ (800739c <_dtoa_r+0x5bc>)
 8007300:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007302:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007306:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800730a:	4454      	add	r4, sl
 800730c:	2900      	cmp	r1, #0
 800730e:	d053      	beq.n	80073b8 <_dtoa_r+0x5d8>
 8007310:	4928      	ldr	r1, [pc, #160]	@ (80073b4 <_dtoa_r+0x5d4>)
 8007312:	2000      	movs	r0, #0
 8007314:	f7f9 fa9a 	bl	800084c <__aeabi_ddiv>
 8007318:	4633      	mov	r3, r6
 800731a:	462a      	mov	r2, r5
 800731c:	f7f8 ffb4 	bl	8000288 <__aeabi_dsub>
 8007320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007324:	4656      	mov	r6, sl
 8007326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800732a:	f7f9 fc15 	bl	8000b58 <__aeabi_d2iz>
 800732e:	4605      	mov	r5, r0
 8007330:	f7f9 f8f8 	bl	8000524 <__aeabi_i2d>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800733c:	f7f8 ffa4 	bl	8000288 <__aeabi_dsub>
 8007340:	3530      	adds	r5, #48	@ 0x30
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800734a:	f806 5b01 	strb.w	r5, [r6], #1
 800734e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007352:	f7f9 fbc3 	bl	8000adc <__aeabi_dcmplt>
 8007356:	2800      	cmp	r0, #0
 8007358:	d171      	bne.n	800743e <_dtoa_r+0x65e>
 800735a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800735e:	4911      	ldr	r1, [pc, #68]	@ (80073a4 <_dtoa_r+0x5c4>)
 8007360:	2000      	movs	r0, #0
 8007362:	f7f8 ff91 	bl	8000288 <__aeabi_dsub>
 8007366:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800736a:	f7f9 fbb7 	bl	8000adc <__aeabi_dcmplt>
 800736e:	2800      	cmp	r0, #0
 8007370:	f040 8095 	bne.w	800749e <_dtoa_r+0x6be>
 8007374:	42a6      	cmp	r6, r4
 8007376:	f43f af50 	beq.w	800721a <_dtoa_r+0x43a>
 800737a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800737e:	4b0a      	ldr	r3, [pc, #40]	@ (80073a8 <_dtoa_r+0x5c8>)
 8007380:	2200      	movs	r2, #0
 8007382:	f7f9 f939 	bl	80005f8 <__aeabi_dmul>
 8007386:	4b08      	ldr	r3, [pc, #32]	@ (80073a8 <_dtoa_r+0x5c8>)
 8007388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800738c:	2200      	movs	r2, #0
 800738e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007392:	f7f9 f931 	bl	80005f8 <__aeabi_dmul>
 8007396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800739a:	e7c4      	b.n	8007326 <_dtoa_r+0x546>
 800739c:	08008fd8 	.word	0x08008fd8
 80073a0:	08008fb0 	.word	0x08008fb0
 80073a4:	3ff00000 	.word	0x3ff00000
 80073a8:	40240000 	.word	0x40240000
 80073ac:	401c0000 	.word	0x401c0000
 80073b0:	40140000 	.word	0x40140000
 80073b4:	3fe00000 	.word	0x3fe00000
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	f7f9 f91c 	bl	80005f8 <__aeabi_dmul>
 80073c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80073c6:	4656      	mov	r6, sl
 80073c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073cc:	f7f9 fbc4 	bl	8000b58 <__aeabi_d2iz>
 80073d0:	4605      	mov	r5, r0
 80073d2:	f7f9 f8a7 	bl	8000524 <__aeabi_i2d>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073de:	f7f8 ff53 	bl	8000288 <__aeabi_dsub>
 80073e2:	3530      	adds	r5, #48	@ 0x30
 80073e4:	f806 5b01 	strb.w	r5, [r6], #1
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	42a6      	cmp	r6, r4
 80073ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073f2:	f04f 0200 	mov.w	r2, #0
 80073f6:	d124      	bne.n	8007442 <_dtoa_r+0x662>
 80073f8:	4bac      	ldr	r3, [pc, #688]	@ (80076ac <_dtoa_r+0x8cc>)
 80073fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073fe:	f7f8 ff45 	bl	800028c <__adddf3>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800740a:	f7f9 fb85 	bl	8000b18 <__aeabi_dcmpgt>
 800740e:	2800      	cmp	r0, #0
 8007410:	d145      	bne.n	800749e <_dtoa_r+0x6be>
 8007412:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007416:	49a5      	ldr	r1, [pc, #660]	@ (80076ac <_dtoa_r+0x8cc>)
 8007418:	2000      	movs	r0, #0
 800741a:	f7f8 ff35 	bl	8000288 <__aeabi_dsub>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007426:	f7f9 fb59 	bl	8000adc <__aeabi_dcmplt>
 800742a:	2800      	cmp	r0, #0
 800742c:	f43f aef5 	beq.w	800721a <_dtoa_r+0x43a>
 8007430:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007432:	1e73      	subs	r3, r6, #1
 8007434:	9315      	str	r3, [sp, #84]	@ 0x54
 8007436:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800743a:	2b30      	cmp	r3, #48	@ 0x30
 800743c:	d0f8      	beq.n	8007430 <_dtoa_r+0x650>
 800743e:	9f04      	ldr	r7, [sp, #16]
 8007440:	e73e      	b.n	80072c0 <_dtoa_r+0x4e0>
 8007442:	4b9b      	ldr	r3, [pc, #620]	@ (80076b0 <_dtoa_r+0x8d0>)
 8007444:	f7f9 f8d8 	bl	80005f8 <__aeabi_dmul>
 8007448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800744c:	e7bc      	b.n	80073c8 <_dtoa_r+0x5e8>
 800744e:	d10c      	bne.n	800746a <_dtoa_r+0x68a>
 8007450:	4b98      	ldr	r3, [pc, #608]	@ (80076b4 <_dtoa_r+0x8d4>)
 8007452:	2200      	movs	r2, #0
 8007454:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007458:	f7f9 f8ce 	bl	80005f8 <__aeabi_dmul>
 800745c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007460:	f7f9 fb50 	bl	8000b04 <__aeabi_dcmpge>
 8007464:	2800      	cmp	r0, #0
 8007466:	f000 8157 	beq.w	8007718 <_dtoa_r+0x938>
 800746a:	2400      	movs	r4, #0
 800746c:	4625      	mov	r5, r4
 800746e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007470:	43db      	mvns	r3, r3
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	4656      	mov	r6, sl
 8007476:	2700      	movs	r7, #0
 8007478:	4621      	mov	r1, r4
 800747a:	4658      	mov	r0, fp
 800747c:	f000 fbb4 	bl	8007be8 <_Bfree>
 8007480:	2d00      	cmp	r5, #0
 8007482:	d0dc      	beq.n	800743e <_dtoa_r+0x65e>
 8007484:	b12f      	cbz	r7, 8007492 <_dtoa_r+0x6b2>
 8007486:	42af      	cmp	r7, r5
 8007488:	d003      	beq.n	8007492 <_dtoa_r+0x6b2>
 800748a:	4639      	mov	r1, r7
 800748c:	4658      	mov	r0, fp
 800748e:	f000 fbab 	bl	8007be8 <_Bfree>
 8007492:	4629      	mov	r1, r5
 8007494:	4658      	mov	r0, fp
 8007496:	f000 fba7 	bl	8007be8 <_Bfree>
 800749a:	e7d0      	b.n	800743e <_dtoa_r+0x65e>
 800749c:	9704      	str	r7, [sp, #16]
 800749e:	4633      	mov	r3, r6
 80074a0:	461e      	mov	r6, r3
 80074a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074a6:	2a39      	cmp	r2, #57	@ 0x39
 80074a8:	d107      	bne.n	80074ba <_dtoa_r+0x6da>
 80074aa:	459a      	cmp	sl, r3
 80074ac:	d1f8      	bne.n	80074a0 <_dtoa_r+0x6c0>
 80074ae:	9a04      	ldr	r2, [sp, #16]
 80074b0:	3201      	adds	r2, #1
 80074b2:	9204      	str	r2, [sp, #16]
 80074b4:	2230      	movs	r2, #48	@ 0x30
 80074b6:	f88a 2000 	strb.w	r2, [sl]
 80074ba:	781a      	ldrb	r2, [r3, #0]
 80074bc:	3201      	adds	r2, #1
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	e7bd      	b.n	800743e <_dtoa_r+0x65e>
 80074c2:	4b7b      	ldr	r3, [pc, #492]	@ (80076b0 <_dtoa_r+0x8d0>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	f7f9 f897 	bl	80005f8 <__aeabi_dmul>
 80074ca:	2200      	movs	r2, #0
 80074cc:	2300      	movs	r3, #0
 80074ce:	4604      	mov	r4, r0
 80074d0:	460d      	mov	r5, r1
 80074d2:	f7f9 faf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f43f aebb 	beq.w	8007252 <_dtoa_r+0x472>
 80074dc:	e6f0      	b.n	80072c0 <_dtoa_r+0x4e0>
 80074de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80074e0:	2a00      	cmp	r2, #0
 80074e2:	f000 80db 	beq.w	800769c <_dtoa_r+0x8bc>
 80074e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074e8:	2a01      	cmp	r2, #1
 80074ea:	f300 80bf 	bgt.w	800766c <_dtoa_r+0x88c>
 80074ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	f000 80b7 	beq.w	8007664 <_dtoa_r+0x884>
 80074f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80074fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074fc:	4646      	mov	r6, r8
 80074fe:	9a08      	ldr	r2, [sp, #32]
 8007500:	2101      	movs	r1, #1
 8007502:	441a      	add	r2, r3
 8007504:	4658      	mov	r0, fp
 8007506:	4498      	add	r8, r3
 8007508:	9208      	str	r2, [sp, #32]
 800750a:	f000 fc21 	bl	8007d50 <__i2b>
 800750e:	4605      	mov	r5, r0
 8007510:	b15e      	cbz	r6, 800752a <_dtoa_r+0x74a>
 8007512:	9b08      	ldr	r3, [sp, #32]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dd08      	ble.n	800752a <_dtoa_r+0x74a>
 8007518:	42b3      	cmp	r3, r6
 800751a:	9a08      	ldr	r2, [sp, #32]
 800751c:	bfa8      	it	ge
 800751e:	4633      	movge	r3, r6
 8007520:	eba8 0803 	sub.w	r8, r8, r3
 8007524:	1af6      	subs	r6, r6, r3
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	9308      	str	r3, [sp, #32]
 800752a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800752c:	b1f3      	cbz	r3, 800756c <_dtoa_r+0x78c>
 800752e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 80b7 	beq.w	80076a4 <_dtoa_r+0x8c4>
 8007536:	b18c      	cbz	r4, 800755c <_dtoa_r+0x77c>
 8007538:	4629      	mov	r1, r5
 800753a:	4622      	mov	r2, r4
 800753c:	4658      	mov	r0, fp
 800753e:	f000 fcc7 	bl	8007ed0 <__pow5mult>
 8007542:	464a      	mov	r2, r9
 8007544:	4601      	mov	r1, r0
 8007546:	4605      	mov	r5, r0
 8007548:	4658      	mov	r0, fp
 800754a:	f000 fc17 	bl	8007d7c <__multiply>
 800754e:	4649      	mov	r1, r9
 8007550:	9004      	str	r0, [sp, #16]
 8007552:	4658      	mov	r0, fp
 8007554:	f000 fb48 	bl	8007be8 <_Bfree>
 8007558:	9b04      	ldr	r3, [sp, #16]
 800755a:	4699      	mov	r9, r3
 800755c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800755e:	1b1a      	subs	r2, r3, r4
 8007560:	d004      	beq.n	800756c <_dtoa_r+0x78c>
 8007562:	4649      	mov	r1, r9
 8007564:	4658      	mov	r0, fp
 8007566:	f000 fcb3 	bl	8007ed0 <__pow5mult>
 800756a:	4681      	mov	r9, r0
 800756c:	2101      	movs	r1, #1
 800756e:	4658      	mov	r0, fp
 8007570:	f000 fbee 	bl	8007d50 <__i2b>
 8007574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007576:	4604      	mov	r4, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 81cf 	beq.w	800791c <_dtoa_r+0xb3c>
 800757e:	461a      	mov	r2, r3
 8007580:	4601      	mov	r1, r0
 8007582:	4658      	mov	r0, fp
 8007584:	f000 fca4 	bl	8007ed0 <__pow5mult>
 8007588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800758a:	2b01      	cmp	r3, #1
 800758c:	4604      	mov	r4, r0
 800758e:	f300 8095 	bgt.w	80076bc <_dtoa_r+0x8dc>
 8007592:	9b02      	ldr	r3, [sp, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f040 8087 	bne.w	80076a8 <_dtoa_r+0x8c8>
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f040 8089 	bne.w	80076b8 <_dtoa_r+0x8d8>
 80075a6:	9b03      	ldr	r3, [sp, #12]
 80075a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075ac:	0d1b      	lsrs	r3, r3, #20
 80075ae:	051b      	lsls	r3, r3, #20
 80075b0:	b12b      	cbz	r3, 80075be <_dtoa_r+0x7de>
 80075b2:	9b08      	ldr	r3, [sp, #32]
 80075b4:	3301      	adds	r3, #1
 80075b6:	9308      	str	r3, [sp, #32]
 80075b8:	f108 0801 	add.w	r8, r8, #1
 80075bc:	2301      	movs	r3, #1
 80075be:	930a      	str	r3, [sp, #40]	@ 0x28
 80075c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 81b0 	beq.w	8007928 <_dtoa_r+0xb48>
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075ce:	6918      	ldr	r0, [r3, #16]
 80075d0:	f000 fb72 	bl	8007cb8 <__hi0bits>
 80075d4:	f1c0 0020 	rsb	r0, r0, #32
 80075d8:	9b08      	ldr	r3, [sp, #32]
 80075da:	4418      	add	r0, r3
 80075dc:	f010 001f 	ands.w	r0, r0, #31
 80075e0:	d077      	beq.n	80076d2 <_dtoa_r+0x8f2>
 80075e2:	f1c0 0320 	rsb	r3, r0, #32
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	dd6b      	ble.n	80076c2 <_dtoa_r+0x8e2>
 80075ea:	9b08      	ldr	r3, [sp, #32]
 80075ec:	f1c0 001c 	rsb	r0, r0, #28
 80075f0:	4403      	add	r3, r0
 80075f2:	4480      	add	r8, r0
 80075f4:	4406      	add	r6, r0
 80075f6:	9308      	str	r3, [sp, #32]
 80075f8:	f1b8 0f00 	cmp.w	r8, #0
 80075fc:	dd05      	ble.n	800760a <_dtoa_r+0x82a>
 80075fe:	4649      	mov	r1, r9
 8007600:	4642      	mov	r2, r8
 8007602:	4658      	mov	r0, fp
 8007604:	f000 fcbe 	bl	8007f84 <__lshift>
 8007608:	4681      	mov	r9, r0
 800760a:	9b08      	ldr	r3, [sp, #32]
 800760c:	2b00      	cmp	r3, #0
 800760e:	dd05      	ble.n	800761c <_dtoa_r+0x83c>
 8007610:	4621      	mov	r1, r4
 8007612:	461a      	mov	r2, r3
 8007614:	4658      	mov	r0, fp
 8007616:	f000 fcb5 	bl	8007f84 <__lshift>
 800761a:	4604      	mov	r4, r0
 800761c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800761e:	2b00      	cmp	r3, #0
 8007620:	d059      	beq.n	80076d6 <_dtoa_r+0x8f6>
 8007622:	4621      	mov	r1, r4
 8007624:	4648      	mov	r0, r9
 8007626:	f000 fd19 	bl	800805c <__mcmp>
 800762a:	2800      	cmp	r0, #0
 800762c:	da53      	bge.n	80076d6 <_dtoa_r+0x8f6>
 800762e:	1e7b      	subs	r3, r7, #1
 8007630:	9304      	str	r3, [sp, #16]
 8007632:	4649      	mov	r1, r9
 8007634:	2300      	movs	r3, #0
 8007636:	220a      	movs	r2, #10
 8007638:	4658      	mov	r0, fp
 800763a:	f000 faf7 	bl	8007c2c <__multadd>
 800763e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007640:	4681      	mov	r9, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 8172 	beq.w	800792c <_dtoa_r+0xb4c>
 8007648:	2300      	movs	r3, #0
 800764a:	4629      	mov	r1, r5
 800764c:	220a      	movs	r2, #10
 800764e:	4658      	mov	r0, fp
 8007650:	f000 faec 	bl	8007c2c <__multadd>
 8007654:	9b00      	ldr	r3, [sp, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	4605      	mov	r5, r0
 800765a:	dc67      	bgt.n	800772c <_dtoa_r+0x94c>
 800765c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800765e:	2b02      	cmp	r3, #2
 8007660:	dc41      	bgt.n	80076e6 <_dtoa_r+0x906>
 8007662:	e063      	b.n	800772c <_dtoa_r+0x94c>
 8007664:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007666:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800766a:	e746      	b.n	80074fa <_dtoa_r+0x71a>
 800766c:	9b07      	ldr	r3, [sp, #28]
 800766e:	1e5c      	subs	r4, r3, #1
 8007670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007672:	42a3      	cmp	r3, r4
 8007674:	bfbf      	itttt	lt
 8007676:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007678:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800767a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800767c:	1ae3      	sublt	r3, r4, r3
 800767e:	bfb4      	ite	lt
 8007680:	18d2      	addlt	r2, r2, r3
 8007682:	1b1c      	subge	r4, r3, r4
 8007684:	9b07      	ldr	r3, [sp, #28]
 8007686:	bfbc      	itt	lt
 8007688:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800768a:	2400      	movlt	r4, #0
 800768c:	2b00      	cmp	r3, #0
 800768e:	bfb5      	itete	lt
 8007690:	eba8 0603 	sublt.w	r6, r8, r3
 8007694:	9b07      	ldrge	r3, [sp, #28]
 8007696:	2300      	movlt	r3, #0
 8007698:	4646      	movge	r6, r8
 800769a:	e730      	b.n	80074fe <_dtoa_r+0x71e>
 800769c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800769e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80076a0:	4646      	mov	r6, r8
 80076a2:	e735      	b.n	8007510 <_dtoa_r+0x730>
 80076a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076a6:	e75c      	b.n	8007562 <_dtoa_r+0x782>
 80076a8:	2300      	movs	r3, #0
 80076aa:	e788      	b.n	80075be <_dtoa_r+0x7de>
 80076ac:	3fe00000 	.word	0x3fe00000
 80076b0:	40240000 	.word	0x40240000
 80076b4:	40140000 	.word	0x40140000
 80076b8:	9b02      	ldr	r3, [sp, #8]
 80076ba:	e780      	b.n	80075be <_dtoa_r+0x7de>
 80076bc:	2300      	movs	r3, #0
 80076be:	930a      	str	r3, [sp, #40]	@ 0x28
 80076c0:	e782      	b.n	80075c8 <_dtoa_r+0x7e8>
 80076c2:	d099      	beq.n	80075f8 <_dtoa_r+0x818>
 80076c4:	9a08      	ldr	r2, [sp, #32]
 80076c6:	331c      	adds	r3, #28
 80076c8:	441a      	add	r2, r3
 80076ca:	4498      	add	r8, r3
 80076cc:	441e      	add	r6, r3
 80076ce:	9208      	str	r2, [sp, #32]
 80076d0:	e792      	b.n	80075f8 <_dtoa_r+0x818>
 80076d2:	4603      	mov	r3, r0
 80076d4:	e7f6      	b.n	80076c4 <_dtoa_r+0x8e4>
 80076d6:	9b07      	ldr	r3, [sp, #28]
 80076d8:	9704      	str	r7, [sp, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	dc20      	bgt.n	8007720 <_dtoa_r+0x940>
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	dd1e      	ble.n	8007724 <_dtoa_r+0x944>
 80076e6:	9b00      	ldr	r3, [sp, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f47f aec0 	bne.w	800746e <_dtoa_r+0x68e>
 80076ee:	4621      	mov	r1, r4
 80076f0:	2205      	movs	r2, #5
 80076f2:	4658      	mov	r0, fp
 80076f4:	f000 fa9a 	bl	8007c2c <__multadd>
 80076f8:	4601      	mov	r1, r0
 80076fa:	4604      	mov	r4, r0
 80076fc:	4648      	mov	r0, r9
 80076fe:	f000 fcad 	bl	800805c <__mcmp>
 8007702:	2800      	cmp	r0, #0
 8007704:	f77f aeb3 	ble.w	800746e <_dtoa_r+0x68e>
 8007708:	4656      	mov	r6, sl
 800770a:	2331      	movs	r3, #49	@ 0x31
 800770c:	f806 3b01 	strb.w	r3, [r6], #1
 8007710:	9b04      	ldr	r3, [sp, #16]
 8007712:	3301      	adds	r3, #1
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	e6ae      	b.n	8007476 <_dtoa_r+0x696>
 8007718:	9c07      	ldr	r4, [sp, #28]
 800771a:	9704      	str	r7, [sp, #16]
 800771c:	4625      	mov	r5, r4
 800771e:	e7f3      	b.n	8007708 <_dtoa_r+0x928>
 8007720:	9b07      	ldr	r3, [sp, #28]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 8104 	beq.w	8007934 <_dtoa_r+0xb54>
 800772c:	2e00      	cmp	r6, #0
 800772e:	dd05      	ble.n	800773c <_dtoa_r+0x95c>
 8007730:	4629      	mov	r1, r5
 8007732:	4632      	mov	r2, r6
 8007734:	4658      	mov	r0, fp
 8007736:	f000 fc25 	bl	8007f84 <__lshift>
 800773a:	4605      	mov	r5, r0
 800773c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800773e:	2b00      	cmp	r3, #0
 8007740:	d05a      	beq.n	80077f8 <_dtoa_r+0xa18>
 8007742:	6869      	ldr	r1, [r5, #4]
 8007744:	4658      	mov	r0, fp
 8007746:	f000 fa0f 	bl	8007b68 <_Balloc>
 800774a:	4606      	mov	r6, r0
 800774c:	b928      	cbnz	r0, 800775a <_dtoa_r+0x97a>
 800774e:	4b84      	ldr	r3, [pc, #528]	@ (8007960 <_dtoa_r+0xb80>)
 8007750:	4602      	mov	r2, r0
 8007752:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007756:	f7ff bb5a 	b.w	8006e0e <_dtoa_r+0x2e>
 800775a:	692a      	ldr	r2, [r5, #16]
 800775c:	3202      	adds	r2, #2
 800775e:	0092      	lsls	r2, r2, #2
 8007760:	f105 010c 	add.w	r1, r5, #12
 8007764:	300c      	adds	r0, #12
 8007766:	f001 f985 	bl	8008a74 <memcpy>
 800776a:	2201      	movs	r2, #1
 800776c:	4631      	mov	r1, r6
 800776e:	4658      	mov	r0, fp
 8007770:	f000 fc08 	bl	8007f84 <__lshift>
 8007774:	f10a 0301 	add.w	r3, sl, #1
 8007778:	9307      	str	r3, [sp, #28]
 800777a:	9b00      	ldr	r3, [sp, #0]
 800777c:	4453      	add	r3, sl
 800777e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007780:	9b02      	ldr	r3, [sp, #8]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	462f      	mov	r7, r5
 8007788:	930a      	str	r3, [sp, #40]	@ 0x28
 800778a:	4605      	mov	r5, r0
 800778c:	9b07      	ldr	r3, [sp, #28]
 800778e:	4621      	mov	r1, r4
 8007790:	3b01      	subs	r3, #1
 8007792:	4648      	mov	r0, r9
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	f7ff fa98 	bl	8006cca <quorem>
 800779a:	4639      	mov	r1, r7
 800779c:	9002      	str	r0, [sp, #8]
 800779e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077a2:	4648      	mov	r0, r9
 80077a4:	f000 fc5a 	bl	800805c <__mcmp>
 80077a8:	462a      	mov	r2, r5
 80077aa:	9008      	str	r0, [sp, #32]
 80077ac:	4621      	mov	r1, r4
 80077ae:	4658      	mov	r0, fp
 80077b0:	f000 fc70 	bl	8008094 <__mdiff>
 80077b4:	68c2      	ldr	r2, [r0, #12]
 80077b6:	4606      	mov	r6, r0
 80077b8:	bb02      	cbnz	r2, 80077fc <_dtoa_r+0xa1c>
 80077ba:	4601      	mov	r1, r0
 80077bc:	4648      	mov	r0, r9
 80077be:	f000 fc4d 	bl	800805c <__mcmp>
 80077c2:	4602      	mov	r2, r0
 80077c4:	4631      	mov	r1, r6
 80077c6:	4658      	mov	r0, fp
 80077c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80077ca:	f000 fa0d 	bl	8007be8 <_Bfree>
 80077ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077d2:	9e07      	ldr	r6, [sp, #28]
 80077d4:	ea43 0102 	orr.w	r1, r3, r2
 80077d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077da:	4319      	orrs	r1, r3
 80077dc:	d110      	bne.n	8007800 <_dtoa_r+0xa20>
 80077de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077e2:	d029      	beq.n	8007838 <_dtoa_r+0xa58>
 80077e4:	9b08      	ldr	r3, [sp, #32]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	dd02      	ble.n	80077f0 <_dtoa_r+0xa10>
 80077ea:	9b02      	ldr	r3, [sp, #8]
 80077ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80077f0:	9b00      	ldr	r3, [sp, #0]
 80077f2:	f883 8000 	strb.w	r8, [r3]
 80077f6:	e63f      	b.n	8007478 <_dtoa_r+0x698>
 80077f8:	4628      	mov	r0, r5
 80077fa:	e7bb      	b.n	8007774 <_dtoa_r+0x994>
 80077fc:	2201      	movs	r2, #1
 80077fe:	e7e1      	b.n	80077c4 <_dtoa_r+0x9e4>
 8007800:	9b08      	ldr	r3, [sp, #32]
 8007802:	2b00      	cmp	r3, #0
 8007804:	db04      	blt.n	8007810 <_dtoa_r+0xa30>
 8007806:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007808:	430b      	orrs	r3, r1
 800780a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800780c:	430b      	orrs	r3, r1
 800780e:	d120      	bne.n	8007852 <_dtoa_r+0xa72>
 8007810:	2a00      	cmp	r2, #0
 8007812:	dded      	ble.n	80077f0 <_dtoa_r+0xa10>
 8007814:	4649      	mov	r1, r9
 8007816:	2201      	movs	r2, #1
 8007818:	4658      	mov	r0, fp
 800781a:	f000 fbb3 	bl	8007f84 <__lshift>
 800781e:	4621      	mov	r1, r4
 8007820:	4681      	mov	r9, r0
 8007822:	f000 fc1b 	bl	800805c <__mcmp>
 8007826:	2800      	cmp	r0, #0
 8007828:	dc03      	bgt.n	8007832 <_dtoa_r+0xa52>
 800782a:	d1e1      	bne.n	80077f0 <_dtoa_r+0xa10>
 800782c:	f018 0f01 	tst.w	r8, #1
 8007830:	d0de      	beq.n	80077f0 <_dtoa_r+0xa10>
 8007832:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007836:	d1d8      	bne.n	80077ea <_dtoa_r+0xa0a>
 8007838:	9a00      	ldr	r2, [sp, #0]
 800783a:	2339      	movs	r3, #57	@ 0x39
 800783c:	7013      	strb	r3, [r2, #0]
 800783e:	4633      	mov	r3, r6
 8007840:	461e      	mov	r6, r3
 8007842:	3b01      	subs	r3, #1
 8007844:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007848:	2a39      	cmp	r2, #57	@ 0x39
 800784a:	d052      	beq.n	80078f2 <_dtoa_r+0xb12>
 800784c:	3201      	adds	r2, #1
 800784e:	701a      	strb	r2, [r3, #0]
 8007850:	e612      	b.n	8007478 <_dtoa_r+0x698>
 8007852:	2a00      	cmp	r2, #0
 8007854:	dd07      	ble.n	8007866 <_dtoa_r+0xa86>
 8007856:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800785a:	d0ed      	beq.n	8007838 <_dtoa_r+0xa58>
 800785c:	9a00      	ldr	r2, [sp, #0]
 800785e:	f108 0301 	add.w	r3, r8, #1
 8007862:	7013      	strb	r3, [r2, #0]
 8007864:	e608      	b.n	8007478 <_dtoa_r+0x698>
 8007866:	9b07      	ldr	r3, [sp, #28]
 8007868:	9a07      	ldr	r2, [sp, #28]
 800786a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800786e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007870:	4293      	cmp	r3, r2
 8007872:	d028      	beq.n	80078c6 <_dtoa_r+0xae6>
 8007874:	4649      	mov	r1, r9
 8007876:	2300      	movs	r3, #0
 8007878:	220a      	movs	r2, #10
 800787a:	4658      	mov	r0, fp
 800787c:	f000 f9d6 	bl	8007c2c <__multadd>
 8007880:	42af      	cmp	r7, r5
 8007882:	4681      	mov	r9, r0
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	f04f 020a 	mov.w	r2, #10
 800788c:	4639      	mov	r1, r7
 800788e:	4658      	mov	r0, fp
 8007890:	d107      	bne.n	80078a2 <_dtoa_r+0xac2>
 8007892:	f000 f9cb 	bl	8007c2c <__multadd>
 8007896:	4607      	mov	r7, r0
 8007898:	4605      	mov	r5, r0
 800789a:	9b07      	ldr	r3, [sp, #28]
 800789c:	3301      	adds	r3, #1
 800789e:	9307      	str	r3, [sp, #28]
 80078a0:	e774      	b.n	800778c <_dtoa_r+0x9ac>
 80078a2:	f000 f9c3 	bl	8007c2c <__multadd>
 80078a6:	4629      	mov	r1, r5
 80078a8:	4607      	mov	r7, r0
 80078aa:	2300      	movs	r3, #0
 80078ac:	220a      	movs	r2, #10
 80078ae:	4658      	mov	r0, fp
 80078b0:	f000 f9bc 	bl	8007c2c <__multadd>
 80078b4:	4605      	mov	r5, r0
 80078b6:	e7f0      	b.n	800789a <_dtoa_r+0xaba>
 80078b8:	9b00      	ldr	r3, [sp, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bfcc      	ite	gt
 80078be:	461e      	movgt	r6, r3
 80078c0:	2601      	movle	r6, #1
 80078c2:	4456      	add	r6, sl
 80078c4:	2700      	movs	r7, #0
 80078c6:	4649      	mov	r1, r9
 80078c8:	2201      	movs	r2, #1
 80078ca:	4658      	mov	r0, fp
 80078cc:	f000 fb5a 	bl	8007f84 <__lshift>
 80078d0:	4621      	mov	r1, r4
 80078d2:	4681      	mov	r9, r0
 80078d4:	f000 fbc2 	bl	800805c <__mcmp>
 80078d8:	2800      	cmp	r0, #0
 80078da:	dcb0      	bgt.n	800783e <_dtoa_r+0xa5e>
 80078dc:	d102      	bne.n	80078e4 <_dtoa_r+0xb04>
 80078de:	f018 0f01 	tst.w	r8, #1
 80078e2:	d1ac      	bne.n	800783e <_dtoa_r+0xa5e>
 80078e4:	4633      	mov	r3, r6
 80078e6:	461e      	mov	r6, r3
 80078e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078ec:	2a30      	cmp	r2, #48	@ 0x30
 80078ee:	d0fa      	beq.n	80078e6 <_dtoa_r+0xb06>
 80078f0:	e5c2      	b.n	8007478 <_dtoa_r+0x698>
 80078f2:	459a      	cmp	sl, r3
 80078f4:	d1a4      	bne.n	8007840 <_dtoa_r+0xa60>
 80078f6:	9b04      	ldr	r3, [sp, #16]
 80078f8:	3301      	adds	r3, #1
 80078fa:	9304      	str	r3, [sp, #16]
 80078fc:	2331      	movs	r3, #49	@ 0x31
 80078fe:	f88a 3000 	strb.w	r3, [sl]
 8007902:	e5b9      	b.n	8007478 <_dtoa_r+0x698>
 8007904:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007906:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007964 <_dtoa_r+0xb84>
 800790a:	b11b      	cbz	r3, 8007914 <_dtoa_r+0xb34>
 800790c:	f10a 0308 	add.w	r3, sl, #8
 8007910:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	4650      	mov	r0, sl
 8007916:	b019      	add	sp, #100	@ 0x64
 8007918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800791c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800791e:	2b01      	cmp	r3, #1
 8007920:	f77f ae37 	ble.w	8007592 <_dtoa_r+0x7b2>
 8007924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007926:	930a      	str	r3, [sp, #40]	@ 0x28
 8007928:	2001      	movs	r0, #1
 800792a:	e655      	b.n	80075d8 <_dtoa_r+0x7f8>
 800792c:	9b00      	ldr	r3, [sp, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f77f aed6 	ble.w	80076e0 <_dtoa_r+0x900>
 8007934:	4656      	mov	r6, sl
 8007936:	4621      	mov	r1, r4
 8007938:	4648      	mov	r0, r9
 800793a:	f7ff f9c6 	bl	8006cca <quorem>
 800793e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007942:	f806 8b01 	strb.w	r8, [r6], #1
 8007946:	9b00      	ldr	r3, [sp, #0]
 8007948:	eba6 020a 	sub.w	r2, r6, sl
 800794c:	4293      	cmp	r3, r2
 800794e:	ddb3      	ble.n	80078b8 <_dtoa_r+0xad8>
 8007950:	4649      	mov	r1, r9
 8007952:	2300      	movs	r3, #0
 8007954:	220a      	movs	r2, #10
 8007956:	4658      	mov	r0, fp
 8007958:	f000 f968 	bl	8007c2c <__multadd>
 800795c:	4681      	mov	r9, r0
 800795e:	e7ea      	b.n	8007936 <_dtoa_r+0xb56>
 8007960:	08008f34 	.word	0x08008f34
 8007964:	08008eb8 	.word	0x08008eb8

08007968 <_free_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4605      	mov	r5, r0
 800796c:	2900      	cmp	r1, #0
 800796e:	d041      	beq.n	80079f4 <_free_r+0x8c>
 8007970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007974:	1f0c      	subs	r4, r1, #4
 8007976:	2b00      	cmp	r3, #0
 8007978:	bfb8      	it	lt
 800797a:	18e4      	addlt	r4, r4, r3
 800797c:	f000 f8e8 	bl	8007b50 <__malloc_lock>
 8007980:	4a1d      	ldr	r2, [pc, #116]	@ (80079f8 <_free_r+0x90>)
 8007982:	6813      	ldr	r3, [r2, #0]
 8007984:	b933      	cbnz	r3, 8007994 <_free_r+0x2c>
 8007986:	6063      	str	r3, [r4, #4]
 8007988:	6014      	str	r4, [r2, #0]
 800798a:	4628      	mov	r0, r5
 800798c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007990:	f000 b8e4 	b.w	8007b5c <__malloc_unlock>
 8007994:	42a3      	cmp	r3, r4
 8007996:	d908      	bls.n	80079aa <_free_r+0x42>
 8007998:	6820      	ldr	r0, [r4, #0]
 800799a:	1821      	adds	r1, r4, r0
 800799c:	428b      	cmp	r3, r1
 800799e:	bf01      	itttt	eq
 80079a0:	6819      	ldreq	r1, [r3, #0]
 80079a2:	685b      	ldreq	r3, [r3, #4]
 80079a4:	1809      	addeq	r1, r1, r0
 80079a6:	6021      	streq	r1, [r4, #0]
 80079a8:	e7ed      	b.n	8007986 <_free_r+0x1e>
 80079aa:	461a      	mov	r2, r3
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	b10b      	cbz	r3, 80079b4 <_free_r+0x4c>
 80079b0:	42a3      	cmp	r3, r4
 80079b2:	d9fa      	bls.n	80079aa <_free_r+0x42>
 80079b4:	6811      	ldr	r1, [r2, #0]
 80079b6:	1850      	adds	r0, r2, r1
 80079b8:	42a0      	cmp	r0, r4
 80079ba:	d10b      	bne.n	80079d4 <_free_r+0x6c>
 80079bc:	6820      	ldr	r0, [r4, #0]
 80079be:	4401      	add	r1, r0
 80079c0:	1850      	adds	r0, r2, r1
 80079c2:	4283      	cmp	r3, r0
 80079c4:	6011      	str	r1, [r2, #0]
 80079c6:	d1e0      	bne.n	800798a <_free_r+0x22>
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	6053      	str	r3, [r2, #4]
 80079ce:	4408      	add	r0, r1
 80079d0:	6010      	str	r0, [r2, #0]
 80079d2:	e7da      	b.n	800798a <_free_r+0x22>
 80079d4:	d902      	bls.n	80079dc <_free_r+0x74>
 80079d6:	230c      	movs	r3, #12
 80079d8:	602b      	str	r3, [r5, #0]
 80079da:	e7d6      	b.n	800798a <_free_r+0x22>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	1821      	adds	r1, r4, r0
 80079e0:	428b      	cmp	r3, r1
 80079e2:	bf04      	itt	eq
 80079e4:	6819      	ldreq	r1, [r3, #0]
 80079e6:	685b      	ldreq	r3, [r3, #4]
 80079e8:	6063      	str	r3, [r4, #4]
 80079ea:	bf04      	itt	eq
 80079ec:	1809      	addeq	r1, r1, r0
 80079ee:	6021      	streq	r1, [r4, #0]
 80079f0:	6054      	str	r4, [r2, #4]
 80079f2:	e7ca      	b.n	800798a <_free_r+0x22>
 80079f4:	bd38      	pop	{r3, r4, r5, pc}
 80079f6:	bf00      	nop
 80079f8:	200006c4 	.word	0x200006c4

080079fc <malloc>:
 80079fc:	4b02      	ldr	r3, [pc, #8]	@ (8007a08 <malloc+0xc>)
 80079fe:	4601      	mov	r1, r0
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	f000 b825 	b.w	8007a50 <_malloc_r>
 8007a06:	bf00      	nop
 8007a08:	20000018 	.word	0x20000018

08007a0c <sbrk_aligned>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	4e0f      	ldr	r6, [pc, #60]	@ (8007a4c <sbrk_aligned+0x40>)
 8007a10:	460c      	mov	r4, r1
 8007a12:	6831      	ldr	r1, [r6, #0]
 8007a14:	4605      	mov	r5, r0
 8007a16:	b911      	cbnz	r1, 8007a1e <sbrk_aligned+0x12>
 8007a18:	f001 f81c 	bl	8008a54 <_sbrk_r>
 8007a1c:	6030      	str	r0, [r6, #0]
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	f001 f817 	bl	8008a54 <_sbrk_r>
 8007a26:	1c43      	adds	r3, r0, #1
 8007a28:	d103      	bne.n	8007a32 <sbrk_aligned+0x26>
 8007a2a:	f04f 34ff 	mov.w	r4, #4294967295
 8007a2e:	4620      	mov	r0, r4
 8007a30:	bd70      	pop	{r4, r5, r6, pc}
 8007a32:	1cc4      	adds	r4, r0, #3
 8007a34:	f024 0403 	bic.w	r4, r4, #3
 8007a38:	42a0      	cmp	r0, r4
 8007a3a:	d0f8      	beq.n	8007a2e <sbrk_aligned+0x22>
 8007a3c:	1a21      	subs	r1, r4, r0
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f001 f808 	bl	8008a54 <_sbrk_r>
 8007a44:	3001      	adds	r0, #1
 8007a46:	d1f2      	bne.n	8007a2e <sbrk_aligned+0x22>
 8007a48:	e7ef      	b.n	8007a2a <sbrk_aligned+0x1e>
 8007a4a:	bf00      	nop
 8007a4c:	200006c0 	.word	0x200006c0

08007a50 <_malloc_r>:
 8007a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a54:	1ccd      	adds	r5, r1, #3
 8007a56:	f025 0503 	bic.w	r5, r5, #3
 8007a5a:	3508      	adds	r5, #8
 8007a5c:	2d0c      	cmp	r5, #12
 8007a5e:	bf38      	it	cc
 8007a60:	250c      	movcc	r5, #12
 8007a62:	2d00      	cmp	r5, #0
 8007a64:	4606      	mov	r6, r0
 8007a66:	db01      	blt.n	8007a6c <_malloc_r+0x1c>
 8007a68:	42a9      	cmp	r1, r5
 8007a6a:	d904      	bls.n	8007a76 <_malloc_r+0x26>
 8007a6c:	230c      	movs	r3, #12
 8007a6e:	6033      	str	r3, [r6, #0]
 8007a70:	2000      	movs	r0, #0
 8007a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b4c <_malloc_r+0xfc>
 8007a7a:	f000 f869 	bl	8007b50 <__malloc_lock>
 8007a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007a82:	461c      	mov	r4, r3
 8007a84:	bb44      	cbnz	r4, 8007ad8 <_malloc_r+0x88>
 8007a86:	4629      	mov	r1, r5
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f7ff ffbf 	bl	8007a0c <sbrk_aligned>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	4604      	mov	r4, r0
 8007a92:	d158      	bne.n	8007b46 <_malloc_r+0xf6>
 8007a94:	f8d8 4000 	ldr.w	r4, [r8]
 8007a98:	4627      	mov	r7, r4
 8007a9a:	2f00      	cmp	r7, #0
 8007a9c:	d143      	bne.n	8007b26 <_malloc_r+0xd6>
 8007a9e:	2c00      	cmp	r4, #0
 8007aa0:	d04b      	beq.n	8007b3a <_malloc_r+0xea>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	eb04 0903 	add.w	r9, r4, r3
 8007aac:	f000 ffd2 	bl	8008a54 <_sbrk_r>
 8007ab0:	4581      	cmp	r9, r0
 8007ab2:	d142      	bne.n	8007b3a <_malloc_r+0xea>
 8007ab4:	6821      	ldr	r1, [r4, #0]
 8007ab6:	1a6d      	subs	r5, r5, r1
 8007ab8:	4629      	mov	r1, r5
 8007aba:	4630      	mov	r0, r6
 8007abc:	f7ff ffa6 	bl	8007a0c <sbrk_aligned>
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d03a      	beq.n	8007b3a <_malloc_r+0xea>
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	442b      	add	r3, r5
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	f8d8 3000 	ldr.w	r3, [r8]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	bb62      	cbnz	r2, 8007b2c <_malloc_r+0xdc>
 8007ad2:	f8c8 7000 	str.w	r7, [r8]
 8007ad6:	e00f      	b.n	8007af8 <_malloc_r+0xa8>
 8007ad8:	6822      	ldr	r2, [r4, #0]
 8007ada:	1b52      	subs	r2, r2, r5
 8007adc:	d420      	bmi.n	8007b20 <_malloc_r+0xd0>
 8007ade:	2a0b      	cmp	r2, #11
 8007ae0:	d917      	bls.n	8007b12 <_malloc_r+0xc2>
 8007ae2:	1961      	adds	r1, r4, r5
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	6025      	str	r5, [r4, #0]
 8007ae8:	bf18      	it	ne
 8007aea:	6059      	strne	r1, [r3, #4]
 8007aec:	6863      	ldr	r3, [r4, #4]
 8007aee:	bf08      	it	eq
 8007af0:	f8c8 1000 	streq.w	r1, [r8]
 8007af4:	5162      	str	r2, [r4, r5]
 8007af6:	604b      	str	r3, [r1, #4]
 8007af8:	4630      	mov	r0, r6
 8007afa:	f000 f82f 	bl	8007b5c <__malloc_unlock>
 8007afe:	f104 000b 	add.w	r0, r4, #11
 8007b02:	1d23      	adds	r3, r4, #4
 8007b04:	f020 0007 	bic.w	r0, r0, #7
 8007b08:	1ac2      	subs	r2, r0, r3
 8007b0a:	bf1c      	itt	ne
 8007b0c:	1a1b      	subne	r3, r3, r0
 8007b0e:	50a3      	strne	r3, [r4, r2]
 8007b10:	e7af      	b.n	8007a72 <_malloc_r+0x22>
 8007b12:	6862      	ldr	r2, [r4, #4]
 8007b14:	42a3      	cmp	r3, r4
 8007b16:	bf0c      	ite	eq
 8007b18:	f8c8 2000 	streq.w	r2, [r8]
 8007b1c:	605a      	strne	r2, [r3, #4]
 8007b1e:	e7eb      	b.n	8007af8 <_malloc_r+0xa8>
 8007b20:	4623      	mov	r3, r4
 8007b22:	6864      	ldr	r4, [r4, #4]
 8007b24:	e7ae      	b.n	8007a84 <_malloc_r+0x34>
 8007b26:	463c      	mov	r4, r7
 8007b28:	687f      	ldr	r7, [r7, #4]
 8007b2a:	e7b6      	b.n	8007a9a <_malloc_r+0x4a>
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	42a3      	cmp	r3, r4
 8007b32:	d1fb      	bne.n	8007b2c <_malloc_r+0xdc>
 8007b34:	2300      	movs	r3, #0
 8007b36:	6053      	str	r3, [r2, #4]
 8007b38:	e7de      	b.n	8007af8 <_malloc_r+0xa8>
 8007b3a:	230c      	movs	r3, #12
 8007b3c:	6033      	str	r3, [r6, #0]
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f000 f80c 	bl	8007b5c <__malloc_unlock>
 8007b44:	e794      	b.n	8007a70 <_malloc_r+0x20>
 8007b46:	6005      	str	r5, [r0, #0]
 8007b48:	e7d6      	b.n	8007af8 <_malloc_r+0xa8>
 8007b4a:	bf00      	nop
 8007b4c:	200006c4 	.word	0x200006c4

08007b50 <__malloc_lock>:
 8007b50:	4801      	ldr	r0, [pc, #4]	@ (8007b58 <__malloc_lock+0x8>)
 8007b52:	f7ff b8b8 	b.w	8006cc6 <__retarget_lock_acquire_recursive>
 8007b56:	bf00      	nop
 8007b58:	200006bc 	.word	0x200006bc

08007b5c <__malloc_unlock>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	@ (8007b64 <__malloc_unlock+0x8>)
 8007b5e:	f7ff b8b3 	b.w	8006cc8 <__retarget_lock_release_recursive>
 8007b62:	bf00      	nop
 8007b64:	200006bc 	.word	0x200006bc

08007b68 <_Balloc>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	69c6      	ldr	r6, [r0, #28]
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	460d      	mov	r5, r1
 8007b70:	b976      	cbnz	r6, 8007b90 <_Balloc+0x28>
 8007b72:	2010      	movs	r0, #16
 8007b74:	f7ff ff42 	bl	80079fc <malloc>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	61e0      	str	r0, [r4, #28]
 8007b7c:	b920      	cbnz	r0, 8007b88 <_Balloc+0x20>
 8007b7e:	4b18      	ldr	r3, [pc, #96]	@ (8007be0 <_Balloc+0x78>)
 8007b80:	4818      	ldr	r0, [pc, #96]	@ (8007be4 <_Balloc+0x7c>)
 8007b82:	216b      	movs	r1, #107	@ 0x6b
 8007b84:	f000 ff84 	bl	8008a90 <__assert_func>
 8007b88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b8c:	6006      	str	r6, [r0, #0]
 8007b8e:	60c6      	str	r6, [r0, #12]
 8007b90:	69e6      	ldr	r6, [r4, #28]
 8007b92:	68f3      	ldr	r3, [r6, #12]
 8007b94:	b183      	cbz	r3, 8007bb8 <_Balloc+0x50>
 8007b96:	69e3      	ldr	r3, [r4, #28]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b9e:	b9b8      	cbnz	r0, 8007bd0 <_Balloc+0x68>
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ba6:	1d72      	adds	r2, r6, #5
 8007ba8:	0092      	lsls	r2, r2, #2
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 ff8e 	bl	8008acc <_calloc_r>
 8007bb0:	b160      	cbz	r0, 8007bcc <_Balloc+0x64>
 8007bb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bb6:	e00e      	b.n	8007bd6 <_Balloc+0x6e>
 8007bb8:	2221      	movs	r2, #33	@ 0x21
 8007bba:	2104      	movs	r1, #4
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f000 ff85 	bl	8008acc <_calloc_r>
 8007bc2:	69e3      	ldr	r3, [r4, #28]
 8007bc4:	60f0      	str	r0, [r6, #12]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e4      	bne.n	8007b96 <_Balloc+0x2e>
 8007bcc:	2000      	movs	r0, #0
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	6802      	ldr	r2, [r0, #0]
 8007bd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bdc:	e7f7      	b.n	8007bce <_Balloc+0x66>
 8007bde:	bf00      	nop
 8007be0:	08008ec5 	.word	0x08008ec5
 8007be4:	08008f45 	.word	0x08008f45

08007be8 <_Bfree>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	69c6      	ldr	r6, [r0, #28]
 8007bec:	4605      	mov	r5, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	b976      	cbnz	r6, 8007c10 <_Bfree+0x28>
 8007bf2:	2010      	movs	r0, #16
 8007bf4:	f7ff ff02 	bl	80079fc <malloc>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	61e8      	str	r0, [r5, #28]
 8007bfc:	b920      	cbnz	r0, 8007c08 <_Bfree+0x20>
 8007bfe:	4b09      	ldr	r3, [pc, #36]	@ (8007c24 <_Bfree+0x3c>)
 8007c00:	4809      	ldr	r0, [pc, #36]	@ (8007c28 <_Bfree+0x40>)
 8007c02:	218f      	movs	r1, #143	@ 0x8f
 8007c04:	f000 ff44 	bl	8008a90 <__assert_func>
 8007c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c0c:	6006      	str	r6, [r0, #0]
 8007c0e:	60c6      	str	r6, [r0, #12]
 8007c10:	b13c      	cbz	r4, 8007c22 <_Bfree+0x3a>
 8007c12:	69eb      	ldr	r3, [r5, #28]
 8007c14:	6862      	ldr	r2, [r4, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c1c:	6021      	str	r1, [r4, #0]
 8007c1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	08008ec5 	.word	0x08008ec5
 8007c28:	08008f45 	.word	0x08008f45

08007c2c <__multadd>:
 8007c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c30:	690d      	ldr	r5, [r1, #16]
 8007c32:	4607      	mov	r7, r0
 8007c34:	460c      	mov	r4, r1
 8007c36:	461e      	mov	r6, r3
 8007c38:	f101 0c14 	add.w	ip, r1, #20
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	f8dc 3000 	ldr.w	r3, [ip]
 8007c42:	b299      	uxth	r1, r3
 8007c44:	fb02 6101 	mla	r1, r2, r1, r6
 8007c48:	0c1e      	lsrs	r6, r3, #16
 8007c4a:	0c0b      	lsrs	r3, r1, #16
 8007c4c:	fb02 3306 	mla	r3, r2, r6, r3
 8007c50:	b289      	uxth	r1, r1
 8007c52:	3001      	adds	r0, #1
 8007c54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c58:	4285      	cmp	r5, r0
 8007c5a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c62:	dcec      	bgt.n	8007c3e <__multadd+0x12>
 8007c64:	b30e      	cbz	r6, 8007caa <__multadd+0x7e>
 8007c66:	68a3      	ldr	r3, [r4, #8]
 8007c68:	42ab      	cmp	r3, r5
 8007c6a:	dc19      	bgt.n	8007ca0 <__multadd+0x74>
 8007c6c:	6861      	ldr	r1, [r4, #4]
 8007c6e:	4638      	mov	r0, r7
 8007c70:	3101      	adds	r1, #1
 8007c72:	f7ff ff79 	bl	8007b68 <_Balloc>
 8007c76:	4680      	mov	r8, r0
 8007c78:	b928      	cbnz	r0, 8007c86 <__multadd+0x5a>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb0 <__multadd+0x84>)
 8007c7e:	480d      	ldr	r0, [pc, #52]	@ (8007cb4 <__multadd+0x88>)
 8007c80:	21ba      	movs	r1, #186	@ 0xba
 8007c82:	f000 ff05 	bl	8008a90 <__assert_func>
 8007c86:	6922      	ldr	r2, [r4, #16]
 8007c88:	3202      	adds	r2, #2
 8007c8a:	f104 010c 	add.w	r1, r4, #12
 8007c8e:	0092      	lsls	r2, r2, #2
 8007c90:	300c      	adds	r0, #12
 8007c92:	f000 feef 	bl	8008a74 <memcpy>
 8007c96:	4621      	mov	r1, r4
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f7ff ffa5 	bl	8007be8 <_Bfree>
 8007c9e:	4644      	mov	r4, r8
 8007ca0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ca4:	3501      	adds	r5, #1
 8007ca6:	615e      	str	r6, [r3, #20]
 8007ca8:	6125      	str	r5, [r4, #16]
 8007caa:	4620      	mov	r0, r4
 8007cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb0:	08008f34 	.word	0x08008f34
 8007cb4:	08008f45 	.word	0x08008f45

08007cb8 <__hi0bits>:
 8007cb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	bf36      	itet	cc
 8007cc0:	0403      	lslcc	r3, r0, #16
 8007cc2:	2000      	movcs	r0, #0
 8007cc4:	2010      	movcc	r0, #16
 8007cc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cca:	bf3c      	itt	cc
 8007ccc:	021b      	lslcc	r3, r3, #8
 8007cce:	3008      	addcc	r0, #8
 8007cd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cd4:	bf3c      	itt	cc
 8007cd6:	011b      	lslcc	r3, r3, #4
 8007cd8:	3004      	addcc	r0, #4
 8007cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cde:	bf3c      	itt	cc
 8007ce0:	009b      	lslcc	r3, r3, #2
 8007ce2:	3002      	addcc	r0, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	db05      	blt.n	8007cf4 <__hi0bits+0x3c>
 8007ce8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007cec:	f100 0001 	add.w	r0, r0, #1
 8007cf0:	bf08      	it	eq
 8007cf2:	2020      	moveq	r0, #32
 8007cf4:	4770      	bx	lr

08007cf6 <__lo0bits>:
 8007cf6:	6803      	ldr	r3, [r0, #0]
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	f013 0007 	ands.w	r0, r3, #7
 8007cfe:	d00b      	beq.n	8007d18 <__lo0bits+0x22>
 8007d00:	07d9      	lsls	r1, r3, #31
 8007d02:	d421      	bmi.n	8007d48 <__lo0bits+0x52>
 8007d04:	0798      	lsls	r0, r3, #30
 8007d06:	bf49      	itett	mi
 8007d08:	085b      	lsrmi	r3, r3, #1
 8007d0a:	089b      	lsrpl	r3, r3, #2
 8007d0c:	2001      	movmi	r0, #1
 8007d0e:	6013      	strmi	r3, [r2, #0]
 8007d10:	bf5c      	itt	pl
 8007d12:	6013      	strpl	r3, [r2, #0]
 8007d14:	2002      	movpl	r0, #2
 8007d16:	4770      	bx	lr
 8007d18:	b299      	uxth	r1, r3
 8007d1a:	b909      	cbnz	r1, 8007d20 <__lo0bits+0x2a>
 8007d1c:	0c1b      	lsrs	r3, r3, #16
 8007d1e:	2010      	movs	r0, #16
 8007d20:	b2d9      	uxtb	r1, r3
 8007d22:	b909      	cbnz	r1, 8007d28 <__lo0bits+0x32>
 8007d24:	3008      	adds	r0, #8
 8007d26:	0a1b      	lsrs	r3, r3, #8
 8007d28:	0719      	lsls	r1, r3, #28
 8007d2a:	bf04      	itt	eq
 8007d2c:	091b      	lsreq	r3, r3, #4
 8007d2e:	3004      	addeq	r0, #4
 8007d30:	0799      	lsls	r1, r3, #30
 8007d32:	bf04      	itt	eq
 8007d34:	089b      	lsreq	r3, r3, #2
 8007d36:	3002      	addeq	r0, #2
 8007d38:	07d9      	lsls	r1, r3, #31
 8007d3a:	d403      	bmi.n	8007d44 <__lo0bits+0x4e>
 8007d3c:	085b      	lsrs	r3, r3, #1
 8007d3e:	f100 0001 	add.w	r0, r0, #1
 8007d42:	d003      	beq.n	8007d4c <__lo0bits+0x56>
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	4770      	bx	lr
 8007d48:	2000      	movs	r0, #0
 8007d4a:	4770      	bx	lr
 8007d4c:	2020      	movs	r0, #32
 8007d4e:	4770      	bx	lr

08007d50 <__i2b>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	460c      	mov	r4, r1
 8007d54:	2101      	movs	r1, #1
 8007d56:	f7ff ff07 	bl	8007b68 <_Balloc>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	b928      	cbnz	r0, 8007d6a <__i2b+0x1a>
 8007d5e:	4b05      	ldr	r3, [pc, #20]	@ (8007d74 <__i2b+0x24>)
 8007d60:	4805      	ldr	r0, [pc, #20]	@ (8007d78 <__i2b+0x28>)
 8007d62:	f240 1145 	movw	r1, #325	@ 0x145
 8007d66:	f000 fe93 	bl	8008a90 <__assert_func>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	6144      	str	r4, [r0, #20]
 8007d6e:	6103      	str	r3, [r0, #16]
 8007d70:	bd10      	pop	{r4, pc}
 8007d72:	bf00      	nop
 8007d74:	08008f34 	.word	0x08008f34
 8007d78:	08008f45 	.word	0x08008f45

08007d7c <__multiply>:
 8007d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d80:	4614      	mov	r4, r2
 8007d82:	690a      	ldr	r2, [r1, #16]
 8007d84:	6923      	ldr	r3, [r4, #16]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	bfa8      	it	ge
 8007d8a:	4623      	movge	r3, r4
 8007d8c:	460f      	mov	r7, r1
 8007d8e:	bfa4      	itt	ge
 8007d90:	460c      	movge	r4, r1
 8007d92:	461f      	movge	r7, r3
 8007d94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007d98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007d9c:	68a3      	ldr	r3, [r4, #8]
 8007d9e:	6861      	ldr	r1, [r4, #4]
 8007da0:	eb0a 0609 	add.w	r6, sl, r9
 8007da4:	42b3      	cmp	r3, r6
 8007da6:	b085      	sub	sp, #20
 8007da8:	bfb8      	it	lt
 8007daa:	3101      	addlt	r1, #1
 8007dac:	f7ff fedc 	bl	8007b68 <_Balloc>
 8007db0:	b930      	cbnz	r0, 8007dc0 <__multiply+0x44>
 8007db2:	4602      	mov	r2, r0
 8007db4:	4b44      	ldr	r3, [pc, #272]	@ (8007ec8 <__multiply+0x14c>)
 8007db6:	4845      	ldr	r0, [pc, #276]	@ (8007ecc <__multiply+0x150>)
 8007db8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007dbc:	f000 fe68 	bl	8008a90 <__assert_func>
 8007dc0:	f100 0514 	add.w	r5, r0, #20
 8007dc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007dc8:	462b      	mov	r3, r5
 8007dca:	2200      	movs	r2, #0
 8007dcc:	4543      	cmp	r3, r8
 8007dce:	d321      	bcc.n	8007e14 <__multiply+0x98>
 8007dd0:	f107 0114 	add.w	r1, r7, #20
 8007dd4:	f104 0214 	add.w	r2, r4, #20
 8007dd8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007ddc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007de0:	9302      	str	r3, [sp, #8]
 8007de2:	1b13      	subs	r3, r2, r4
 8007de4:	3b15      	subs	r3, #21
 8007de6:	f023 0303 	bic.w	r3, r3, #3
 8007dea:	3304      	adds	r3, #4
 8007dec:	f104 0715 	add.w	r7, r4, #21
 8007df0:	42ba      	cmp	r2, r7
 8007df2:	bf38      	it	cc
 8007df4:	2304      	movcc	r3, #4
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	9b02      	ldr	r3, [sp, #8]
 8007dfa:	9103      	str	r1, [sp, #12]
 8007dfc:	428b      	cmp	r3, r1
 8007dfe:	d80c      	bhi.n	8007e1a <__multiply+0x9e>
 8007e00:	2e00      	cmp	r6, #0
 8007e02:	dd03      	ble.n	8007e0c <__multiply+0x90>
 8007e04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d05b      	beq.n	8007ec4 <__multiply+0x148>
 8007e0c:	6106      	str	r6, [r0, #16]
 8007e0e:	b005      	add	sp, #20
 8007e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e14:	f843 2b04 	str.w	r2, [r3], #4
 8007e18:	e7d8      	b.n	8007dcc <__multiply+0x50>
 8007e1a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007e1e:	f1ba 0f00 	cmp.w	sl, #0
 8007e22:	d024      	beq.n	8007e6e <__multiply+0xf2>
 8007e24:	f104 0e14 	add.w	lr, r4, #20
 8007e28:	46a9      	mov	r9, r5
 8007e2a:	f04f 0c00 	mov.w	ip, #0
 8007e2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e32:	f8d9 3000 	ldr.w	r3, [r9]
 8007e36:	fa1f fb87 	uxth.w	fp, r7
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007e40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007e44:	f8d9 7000 	ldr.w	r7, [r9]
 8007e48:	4463      	add	r3, ip
 8007e4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e4e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007e52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e5c:	4572      	cmp	r2, lr
 8007e5e:	f849 3b04 	str.w	r3, [r9], #4
 8007e62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e66:	d8e2      	bhi.n	8007e2e <__multiply+0xb2>
 8007e68:	9b01      	ldr	r3, [sp, #4]
 8007e6a:	f845 c003 	str.w	ip, [r5, r3]
 8007e6e:	9b03      	ldr	r3, [sp, #12]
 8007e70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e74:	3104      	adds	r1, #4
 8007e76:	f1b9 0f00 	cmp.w	r9, #0
 8007e7a:	d021      	beq.n	8007ec0 <__multiply+0x144>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	f104 0c14 	add.w	ip, r4, #20
 8007e82:	46ae      	mov	lr, r5
 8007e84:	f04f 0a00 	mov.w	sl, #0
 8007e88:	f8bc b000 	ldrh.w	fp, [ip]
 8007e8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007e90:	fb09 770b 	mla	r7, r9, fp, r7
 8007e94:	4457      	add	r7, sl
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e9c:	f84e 3b04 	str.w	r3, [lr], #4
 8007ea0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ea4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ea8:	f8be 3000 	ldrh.w	r3, [lr]
 8007eac:	fb09 330a 	mla	r3, r9, sl, r3
 8007eb0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007eb4:	4562      	cmp	r2, ip
 8007eb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007eba:	d8e5      	bhi.n	8007e88 <__multiply+0x10c>
 8007ebc:	9f01      	ldr	r7, [sp, #4]
 8007ebe:	51eb      	str	r3, [r5, r7]
 8007ec0:	3504      	adds	r5, #4
 8007ec2:	e799      	b.n	8007df8 <__multiply+0x7c>
 8007ec4:	3e01      	subs	r6, #1
 8007ec6:	e79b      	b.n	8007e00 <__multiply+0x84>
 8007ec8:	08008f34 	.word	0x08008f34
 8007ecc:	08008f45 	.word	0x08008f45

08007ed0 <__pow5mult>:
 8007ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed4:	4615      	mov	r5, r2
 8007ed6:	f012 0203 	ands.w	r2, r2, #3
 8007eda:	4607      	mov	r7, r0
 8007edc:	460e      	mov	r6, r1
 8007ede:	d007      	beq.n	8007ef0 <__pow5mult+0x20>
 8007ee0:	4c25      	ldr	r4, [pc, #148]	@ (8007f78 <__pow5mult+0xa8>)
 8007ee2:	3a01      	subs	r2, #1
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007eea:	f7ff fe9f 	bl	8007c2c <__multadd>
 8007eee:	4606      	mov	r6, r0
 8007ef0:	10ad      	asrs	r5, r5, #2
 8007ef2:	d03d      	beq.n	8007f70 <__pow5mult+0xa0>
 8007ef4:	69fc      	ldr	r4, [r7, #28]
 8007ef6:	b97c      	cbnz	r4, 8007f18 <__pow5mult+0x48>
 8007ef8:	2010      	movs	r0, #16
 8007efa:	f7ff fd7f 	bl	80079fc <malloc>
 8007efe:	4602      	mov	r2, r0
 8007f00:	61f8      	str	r0, [r7, #28]
 8007f02:	b928      	cbnz	r0, 8007f10 <__pow5mult+0x40>
 8007f04:	4b1d      	ldr	r3, [pc, #116]	@ (8007f7c <__pow5mult+0xac>)
 8007f06:	481e      	ldr	r0, [pc, #120]	@ (8007f80 <__pow5mult+0xb0>)
 8007f08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f0c:	f000 fdc0 	bl	8008a90 <__assert_func>
 8007f10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f14:	6004      	str	r4, [r0, #0]
 8007f16:	60c4      	str	r4, [r0, #12]
 8007f18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007f1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f20:	b94c      	cbnz	r4, 8007f36 <__pow5mult+0x66>
 8007f22:	f240 2171 	movw	r1, #625	@ 0x271
 8007f26:	4638      	mov	r0, r7
 8007f28:	f7ff ff12 	bl	8007d50 <__i2b>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f32:	4604      	mov	r4, r0
 8007f34:	6003      	str	r3, [r0, #0]
 8007f36:	f04f 0900 	mov.w	r9, #0
 8007f3a:	07eb      	lsls	r3, r5, #31
 8007f3c:	d50a      	bpl.n	8007f54 <__pow5mult+0x84>
 8007f3e:	4631      	mov	r1, r6
 8007f40:	4622      	mov	r2, r4
 8007f42:	4638      	mov	r0, r7
 8007f44:	f7ff ff1a 	bl	8007d7c <__multiply>
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4680      	mov	r8, r0
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	f7ff fe4b 	bl	8007be8 <_Bfree>
 8007f52:	4646      	mov	r6, r8
 8007f54:	106d      	asrs	r5, r5, #1
 8007f56:	d00b      	beq.n	8007f70 <__pow5mult+0xa0>
 8007f58:	6820      	ldr	r0, [r4, #0]
 8007f5a:	b938      	cbnz	r0, 8007f6c <__pow5mult+0x9c>
 8007f5c:	4622      	mov	r2, r4
 8007f5e:	4621      	mov	r1, r4
 8007f60:	4638      	mov	r0, r7
 8007f62:	f7ff ff0b 	bl	8007d7c <__multiply>
 8007f66:	6020      	str	r0, [r4, #0]
 8007f68:	f8c0 9000 	str.w	r9, [r0]
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	e7e4      	b.n	8007f3a <__pow5mult+0x6a>
 8007f70:	4630      	mov	r0, r6
 8007f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f76:	bf00      	nop
 8007f78:	08008fa0 	.word	0x08008fa0
 8007f7c:	08008ec5 	.word	0x08008ec5
 8007f80:	08008f45 	.word	0x08008f45

08007f84 <__lshift>:
 8007f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f88:	460c      	mov	r4, r1
 8007f8a:	6849      	ldr	r1, [r1, #4]
 8007f8c:	6923      	ldr	r3, [r4, #16]
 8007f8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f92:	68a3      	ldr	r3, [r4, #8]
 8007f94:	4607      	mov	r7, r0
 8007f96:	4691      	mov	r9, r2
 8007f98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f9c:	f108 0601 	add.w	r6, r8, #1
 8007fa0:	42b3      	cmp	r3, r6
 8007fa2:	db0b      	blt.n	8007fbc <__lshift+0x38>
 8007fa4:	4638      	mov	r0, r7
 8007fa6:	f7ff fddf 	bl	8007b68 <_Balloc>
 8007faa:	4605      	mov	r5, r0
 8007fac:	b948      	cbnz	r0, 8007fc2 <__lshift+0x3e>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	4b28      	ldr	r3, [pc, #160]	@ (8008054 <__lshift+0xd0>)
 8007fb2:	4829      	ldr	r0, [pc, #164]	@ (8008058 <__lshift+0xd4>)
 8007fb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007fb8:	f000 fd6a 	bl	8008a90 <__assert_func>
 8007fbc:	3101      	adds	r1, #1
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	e7ee      	b.n	8007fa0 <__lshift+0x1c>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f100 0114 	add.w	r1, r0, #20
 8007fc8:	f100 0210 	add.w	r2, r0, #16
 8007fcc:	4618      	mov	r0, r3
 8007fce:	4553      	cmp	r3, sl
 8007fd0:	db33      	blt.n	800803a <__lshift+0xb6>
 8007fd2:	6920      	ldr	r0, [r4, #16]
 8007fd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fd8:	f104 0314 	add.w	r3, r4, #20
 8007fdc:	f019 091f 	ands.w	r9, r9, #31
 8007fe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fe4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007fe8:	d02b      	beq.n	8008042 <__lshift+0xbe>
 8007fea:	f1c9 0e20 	rsb	lr, r9, #32
 8007fee:	468a      	mov	sl, r1
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	6818      	ldr	r0, [r3, #0]
 8007ff4:	fa00 f009 	lsl.w	r0, r0, r9
 8007ff8:	4310      	orrs	r0, r2
 8007ffa:	f84a 0b04 	str.w	r0, [sl], #4
 8007ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008002:	459c      	cmp	ip, r3
 8008004:	fa22 f20e 	lsr.w	r2, r2, lr
 8008008:	d8f3      	bhi.n	8007ff2 <__lshift+0x6e>
 800800a:	ebac 0304 	sub.w	r3, ip, r4
 800800e:	3b15      	subs	r3, #21
 8008010:	f023 0303 	bic.w	r3, r3, #3
 8008014:	3304      	adds	r3, #4
 8008016:	f104 0015 	add.w	r0, r4, #21
 800801a:	4584      	cmp	ip, r0
 800801c:	bf38      	it	cc
 800801e:	2304      	movcc	r3, #4
 8008020:	50ca      	str	r2, [r1, r3]
 8008022:	b10a      	cbz	r2, 8008028 <__lshift+0xa4>
 8008024:	f108 0602 	add.w	r6, r8, #2
 8008028:	3e01      	subs	r6, #1
 800802a:	4638      	mov	r0, r7
 800802c:	612e      	str	r6, [r5, #16]
 800802e:	4621      	mov	r1, r4
 8008030:	f7ff fdda 	bl	8007be8 <_Bfree>
 8008034:	4628      	mov	r0, r5
 8008036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803a:	f842 0f04 	str.w	r0, [r2, #4]!
 800803e:	3301      	adds	r3, #1
 8008040:	e7c5      	b.n	8007fce <__lshift+0x4a>
 8008042:	3904      	subs	r1, #4
 8008044:	f853 2b04 	ldr.w	r2, [r3], #4
 8008048:	f841 2f04 	str.w	r2, [r1, #4]!
 800804c:	459c      	cmp	ip, r3
 800804e:	d8f9      	bhi.n	8008044 <__lshift+0xc0>
 8008050:	e7ea      	b.n	8008028 <__lshift+0xa4>
 8008052:	bf00      	nop
 8008054:	08008f34 	.word	0x08008f34
 8008058:	08008f45 	.word	0x08008f45

0800805c <__mcmp>:
 800805c:	690a      	ldr	r2, [r1, #16]
 800805e:	4603      	mov	r3, r0
 8008060:	6900      	ldr	r0, [r0, #16]
 8008062:	1a80      	subs	r0, r0, r2
 8008064:	b530      	push	{r4, r5, lr}
 8008066:	d10e      	bne.n	8008086 <__mcmp+0x2a>
 8008068:	3314      	adds	r3, #20
 800806a:	3114      	adds	r1, #20
 800806c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008070:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008074:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008078:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800807c:	4295      	cmp	r5, r2
 800807e:	d003      	beq.n	8008088 <__mcmp+0x2c>
 8008080:	d205      	bcs.n	800808e <__mcmp+0x32>
 8008082:	f04f 30ff 	mov.w	r0, #4294967295
 8008086:	bd30      	pop	{r4, r5, pc}
 8008088:	42a3      	cmp	r3, r4
 800808a:	d3f3      	bcc.n	8008074 <__mcmp+0x18>
 800808c:	e7fb      	b.n	8008086 <__mcmp+0x2a>
 800808e:	2001      	movs	r0, #1
 8008090:	e7f9      	b.n	8008086 <__mcmp+0x2a>
	...

08008094 <__mdiff>:
 8008094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008098:	4689      	mov	r9, r1
 800809a:	4606      	mov	r6, r0
 800809c:	4611      	mov	r1, r2
 800809e:	4648      	mov	r0, r9
 80080a0:	4614      	mov	r4, r2
 80080a2:	f7ff ffdb 	bl	800805c <__mcmp>
 80080a6:	1e05      	subs	r5, r0, #0
 80080a8:	d112      	bne.n	80080d0 <__mdiff+0x3c>
 80080aa:	4629      	mov	r1, r5
 80080ac:	4630      	mov	r0, r6
 80080ae:	f7ff fd5b 	bl	8007b68 <_Balloc>
 80080b2:	4602      	mov	r2, r0
 80080b4:	b928      	cbnz	r0, 80080c2 <__mdiff+0x2e>
 80080b6:	4b3f      	ldr	r3, [pc, #252]	@ (80081b4 <__mdiff+0x120>)
 80080b8:	f240 2137 	movw	r1, #567	@ 0x237
 80080bc:	483e      	ldr	r0, [pc, #248]	@ (80081b8 <__mdiff+0x124>)
 80080be:	f000 fce7 	bl	8008a90 <__assert_func>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080c8:	4610      	mov	r0, r2
 80080ca:	b003      	add	sp, #12
 80080cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d0:	bfbc      	itt	lt
 80080d2:	464b      	movlt	r3, r9
 80080d4:	46a1      	movlt	r9, r4
 80080d6:	4630      	mov	r0, r6
 80080d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80080dc:	bfba      	itte	lt
 80080de:	461c      	movlt	r4, r3
 80080e0:	2501      	movlt	r5, #1
 80080e2:	2500      	movge	r5, #0
 80080e4:	f7ff fd40 	bl	8007b68 <_Balloc>
 80080e8:	4602      	mov	r2, r0
 80080ea:	b918      	cbnz	r0, 80080f4 <__mdiff+0x60>
 80080ec:	4b31      	ldr	r3, [pc, #196]	@ (80081b4 <__mdiff+0x120>)
 80080ee:	f240 2145 	movw	r1, #581	@ 0x245
 80080f2:	e7e3      	b.n	80080bc <__mdiff+0x28>
 80080f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80080f8:	6926      	ldr	r6, [r4, #16]
 80080fa:	60c5      	str	r5, [r0, #12]
 80080fc:	f109 0310 	add.w	r3, r9, #16
 8008100:	f109 0514 	add.w	r5, r9, #20
 8008104:	f104 0e14 	add.w	lr, r4, #20
 8008108:	f100 0b14 	add.w	fp, r0, #20
 800810c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008110:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	46d9      	mov	r9, fp
 8008118:	f04f 0c00 	mov.w	ip, #0
 800811c:	9b01      	ldr	r3, [sp, #4]
 800811e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008122:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008126:	9301      	str	r3, [sp, #4]
 8008128:	fa1f f38a 	uxth.w	r3, sl
 800812c:	4619      	mov	r1, r3
 800812e:	b283      	uxth	r3, r0
 8008130:	1acb      	subs	r3, r1, r3
 8008132:	0c00      	lsrs	r0, r0, #16
 8008134:	4463      	add	r3, ip
 8008136:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800813a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800813e:	b29b      	uxth	r3, r3
 8008140:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008144:	4576      	cmp	r6, lr
 8008146:	f849 3b04 	str.w	r3, [r9], #4
 800814a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800814e:	d8e5      	bhi.n	800811c <__mdiff+0x88>
 8008150:	1b33      	subs	r3, r6, r4
 8008152:	3b15      	subs	r3, #21
 8008154:	f023 0303 	bic.w	r3, r3, #3
 8008158:	3415      	adds	r4, #21
 800815a:	3304      	adds	r3, #4
 800815c:	42a6      	cmp	r6, r4
 800815e:	bf38      	it	cc
 8008160:	2304      	movcc	r3, #4
 8008162:	441d      	add	r5, r3
 8008164:	445b      	add	r3, fp
 8008166:	461e      	mov	r6, r3
 8008168:	462c      	mov	r4, r5
 800816a:	4544      	cmp	r4, r8
 800816c:	d30e      	bcc.n	800818c <__mdiff+0xf8>
 800816e:	f108 0103 	add.w	r1, r8, #3
 8008172:	1b49      	subs	r1, r1, r5
 8008174:	f021 0103 	bic.w	r1, r1, #3
 8008178:	3d03      	subs	r5, #3
 800817a:	45a8      	cmp	r8, r5
 800817c:	bf38      	it	cc
 800817e:	2100      	movcc	r1, #0
 8008180:	440b      	add	r3, r1
 8008182:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008186:	b191      	cbz	r1, 80081ae <__mdiff+0x11a>
 8008188:	6117      	str	r7, [r2, #16]
 800818a:	e79d      	b.n	80080c8 <__mdiff+0x34>
 800818c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008190:	46e6      	mov	lr, ip
 8008192:	0c08      	lsrs	r0, r1, #16
 8008194:	fa1c fc81 	uxtah	ip, ip, r1
 8008198:	4471      	add	r1, lr
 800819a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800819e:	b289      	uxth	r1, r1
 80081a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80081a4:	f846 1b04 	str.w	r1, [r6], #4
 80081a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081ac:	e7dd      	b.n	800816a <__mdiff+0xd6>
 80081ae:	3f01      	subs	r7, #1
 80081b0:	e7e7      	b.n	8008182 <__mdiff+0xee>
 80081b2:	bf00      	nop
 80081b4:	08008f34 	.word	0x08008f34
 80081b8:	08008f45 	.word	0x08008f45

080081bc <__d2b>:
 80081bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081c0:	460f      	mov	r7, r1
 80081c2:	2101      	movs	r1, #1
 80081c4:	ec59 8b10 	vmov	r8, r9, d0
 80081c8:	4616      	mov	r6, r2
 80081ca:	f7ff fccd 	bl	8007b68 <_Balloc>
 80081ce:	4604      	mov	r4, r0
 80081d0:	b930      	cbnz	r0, 80081e0 <__d2b+0x24>
 80081d2:	4602      	mov	r2, r0
 80081d4:	4b23      	ldr	r3, [pc, #140]	@ (8008264 <__d2b+0xa8>)
 80081d6:	4824      	ldr	r0, [pc, #144]	@ (8008268 <__d2b+0xac>)
 80081d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80081dc:	f000 fc58 	bl	8008a90 <__assert_func>
 80081e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80081e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081e8:	b10d      	cbz	r5, 80081ee <__d2b+0x32>
 80081ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	f1b8 0300 	subs.w	r3, r8, #0
 80081f4:	d023      	beq.n	800823e <__d2b+0x82>
 80081f6:	4668      	mov	r0, sp
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	f7ff fd7c 	bl	8007cf6 <__lo0bits>
 80081fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008202:	b1d0      	cbz	r0, 800823a <__d2b+0x7e>
 8008204:	f1c0 0320 	rsb	r3, r0, #32
 8008208:	fa02 f303 	lsl.w	r3, r2, r3
 800820c:	430b      	orrs	r3, r1
 800820e:	40c2      	lsrs	r2, r0
 8008210:	6163      	str	r3, [r4, #20]
 8008212:	9201      	str	r2, [sp, #4]
 8008214:	9b01      	ldr	r3, [sp, #4]
 8008216:	61a3      	str	r3, [r4, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	bf0c      	ite	eq
 800821c:	2201      	moveq	r2, #1
 800821e:	2202      	movne	r2, #2
 8008220:	6122      	str	r2, [r4, #16]
 8008222:	b1a5      	cbz	r5, 800824e <__d2b+0x92>
 8008224:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008228:	4405      	add	r5, r0
 800822a:	603d      	str	r5, [r7, #0]
 800822c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008230:	6030      	str	r0, [r6, #0]
 8008232:	4620      	mov	r0, r4
 8008234:	b003      	add	sp, #12
 8008236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800823a:	6161      	str	r1, [r4, #20]
 800823c:	e7ea      	b.n	8008214 <__d2b+0x58>
 800823e:	a801      	add	r0, sp, #4
 8008240:	f7ff fd59 	bl	8007cf6 <__lo0bits>
 8008244:	9b01      	ldr	r3, [sp, #4]
 8008246:	6163      	str	r3, [r4, #20]
 8008248:	3020      	adds	r0, #32
 800824a:	2201      	movs	r2, #1
 800824c:	e7e8      	b.n	8008220 <__d2b+0x64>
 800824e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008252:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008256:	6038      	str	r0, [r7, #0]
 8008258:	6918      	ldr	r0, [r3, #16]
 800825a:	f7ff fd2d 	bl	8007cb8 <__hi0bits>
 800825e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008262:	e7e5      	b.n	8008230 <__d2b+0x74>
 8008264:	08008f34 	.word	0x08008f34
 8008268:	08008f45 	.word	0x08008f45

0800826c <__ssputs_r>:
 800826c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008270:	688e      	ldr	r6, [r1, #8]
 8008272:	461f      	mov	r7, r3
 8008274:	42be      	cmp	r6, r7
 8008276:	680b      	ldr	r3, [r1, #0]
 8008278:	4682      	mov	sl, r0
 800827a:	460c      	mov	r4, r1
 800827c:	4690      	mov	r8, r2
 800827e:	d82d      	bhi.n	80082dc <__ssputs_r+0x70>
 8008280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008284:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008288:	d026      	beq.n	80082d8 <__ssputs_r+0x6c>
 800828a:	6965      	ldr	r5, [r4, #20]
 800828c:	6909      	ldr	r1, [r1, #16]
 800828e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008292:	eba3 0901 	sub.w	r9, r3, r1
 8008296:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800829a:	1c7b      	adds	r3, r7, #1
 800829c:	444b      	add	r3, r9
 800829e:	106d      	asrs	r5, r5, #1
 80082a0:	429d      	cmp	r5, r3
 80082a2:	bf38      	it	cc
 80082a4:	461d      	movcc	r5, r3
 80082a6:	0553      	lsls	r3, r2, #21
 80082a8:	d527      	bpl.n	80082fa <__ssputs_r+0x8e>
 80082aa:	4629      	mov	r1, r5
 80082ac:	f7ff fbd0 	bl	8007a50 <_malloc_r>
 80082b0:	4606      	mov	r6, r0
 80082b2:	b360      	cbz	r0, 800830e <__ssputs_r+0xa2>
 80082b4:	6921      	ldr	r1, [r4, #16]
 80082b6:	464a      	mov	r2, r9
 80082b8:	f000 fbdc 	bl	8008a74 <memcpy>
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c6:	81a3      	strh	r3, [r4, #12]
 80082c8:	6126      	str	r6, [r4, #16]
 80082ca:	6165      	str	r5, [r4, #20]
 80082cc:	444e      	add	r6, r9
 80082ce:	eba5 0509 	sub.w	r5, r5, r9
 80082d2:	6026      	str	r6, [r4, #0]
 80082d4:	60a5      	str	r5, [r4, #8]
 80082d6:	463e      	mov	r6, r7
 80082d8:	42be      	cmp	r6, r7
 80082da:	d900      	bls.n	80082de <__ssputs_r+0x72>
 80082dc:	463e      	mov	r6, r7
 80082de:	6820      	ldr	r0, [r4, #0]
 80082e0:	4632      	mov	r2, r6
 80082e2:	4641      	mov	r1, r8
 80082e4:	f000 fb9c 	bl	8008a20 <memmove>
 80082e8:	68a3      	ldr	r3, [r4, #8]
 80082ea:	1b9b      	subs	r3, r3, r6
 80082ec:	60a3      	str	r3, [r4, #8]
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	4433      	add	r3, r6
 80082f2:	6023      	str	r3, [r4, #0]
 80082f4:	2000      	movs	r0, #0
 80082f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082fa:	462a      	mov	r2, r5
 80082fc:	f000 fc0c 	bl	8008b18 <_realloc_r>
 8008300:	4606      	mov	r6, r0
 8008302:	2800      	cmp	r0, #0
 8008304:	d1e0      	bne.n	80082c8 <__ssputs_r+0x5c>
 8008306:	6921      	ldr	r1, [r4, #16]
 8008308:	4650      	mov	r0, sl
 800830a:	f7ff fb2d 	bl	8007968 <_free_r>
 800830e:	230c      	movs	r3, #12
 8008310:	f8ca 3000 	str.w	r3, [sl]
 8008314:	89a3      	ldrh	r3, [r4, #12]
 8008316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800831a:	81a3      	strh	r3, [r4, #12]
 800831c:	f04f 30ff 	mov.w	r0, #4294967295
 8008320:	e7e9      	b.n	80082f6 <__ssputs_r+0x8a>
	...

08008324 <_svfiprintf_r>:
 8008324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008328:	4698      	mov	r8, r3
 800832a:	898b      	ldrh	r3, [r1, #12]
 800832c:	061b      	lsls	r3, r3, #24
 800832e:	b09d      	sub	sp, #116	@ 0x74
 8008330:	4607      	mov	r7, r0
 8008332:	460d      	mov	r5, r1
 8008334:	4614      	mov	r4, r2
 8008336:	d510      	bpl.n	800835a <_svfiprintf_r+0x36>
 8008338:	690b      	ldr	r3, [r1, #16]
 800833a:	b973      	cbnz	r3, 800835a <_svfiprintf_r+0x36>
 800833c:	2140      	movs	r1, #64	@ 0x40
 800833e:	f7ff fb87 	bl	8007a50 <_malloc_r>
 8008342:	6028      	str	r0, [r5, #0]
 8008344:	6128      	str	r0, [r5, #16]
 8008346:	b930      	cbnz	r0, 8008356 <_svfiprintf_r+0x32>
 8008348:	230c      	movs	r3, #12
 800834a:	603b      	str	r3, [r7, #0]
 800834c:	f04f 30ff 	mov.w	r0, #4294967295
 8008350:	b01d      	add	sp, #116	@ 0x74
 8008352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008356:	2340      	movs	r3, #64	@ 0x40
 8008358:	616b      	str	r3, [r5, #20]
 800835a:	2300      	movs	r3, #0
 800835c:	9309      	str	r3, [sp, #36]	@ 0x24
 800835e:	2320      	movs	r3, #32
 8008360:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008364:	f8cd 800c 	str.w	r8, [sp, #12]
 8008368:	2330      	movs	r3, #48	@ 0x30
 800836a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008508 <_svfiprintf_r+0x1e4>
 800836e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008372:	f04f 0901 	mov.w	r9, #1
 8008376:	4623      	mov	r3, r4
 8008378:	469a      	mov	sl, r3
 800837a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800837e:	b10a      	cbz	r2, 8008384 <_svfiprintf_r+0x60>
 8008380:	2a25      	cmp	r2, #37	@ 0x25
 8008382:	d1f9      	bne.n	8008378 <_svfiprintf_r+0x54>
 8008384:	ebba 0b04 	subs.w	fp, sl, r4
 8008388:	d00b      	beq.n	80083a2 <_svfiprintf_r+0x7e>
 800838a:	465b      	mov	r3, fp
 800838c:	4622      	mov	r2, r4
 800838e:	4629      	mov	r1, r5
 8008390:	4638      	mov	r0, r7
 8008392:	f7ff ff6b 	bl	800826c <__ssputs_r>
 8008396:	3001      	adds	r0, #1
 8008398:	f000 80a7 	beq.w	80084ea <_svfiprintf_r+0x1c6>
 800839c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800839e:	445a      	add	r2, fp
 80083a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80083a2:	f89a 3000 	ldrb.w	r3, [sl]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 809f 	beq.w	80084ea <_svfiprintf_r+0x1c6>
 80083ac:	2300      	movs	r3, #0
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295
 80083b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b6:	f10a 0a01 	add.w	sl, sl, #1
 80083ba:	9304      	str	r3, [sp, #16]
 80083bc:	9307      	str	r3, [sp, #28]
 80083be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80083c4:	4654      	mov	r4, sl
 80083c6:	2205      	movs	r2, #5
 80083c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083cc:	484e      	ldr	r0, [pc, #312]	@ (8008508 <_svfiprintf_r+0x1e4>)
 80083ce:	f7f7 feff 	bl	80001d0 <memchr>
 80083d2:	9a04      	ldr	r2, [sp, #16]
 80083d4:	b9d8      	cbnz	r0, 800840e <_svfiprintf_r+0xea>
 80083d6:	06d0      	lsls	r0, r2, #27
 80083d8:	bf44      	itt	mi
 80083da:	2320      	movmi	r3, #32
 80083dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083e0:	0711      	lsls	r1, r2, #28
 80083e2:	bf44      	itt	mi
 80083e4:	232b      	movmi	r3, #43	@ 0x2b
 80083e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083ea:	f89a 3000 	ldrb.w	r3, [sl]
 80083ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80083f0:	d015      	beq.n	800841e <_svfiprintf_r+0xfa>
 80083f2:	9a07      	ldr	r2, [sp, #28]
 80083f4:	4654      	mov	r4, sl
 80083f6:	2000      	movs	r0, #0
 80083f8:	f04f 0c0a 	mov.w	ip, #10
 80083fc:	4621      	mov	r1, r4
 80083fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008402:	3b30      	subs	r3, #48	@ 0x30
 8008404:	2b09      	cmp	r3, #9
 8008406:	d94b      	bls.n	80084a0 <_svfiprintf_r+0x17c>
 8008408:	b1b0      	cbz	r0, 8008438 <_svfiprintf_r+0x114>
 800840a:	9207      	str	r2, [sp, #28]
 800840c:	e014      	b.n	8008438 <_svfiprintf_r+0x114>
 800840e:	eba0 0308 	sub.w	r3, r0, r8
 8008412:	fa09 f303 	lsl.w	r3, r9, r3
 8008416:	4313      	orrs	r3, r2
 8008418:	9304      	str	r3, [sp, #16]
 800841a:	46a2      	mov	sl, r4
 800841c:	e7d2      	b.n	80083c4 <_svfiprintf_r+0xa0>
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	1d19      	adds	r1, r3, #4
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	9103      	str	r1, [sp, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	bfbb      	ittet	lt
 800842a:	425b      	neglt	r3, r3
 800842c:	f042 0202 	orrlt.w	r2, r2, #2
 8008430:	9307      	strge	r3, [sp, #28]
 8008432:	9307      	strlt	r3, [sp, #28]
 8008434:	bfb8      	it	lt
 8008436:	9204      	strlt	r2, [sp, #16]
 8008438:	7823      	ldrb	r3, [r4, #0]
 800843a:	2b2e      	cmp	r3, #46	@ 0x2e
 800843c:	d10a      	bne.n	8008454 <_svfiprintf_r+0x130>
 800843e:	7863      	ldrb	r3, [r4, #1]
 8008440:	2b2a      	cmp	r3, #42	@ 0x2a
 8008442:	d132      	bne.n	80084aa <_svfiprintf_r+0x186>
 8008444:	9b03      	ldr	r3, [sp, #12]
 8008446:	1d1a      	adds	r2, r3, #4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	9203      	str	r2, [sp, #12]
 800844c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008450:	3402      	adds	r4, #2
 8008452:	9305      	str	r3, [sp, #20]
 8008454:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008518 <_svfiprintf_r+0x1f4>
 8008458:	7821      	ldrb	r1, [r4, #0]
 800845a:	2203      	movs	r2, #3
 800845c:	4650      	mov	r0, sl
 800845e:	f7f7 feb7 	bl	80001d0 <memchr>
 8008462:	b138      	cbz	r0, 8008474 <_svfiprintf_r+0x150>
 8008464:	9b04      	ldr	r3, [sp, #16]
 8008466:	eba0 000a 	sub.w	r0, r0, sl
 800846a:	2240      	movs	r2, #64	@ 0x40
 800846c:	4082      	lsls	r2, r0
 800846e:	4313      	orrs	r3, r2
 8008470:	3401      	adds	r4, #1
 8008472:	9304      	str	r3, [sp, #16]
 8008474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008478:	4824      	ldr	r0, [pc, #144]	@ (800850c <_svfiprintf_r+0x1e8>)
 800847a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800847e:	2206      	movs	r2, #6
 8008480:	f7f7 fea6 	bl	80001d0 <memchr>
 8008484:	2800      	cmp	r0, #0
 8008486:	d036      	beq.n	80084f6 <_svfiprintf_r+0x1d2>
 8008488:	4b21      	ldr	r3, [pc, #132]	@ (8008510 <_svfiprintf_r+0x1ec>)
 800848a:	bb1b      	cbnz	r3, 80084d4 <_svfiprintf_r+0x1b0>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	3307      	adds	r3, #7
 8008490:	f023 0307 	bic.w	r3, r3, #7
 8008494:	3308      	adds	r3, #8
 8008496:	9303      	str	r3, [sp, #12]
 8008498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800849a:	4433      	add	r3, r6
 800849c:	9309      	str	r3, [sp, #36]	@ 0x24
 800849e:	e76a      	b.n	8008376 <_svfiprintf_r+0x52>
 80084a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a4:	460c      	mov	r4, r1
 80084a6:	2001      	movs	r0, #1
 80084a8:	e7a8      	b.n	80083fc <_svfiprintf_r+0xd8>
 80084aa:	2300      	movs	r3, #0
 80084ac:	3401      	adds	r4, #1
 80084ae:	9305      	str	r3, [sp, #20]
 80084b0:	4619      	mov	r1, r3
 80084b2:	f04f 0c0a 	mov.w	ip, #10
 80084b6:	4620      	mov	r0, r4
 80084b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084bc:	3a30      	subs	r2, #48	@ 0x30
 80084be:	2a09      	cmp	r2, #9
 80084c0:	d903      	bls.n	80084ca <_svfiprintf_r+0x1a6>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0c6      	beq.n	8008454 <_svfiprintf_r+0x130>
 80084c6:	9105      	str	r1, [sp, #20]
 80084c8:	e7c4      	b.n	8008454 <_svfiprintf_r+0x130>
 80084ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ce:	4604      	mov	r4, r0
 80084d0:	2301      	movs	r3, #1
 80084d2:	e7f0      	b.n	80084b6 <_svfiprintf_r+0x192>
 80084d4:	ab03      	add	r3, sp, #12
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	462a      	mov	r2, r5
 80084da:	4b0e      	ldr	r3, [pc, #56]	@ (8008514 <_svfiprintf_r+0x1f0>)
 80084dc:	a904      	add	r1, sp, #16
 80084de:	4638      	mov	r0, r7
 80084e0:	f7fd fe6c 	bl	80061bc <_printf_float>
 80084e4:	1c42      	adds	r2, r0, #1
 80084e6:	4606      	mov	r6, r0
 80084e8:	d1d6      	bne.n	8008498 <_svfiprintf_r+0x174>
 80084ea:	89ab      	ldrh	r3, [r5, #12]
 80084ec:	065b      	lsls	r3, r3, #25
 80084ee:	f53f af2d 	bmi.w	800834c <_svfiprintf_r+0x28>
 80084f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084f4:	e72c      	b.n	8008350 <_svfiprintf_r+0x2c>
 80084f6:	ab03      	add	r3, sp, #12
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	462a      	mov	r2, r5
 80084fc:	4b05      	ldr	r3, [pc, #20]	@ (8008514 <_svfiprintf_r+0x1f0>)
 80084fe:	a904      	add	r1, sp, #16
 8008500:	4638      	mov	r0, r7
 8008502:	f7fe f8f3 	bl	80066ec <_printf_i>
 8008506:	e7ed      	b.n	80084e4 <_svfiprintf_r+0x1c0>
 8008508:	080090a0 	.word	0x080090a0
 800850c:	080090aa 	.word	0x080090aa
 8008510:	080061bd 	.word	0x080061bd
 8008514:	0800826d 	.word	0x0800826d
 8008518:	080090a6 	.word	0x080090a6

0800851c <__sfputc_r>:
 800851c:	6893      	ldr	r3, [r2, #8]
 800851e:	3b01      	subs	r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	b410      	push	{r4}
 8008524:	6093      	str	r3, [r2, #8]
 8008526:	da08      	bge.n	800853a <__sfputc_r+0x1e>
 8008528:	6994      	ldr	r4, [r2, #24]
 800852a:	42a3      	cmp	r3, r4
 800852c:	db01      	blt.n	8008532 <__sfputc_r+0x16>
 800852e:	290a      	cmp	r1, #10
 8008530:	d103      	bne.n	800853a <__sfputc_r+0x1e>
 8008532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008536:	f000 b9df 	b.w	80088f8 <__swbuf_r>
 800853a:	6813      	ldr	r3, [r2, #0]
 800853c:	1c58      	adds	r0, r3, #1
 800853e:	6010      	str	r0, [r2, #0]
 8008540:	7019      	strb	r1, [r3, #0]
 8008542:	4608      	mov	r0, r1
 8008544:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008548:	4770      	bx	lr

0800854a <__sfputs_r>:
 800854a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854c:	4606      	mov	r6, r0
 800854e:	460f      	mov	r7, r1
 8008550:	4614      	mov	r4, r2
 8008552:	18d5      	adds	r5, r2, r3
 8008554:	42ac      	cmp	r4, r5
 8008556:	d101      	bne.n	800855c <__sfputs_r+0x12>
 8008558:	2000      	movs	r0, #0
 800855a:	e007      	b.n	800856c <__sfputs_r+0x22>
 800855c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008560:	463a      	mov	r2, r7
 8008562:	4630      	mov	r0, r6
 8008564:	f7ff ffda 	bl	800851c <__sfputc_r>
 8008568:	1c43      	adds	r3, r0, #1
 800856a:	d1f3      	bne.n	8008554 <__sfputs_r+0xa>
 800856c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008570 <_vfiprintf_r>:
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	460d      	mov	r5, r1
 8008576:	b09d      	sub	sp, #116	@ 0x74
 8008578:	4614      	mov	r4, r2
 800857a:	4698      	mov	r8, r3
 800857c:	4606      	mov	r6, r0
 800857e:	b118      	cbz	r0, 8008588 <_vfiprintf_r+0x18>
 8008580:	6a03      	ldr	r3, [r0, #32]
 8008582:	b90b      	cbnz	r3, 8008588 <_vfiprintf_r+0x18>
 8008584:	f7fe fa5e 	bl	8006a44 <__sinit>
 8008588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800858a:	07d9      	lsls	r1, r3, #31
 800858c:	d405      	bmi.n	800859a <_vfiprintf_r+0x2a>
 800858e:	89ab      	ldrh	r3, [r5, #12]
 8008590:	059a      	lsls	r2, r3, #22
 8008592:	d402      	bmi.n	800859a <_vfiprintf_r+0x2a>
 8008594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008596:	f7fe fb96 	bl	8006cc6 <__retarget_lock_acquire_recursive>
 800859a:	89ab      	ldrh	r3, [r5, #12]
 800859c:	071b      	lsls	r3, r3, #28
 800859e:	d501      	bpl.n	80085a4 <_vfiprintf_r+0x34>
 80085a0:	692b      	ldr	r3, [r5, #16]
 80085a2:	b99b      	cbnz	r3, 80085cc <_vfiprintf_r+0x5c>
 80085a4:	4629      	mov	r1, r5
 80085a6:	4630      	mov	r0, r6
 80085a8:	f000 f9e4 	bl	8008974 <__swsetup_r>
 80085ac:	b170      	cbz	r0, 80085cc <_vfiprintf_r+0x5c>
 80085ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085b0:	07dc      	lsls	r4, r3, #31
 80085b2:	d504      	bpl.n	80085be <_vfiprintf_r+0x4e>
 80085b4:	f04f 30ff 	mov.w	r0, #4294967295
 80085b8:	b01d      	add	sp, #116	@ 0x74
 80085ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085be:	89ab      	ldrh	r3, [r5, #12]
 80085c0:	0598      	lsls	r0, r3, #22
 80085c2:	d4f7      	bmi.n	80085b4 <_vfiprintf_r+0x44>
 80085c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085c6:	f7fe fb7f 	bl	8006cc8 <__retarget_lock_release_recursive>
 80085ca:	e7f3      	b.n	80085b4 <_vfiprintf_r+0x44>
 80085cc:	2300      	movs	r3, #0
 80085ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80085d0:	2320      	movs	r3, #32
 80085d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80085da:	2330      	movs	r3, #48	@ 0x30
 80085dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800878c <_vfiprintf_r+0x21c>
 80085e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085e4:	f04f 0901 	mov.w	r9, #1
 80085e8:	4623      	mov	r3, r4
 80085ea:	469a      	mov	sl, r3
 80085ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085f0:	b10a      	cbz	r2, 80085f6 <_vfiprintf_r+0x86>
 80085f2:	2a25      	cmp	r2, #37	@ 0x25
 80085f4:	d1f9      	bne.n	80085ea <_vfiprintf_r+0x7a>
 80085f6:	ebba 0b04 	subs.w	fp, sl, r4
 80085fa:	d00b      	beq.n	8008614 <_vfiprintf_r+0xa4>
 80085fc:	465b      	mov	r3, fp
 80085fe:	4622      	mov	r2, r4
 8008600:	4629      	mov	r1, r5
 8008602:	4630      	mov	r0, r6
 8008604:	f7ff ffa1 	bl	800854a <__sfputs_r>
 8008608:	3001      	adds	r0, #1
 800860a:	f000 80a7 	beq.w	800875c <_vfiprintf_r+0x1ec>
 800860e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008610:	445a      	add	r2, fp
 8008612:	9209      	str	r2, [sp, #36]	@ 0x24
 8008614:	f89a 3000 	ldrb.w	r3, [sl]
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 809f 	beq.w	800875c <_vfiprintf_r+0x1ec>
 800861e:	2300      	movs	r3, #0
 8008620:	f04f 32ff 	mov.w	r2, #4294967295
 8008624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008628:	f10a 0a01 	add.w	sl, sl, #1
 800862c:	9304      	str	r3, [sp, #16]
 800862e:	9307      	str	r3, [sp, #28]
 8008630:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008634:	931a      	str	r3, [sp, #104]	@ 0x68
 8008636:	4654      	mov	r4, sl
 8008638:	2205      	movs	r2, #5
 800863a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800863e:	4853      	ldr	r0, [pc, #332]	@ (800878c <_vfiprintf_r+0x21c>)
 8008640:	f7f7 fdc6 	bl	80001d0 <memchr>
 8008644:	9a04      	ldr	r2, [sp, #16]
 8008646:	b9d8      	cbnz	r0, 8008680 <_vfiprintf_r+0x110>
 8008648:	06d1      	lsls	r1, r2, #27
 800864a:	bf44      	itt	mi
 800864c:	2320      	movmi	r3, #32
 800864e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008652:	0713      	lsls	r3, r2, #28
 8008654:	bf44      	itt	mi
 8008656:	232b      	movmi	r3, #43	@ 0x2b
 8008658:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800865c:	f89a 3000 	ldrb.w	r3, [sl]
 8008660:	2b2a      	cmp	r3, #42	@ 0x2a
 8008662:	d015      	beq.n	8008690 <_vfiprintf_r+0x120>
 8008664:	9a07      	ldr	r2, [sp, #28]
 8008666:	4654      	mov	r4, sl
 8008668:	2000      	movs	r0, #0
 800866a:	f04f 0c0a 	mov.w	ip, #10
 800866e:	4621      	mov	r1, r4
 8008670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008674:	3b30      	subs	r3, #48	@ 0x30
 8008676:	2b09      	cmp	r3, #9
 8008678:	d94b      	bls.n	8008712 <_vfiprintf_r+0x1a2>
 800867a:	b1b0      	cbz	r0, 80086aa <_vfiprintf_r+0x13a>
 800867c:	9207      	str	r2, [sp, #28]
 800867e:	e014      	b.n	80086aa <_vfiprintf_r+0x13a>
 8008680:	eba0 0308 	sub.w	r3, r0, r8
 8008684:	fa09 f303 	lsl.w	r3, r9, r3
 8008688:	4313      	orrs	r3, r2
 800868a:	9304      	str	r3, [sp, #16]
 800868c:	46a2      	mov	sl, r4
 800868e:	e7d2      	b.n	8008636 <_vfiprintf_r+0xc6>
 8008690:	9b03      	ldr	r3, [sp, #12]
 8008692:	1d19      	adds	r1, r3, #4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	9103      	str	r1, [sp, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	bfbb      	ittet	lt
 800869c:	425b      	neglt	r3, r3
 800869e:	f042 0202 	orrlt.w	r2, r2, #2
 80086a2:	9307      	strge	r3, [sp, #28]
 80086a4:	9307      	strlt	r3, [sp, #28]
 80086a6:	bfb8      	it	lt
 80086a8:	9204      	strlt	r2, [sp, #16]
 80086aa:	7823      	ldrb	r3, [r4, #0]
 80086ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80086ae:	d10a      	bne.n	80086c6 <_vfiprintf_r+0x156>
 80086b0:	7863      	ldrb	r3, [r4, #1]
 80086b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80086b4:	d132      	bne.n	800871c <_vfiprintf_r+0x1ac>
 80086b6:	9b03      	ldr	r3, [sp, #12]
 80086b8:	1d1a      	adds	r2, r3, #4
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	9203      	str	r2, [sp, #12]
 80086be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086c2:	3402      	adds	r4, #2
 80086c4:	9305      	str	r3, [sp, #20]
 80086c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800879c <_vfiprintf_r+0x22c>
 80086ca:	7821      	ldrb	r1, [r4, #0]
 80086cc:	2203      	movs	r2, #3
 80086ce:	4650      	mov	r0, sl
 80086d0:	f7f7 fd7e 	bl	80001d0 <memchr>
 80086d4:	b138      	cbz	r0, 80086e6 <_vfiprintf_r+0x176>
 80086d6:	9b04      	ldr	r3, [sp, #16]
 80086d8:	eba0 000a 	sub.w	r0, r0, sl
 80086dc:	2240      	movs	r2, #64	@ 0x40
 80086de:	4082      	lsls	r2, r0
 80086e0:	4313      	orrs	r3, r2
 80086e2:	3401      	adds	r4, #1
 80086e4:	9304      	str	r3, [sp, #16]
 80086e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ea:	4829      	ldr	r0, [pc, #164]	@ (8008790 <_vfiprintf_r+0x220>)
 80086ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086f0:	2206      	movs	r2, #6
 80086f2:	f7f7 fd6d 	bl	80001d0 <memchr>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d03f      	beq.n	800877a <_vfiprintf_r+0x20a>
 80086fa:	4b26      	ldr	r3, [pc, #152]	@ (8008794 <_vfiprintf_r+0x224>)
 80086fc:	bb1b      	cbnz	r3, 8008746 <_vfiprintf_r+0x1d6>
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	3307      	adds	r3, #7
 8008702:	f023 0307 	bic.w	r3, r3, #7
 8008706:	3308      	adds	r3, #8
 8008708:	9303      	str	r3, [sp, #12]
 800870a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800870c:	443b      	add	r3, r7
 800870e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008710:	e76a      	b.n	80085e8 <_vfiprintf_r+0x78>
 8008712:	fb0c 3202 	mla	r2, ip, r2, r3
 8008716:	460c      	mov	r4, r1
 8008718:	2001      	movs	r0, #1
 800871a:	e7a8      	b.n	800866e <_vfiprintf_r+0xfe>
 800871c:	2300      	movs	r3, #0
 800871e:	3401      	adds	r4, #1
 8008720:	9305      	str	r3, [sp, #20]
 8008722:	4619      	mov	r1, r3
 8008724:	f04f 0c0a 	mov.w	ip, #10
 8008728:	4620      	mov	r0, r4
 800872a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800872e:	3a30      	subs	r2, #48	@ 0x30
 8008730:	2a09      	cmp	r2, #9
 8008732:	d903      	bls.n	800873c <_vfiprintf_r+0x1cc>
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0c6      	beq.n	80086c6 <_vfiprintf_r+0x156>
 8008738:	9105      	str	r1, [sp, #20]
 800873a:	e7c4      	b.n	80086c6 <_vfiprintf_r+0x156>
 800873c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008740:	4604      	mov	r4, r0
 8008742:	2301      	movs	r3, #1
 8008744:	e7f0      	b.n	8008728 <_vfiprintf_r+0x1b8>
 8008746:	ab03      	add	r3, sp, #12
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	462a      	mov	r2, r5
 800874c:	4b12      	ldr	r3, [pc, #72]	@ (8008798 <_vfiprintf_r+0x228>)
 800874e:	a904      	add	r1, sp, #16
 8008750:	4630      	mov	r0, r6
 8008752:	f7fd fd33 	bl	80061bc <_printf_float>
 8008756:	4607      	mov	r7, r0
 8008758:	1c78      	adds	r0, r7, #1
 800875a:	d1d6      	bne.n	800870a <_vfiprintf_r+0x19a>
 800875c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800875e:	07d9      	lsls	r1, r3, #31
 8008760:	d405      	bmi.n	800876e <_vfiprintf_r+0x1fe>
 8008762:	89ab      	ldrh	r3, [r5, #12]
 8008764:	059a      	lsls	r2, r3, #22
 8008766:	d402      	bmi.n	800876e <_vfiprintf_r+0x1fe>
 8008768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800876a:	f7fe faad 	bl	8006cc8 <__retarget_lock_release_recursive>
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	065b      	lsls	r3, r3, #25
 8008772:	f53f af1f 	bmi.w	80085b4 <_vfiprintf_r+0x44>
 8008776:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008778:	e71e      	b.n	80085b8 <_vfiprintf_r+0x48>
 800877a:	ab03      	add	r3, sp, #12
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	462a      	mov	r2, r5
 8008780:	4b05      	ldr	r3, [pc, #20]	@ (8008798 <_vfiprintf_r+0x228>)
 8008782:	a904      	add	r1, sp, #16
 8008784:	4630      	mov	r0, r6
 8008786:	f7fd ffb1 	bl	80066ec <_printf_i>
 800878a:	e7e4      	b.n	8008756 <_vfiprintf_r+0x1e6>
 800878c:	080090a0 	.word	0x080090a0
 8008790:	080090aa 	.word	0x080090aa
 8008794:	080061bd 	.word	0x080061bd
 8008798:	0800854b 	.word	0x0800854b
 800879c:	080090a6 	.word	0x080090a6

080087a0 <__sflush_r>:
 80087a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a8:	0716      	lsls	r6, r2, #28
 80087aa:	4605      	mov	r5, r0
 80087ac:	460c      	mov	r4, r1
 80087ae:	d454      	bmi.n	800885a <__sflush_r+0xba>
 80087b0:	684b      	ldr	r3, [r1, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	dc02      	bgt.n	80087bc <__sflush_r+0x1c>
 80087b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	dd48      	ble.n	800884e <__sflush_r+0xae>
 80087bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087be:	2e00      	cmp	r6, #0
 80087c0:	d045      	beq.n	800884e <__sflush_r+0xae>
 80087c2:	2300      	movs	r3, #0
 80087c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087c8:	682f      	ldr	r7, [r5, #0]
 80087ca:	6a21      	ldr	r1, [r4, #32]
 80087cc:	602b      	str	r3, [r5, #0]
 80087ce:	d030      	beq.n	8008832 <__sflush_r+0x92>
 80087d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	0759      	lsls	r1, r3, #29
 80087d6:	d505      	bpl.n	80087e4 <__sflush_r+0x44>
 80087d8:	6863      	ldr	r3, [r4, #4]
 80087da:	1ad2      	subs	r2, r2, r3
 80087dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087de:	b10b      	cbz	r3, 80087e4 <__sflush_r+0x44>
 80087e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087e2:	1ad2      	subs	r2, r2, r3
 80087e4:	2300      	movs	r3, #0
 80087e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087e8:	6a21      	ldr	r1, [r4, #32]
 80087ea:	4628      	mov	r0, r5
 80087ec:	47b0      	blx	r6
 80087ee:	1c43      	adds	r3, r0, #1
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	d106      	bne.n	8008802 <__sflush_r+0x62>
 80087f4:	6829      	ldr	r1, [r5, #0]
 80087f6:	291d      	cmp	r1, #29
 80087f8:	d82b      	bhi.n	8008852 <__sflush_r+0xb2>
 80087fa:	4a2a      	ldr	r2, [pc, #168]	@ (80088a4 <__sflush_r+0x104>)
 80087fc:	410a      	asrs	r2, r1
 80087fe:	07d6      	lsls	r6, r2, #31
 8008800:	d427      	bmi.n	8008852 <__sflush_r+0xb2>
 8008802:	2200      	movs	r2, #0
 8008804:	6062      	str	r2, [r4, #4]
 8008806:	04d9      	lsls	r1, r3, #19
 8008808:	6922      	ldr	r2, [r4, #16]
 800880a:	6022      	str	r2, [r4, #0]
 800880c:	d504      	bpl.n	8008818 <__sflush_r+0x78>
 800880e:	1c42      	adds	r2, r0, #1
 8008810:	d101      	bne.n	8008816 <__sflush_r+0x76>
 8008812:	682b      	ldr	r3, [r5, #0]
 8008814:	b903      	cbnz	r3, 8008818 <__sflush_r+0x78>
 8008816:	6560      	str	r0, [r4, #84]	@ 0x54
 8008818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800881a:	602f      	str	r7, [r5, #0]
 800881c:	b1b9      	cbz	r1, 800884e <__sflush_r+0xae>
 800881e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008822:	4299      	cmp	r1, r3
 8008824:	d002      	beq.n	800882c <__sflush_r+0x8c>
 8008826:	4628      	mov	r0, r5
 8008828:	f7ff f89e 	bl	8007968 <_free_r>
 800882c:	2300      	movs	r3, #0
 800882e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008830:	e00d      	b.n	800884e <__sflush_r+0xae>
 8008832:	2301      	movs	r3, #1
 8008834:	4628      	mov	r0, r5
 8008836:	47b0      	blx	r6
 8008838:	4602      	mov	r2, r0
 800883a:	1c50      	adds	r0, r2, #1
 800883c:	d1c9      	bne.n	80087d2 <__sflush_r+0x32>
 800883e:	682b      	ldr	r3, [r5, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0c6      	beq.n	80087d2 <__sflush_r+0x32>
 8008844:	2b1d      	cmp	r3, #29
 8008846:	d001      	beq.n	800884c <__sflush_r+0xac>
 8008848:	2b16      	cmp	r3, #22
 800884a:	d11e      	bne.n	800888a <__sflush_r+0xea>
 800884c:	602f      	str	r7, [r5, #0]
 800884e:	2000      	movs	r0, #0
 8008850:	e022      	b.n	8008898 <__sflush_r+0xf8>
 8008852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008856:	b21b      	sxth	r3, r3
 8008858:	e01b      	b.n	8008892 <__sflush_r+0xf2>
 800885a:	690f      	ldr	r7, [r1, #16]
 800885c:	2f00      	cmp	r7, #0
 800885e:	d0f6      	beq.n	800884e <__sflush_r+0xae>
 8008860:	0793      	lsls	r3, r2, #30
 8008862:	680e      	ldr	r6, [r1, #0]
 8008864:	bf08      	it	eq
 8008866:	694b      	ldreq	r3, [r1, #20]
 8008868:	600f      	str	r7, [r1, #0]
 800886a:	bf18      	it	ne
 800886c:	2300      	movne	r3, #0
 800886e:	eba6 0807 	sub.w	r8, r6, r7
 8008872:	608b      	str	r3, [r1, #8]
 8008874:	f1b8 0f00 	cmp.w	r8, #0
 8008878:	dde9      	ble.n	800884e <__sflush_r+0xae>
 800887a:	6a21      	ldr	r1, [r4, #32]
 800887c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800887e:	4643      	mov	r3, r8
 8008880:	463a      	mov	r2, r7
 8008882:	4628      	mov	r0, r5
 8008884:	47b0      	blx	r6
 8008886:	2800      	cmp	r0, #0
 8008888:	dc08      	bgt.n	800889c <__sflush_r+0xfc>
 800888a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008892:	81a3      	strh	r3, [r4, #12]
 8008894:	f04f 30ff 	mov.w	r0, #4294967295
 8008898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800889c:	4407      	add	r7, r0
 800889e:	eba8 0800 	sub.w	r8, r8, r0
 80088a2:	e7e7      	b.n	8008874 <__sflush_r+0xd4>
 80088a4:	dfbffffe 	.word	0xdfbffffe

080088a8 <_fflush_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	690b      	ldr	r3, [r1, #16]
 80088ac:	4605      	mov	r5, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	b913      	cbnz	r3, 80088b8 <_fflush_r+0x10>
 80088b2:	2500      	movs	r5, #0
 80088b4:	4628      	mov	r0, r5
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	b118      	cbz	r0, 80088c2 <_fflush_r+0x1a>
 80088ba:	6a03      	ldr	r3, [r0, #32]
 80088bc:	b90b      	cbnz	r3, 80088c2 <_fflush_r+0x1a>
 80088be:	f7fe f8c1 	bl	8006a44 <__sinit>
 80088c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0f3      	beq.n	80088b2 <_fflush_r+0xa>
 80088ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088cc:	07d0      	lsls	r0, r2, #31
 80088ce:	d404      	bmi.n	80088da <_fflush_r+0x32>
 80088d0:	0599      	lsls	r1, r3, #22
 80088d2:	d402      	bmi.n	80088da <_fflush_r+0x32>
 80088d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088d6:	f7fe f9f6 	bl	8006cc6 <__retarget_lock_acquire_recursive>
 80088da:	4628      	mov	r0, r5
 80088dc:	4621      	mov	r1, r4
 80088de:	f7ff ff5f 	bl	80087a0 <__sflush_r>
 80088e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088e4:	07da      	lsls	r2, r3, #31
 80088e6:	4605      	mov	r5, r0
 80088e8:	d4e4      	bmi.n	80088b4 <_fflush_r+0xc>
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	059b      	lsls	r3, r3, #22
 80088ee:	d4e1      	bmi.n	80088b4 <_fflush_r+0xc>
 80088f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088f2:	f7fe f9e9 	bl	8006cc8 <__retarget_lock_release_recursive>
 80088f6:	e7dd      	b.n	80088b4 <_fflush_r+0xc>

080088f8 <__swbuf_r>:
 80088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fa:	460e      	mov	r6, r1
 80088fc:	4614      	mov	r4, r2
 80088fe:	4605      	mov	r5, r0
 8008900:	b118      	cbz	r0, 800890a <__swbuf_r+0x12>
 8008902:	6a03      	ldr	r3, [r0, #32]
 8008904:	b90b      	cbnz	r3, 800890a <__swbuf_r+0x12>
 8008906:	f7fe f89d 	bl	8006a44 <__sinit>
 800890a:	69a3      	ldr	r3, [r4, #24]
 800890c:	60a3      	str	r3, [r4, #8]
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	071a      	lsls	r2, r3, #28
 8008912:	d501      	bpl.n	8008918 <__swbuf_r+0x20>
 8008914:	6923      	ldr	r3, [r4, #16]
 8008916:	b943      	cbnz	r3, 800892a <__swbuf_r+0x32>
 8008918:	4621      	mov	r1, r4
 800891a:	4628      	mov	r0, r5
 800891c:	f000 f82a 	bl	8008974 <__swsetup_r>
 8008920:	b118      	cbz	r0, 800892a <__swbuf_r+0x32>
 8008922:	f04f 37ff 	mov.w	r7, #4294967295
 8008926:	4638      	mov	r0, r7
 8008928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	6922      	ldr	r2, [r4, #16]
 800892e:	1a98      	subs	r0, r3, r2
 8008930:	6963      	ldr	r3, [r4, #20]
 8008932:	b2f6      	uxtb	r6, r6
 8008934:	4283      	cmp	r3, r0
 8008936:	4637      	mov	r7, r6
 8008938:	dc05      	bgt.n	8008946 <__swbuf_r+0x4e>
 800893a:	4621      	mov	r1, r4
 800893c:	4628      	mov	r0, r5
 800893e:	f7ff ffb3 	bl	80088a8 <_fflush_r>
 8008942:	2800      	cmp	r0, #0
 8008944:	d1ed      	bne.n	8008922 <__swbuf_r+0x2a>
 8008946:	68a3      	ldr	r3, [r4, #8]
 8008948:	3b01      	subs	r3, #1
 800894a:	60a3      	str	r3, [r4, #8]
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	1c5a      	adds	r2, r3, #1
 8008950:	6022      	str	r2, [r4, #0]
 8008952:	701e      	strb	r6, [r3, #0]
 8008954:	6962      	ldr	r2, [r4, #20]
 8008956:	1c43      	adds	r3, r0, #1
 8008958:	429a      	cmp	r2, r3
 800895a:	d004      	beq.n	8008966 <__swbuf_r+0x6e>
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	07db      	lsls	r3, r3, #31
 8008960:	d5e1      	bpl.n	8008926 <__swbuf_r+0x2e>
 8008962:	2e0a      	cmp	r6, #10
 8008964:	d1df      	bne.n	8008926 <__swbuf_r+0x2e>
 8008966:	4621      	mov	r1, r4
 8008968:	4628      	mov	r0, r5
 800896a:	f7ff ff9d 	bl	80088a8 <_fflush_r>
 800896e:	2800      	cmp	r0, #0
 8008970:	d0d9      	beq.n	8008926 <__swbuf_r+0x2e>
 8008972:	e7d6      	b.n	8008922 <__swbuf_r+0x2a>

08008974 <__swsetup_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4b29      	ldr	r3, [pc, #164]	@ (8008a1c <__swsetup_r+0xa8>)
 8008978:	4605      	mov	r5, r0
 800897a:	6818      	ldr	r0, [r3, #0]
 800897c:	460c      	mov	r4, r1
 800897e:	b118      	cbz	r0, 8008988 <__swsetup_r+0x14>
 8008980:	6a03      	ldr	r3, [r0, #32]
 8008982:	b90b      	cbnz	r3, 8008988 <__swsetup_r+0x14>
 8008984:	f7fe f85e 	bl	8006a44 <__sinit>
 8008988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898c:	0719      	lsls	r1, r3, #28
 800898e:	d422      	bmi.n	80089d6 <__swsetup_r+0x62>
 8008990:	06da      	lsls	r2, r3, #27
 8008992:	d407      	bmi.n	80089a4 <__swsetup_r+0x30>
 8008994:	2209      	movs	r2, #9
 8008996:	602a      	str	r2, [r5, #0]
 8008998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800899c:	81a3      	strh	r3, [r4, #12]
 800899e:	f04f 30ff 	mov.w	r0, #4294967295
 80089a2:	e033      	b.n	8008a0c <__swsetup_r+0x98>
 80089a4:	0758      	lsls	r0, r3, #29
 80089a6:	d512      	bpl.n	80089ce <__swsetup_r+0x5a>
 80089a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089aa:	b141      	cbz	r1, 80089be <__swsetup_r+0x4a>
 80089ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089b0:	4299      	cmp	r1, r3
 80089b2:	d002      	beq.n	80089ba <__swsetup_r+0x46>
 80089b4:	4628      	mov	r0, r5
 80089b6:	f7fe ffd7 	bl	8007968 <_free_r>
 80089ba:	2300      	movs	r3, #0
 80089bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	2300      	movs	r3, #0
 80089c8:	6063      	str	r3, [r4, #4]
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	f043 0308 	orr.w	r3, r3, #8
 80089d4:	81a3      	strh	r3, [r4, #12]
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	b94b      	cbnz	r3, 80089ee <__swsetup_r+0x7a>
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089e4:	d003      	beq.n	80089ee <__swsetup_r+0x7a>
 80089e6:	4621      	mov	r1, r4
 80089e8:	4628      	mov	r0, r5
 80089ea:	f000 f909 	bl	8008c00 <__smakebuf_r>
 80089ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089f2:	f013 0201 	ands.w	r2, r3, #1
 80089f6:	d00a      	beq.n	8008a0e <__swsetup_r+0x9a>
 80089f8:	2200      	movs	r2, #0
 80089fa:	60a2      	str	r2, [r4, #8]
 80089fc:	6962      	ldr	r2, [r4, #20]
 80089fe:	4252      	negs	r2, r2
 8008a00:	61a2      	str	r2, [r4, #24]
 8008a02:	6922      	ldr	r2, [r4, #16]
 8008a04:	b942      	cbnz	r2, 8008a18 <__swsetup_r+0xa4>
 8008a06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a0a:	d1c5      	bne.n	8008998 <__swsetup_r+0x24>
 8008a0c:	bd38      	pop	{r3, r4, r5, pc}
 8008a0e:	0799      	lsls	r1, r3, #30
 8008a10:	bf58      	it	pl
 8008a12:	6962      	ldrpl	r2, [r4, #20]
 8008a14:	60a2      	str	r2, [r4, #8]
 8008a16:	e7f4      	b.n	8008a02 <__swsetup_r+0x8e>
 8008a18:	2000      	movs	r0, #0
 8008a1a:	e7f7      	b.n	8008a0c <__swsetup_r+0x98>
 8008a1c:	20000018 	.word	0x20000018

08008a20 <memmove>:
 8008a20:	4288      	cmp	r0, r1
 8008a22:	b510      	push	{r4, lr}
 8008a24:	eb01 0402 	add.w	r4, r1, r2
 8008a28:	d902      	bls.n	8008a30 <memmove+0x10>
 8008a2a:	4284      	cmp	r4, r0
 8008a2c:	4623      	mov	r3, r4
 8008a2e:	d807      	bhi.n	8008a40 <memmove+0x20>
 8008a30:	1e43      	subs	r3, r0, #1
 8008a32:	42a1      	cmp	r1, r4
 8008a34:	d008      	beq.n	8008a48 <memmove+0x28>
 8008a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a3e:	e7f8      	b.n	8008a32 <memmove+0x12>
 8008a40:	4402      	add	r2, r0
 8008a42:	4601      	mov	r1, r0
 8008a44:	428a      	cmp	r2, r1
 8008a46:	d100      	bne.n	8008a4a <memmove+0x2a>
 8008a48:	bd10      	pop	{r4, pc}
 8008a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a52:	e7f7      	b.n	8008a44 <memmove+0x24>

08008a54 <_sbrk_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4d06      	ldr	r5, [pc, #24]	@ (8008a70 <_sbrk_r+0x1c>)
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	602b      	str	r3, [r5, #0]
 8008a60:	f7f9 fbf2 	bl	8002248 <_sbrk>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_sbrk_r+0x1a>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_sbrk_r+0x1a>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	200006b8 	.word	0x200006b8

08008a74 <memcpy>:
 8008a74:	440a      	add	r2, r1
 8008a76:	4291      	cmp	r1, r2
 8008a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a7c:	d100      	bne.n	8008a80 <memcpy+0xc>
 8008a7e:	4770      	bx	lr
 8008a80:	b510      	push	{r4, lr}
 8008a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a8a:	4291      	cmp	r1, r2
 8008a8c:	d1f9      	bne.n	8008a82 <memcpy+0xe>
 8008a8e:	bd10      	pop	{r4, pc}

08008a90 <__assert_func>:
 8008a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a92:	4614      	mov	r4, r2
 8008a94:	461a      	mov	r2, r3
 8008a96:	4b09      	ldr	r3, [pc, #36]	@ (8008abc <__assert_func+0x2c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	68d8      	ldr	r0, [r3, #12]
 8008a9e:	b954      	cbnz	r4, 8008ab6 <__assert_func+0x26>
 8008aa0:	4b07      	ldr	r3, [pc, #28]	@ (8008ac0 <__assert_func+0x30>)
 8008aa2:	461c      	mov	r4, r3
 8008aa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008aa8:	9100      	str	r1, [sp, #0]
 8008aaa:	462b      	mov	r3, r5
 8008aac:	4905      	ldr	r1, [pc, #20]	@ (8008ac4 <__assert_func+0x34>)
 8008aae:	f000 f86f 	bl	8008b90 <fiprintf>
 8008ab2:	f000 f903 	bl	8008cbc <abort>
 8008ab6:	4b04      	ldr	r3, [pc, #16]	@ (8008ac8 <__assert_func+0x38>)
 8008ab8:	e7f4      	b.n	8008aa4 <__assert_func+0x14>
 8008aba:	bf00      	nop
 8008abc:	20000018 	.word	0x20000018
 8008ac0:	080090f6 	.word	0x080090f6
 8008ac4:	080090c8 	.word	0x080090c8
 8008ac8:	080090bb 	.word	0x080090bb

08008acc <_calloc_r>:
 8008acc:	b570      	push	{r4, r5, r6, lr}
 8008ace:	fba1 5402 	umull	r5, r4, r1, r2
 8008ad2:	b93c      	cbnz	r4, 8008ae4 <_calloc_r+0x18>
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	f7fe ffbb 	bl	8007a50 <_malloc_r>
 8008ada:	4606      	mov	r6, r0
 8008adc:	b928      	cbnz	r0, 8008aea <_calloc_r+0x1e>
 8008ade:	2600      	movs	r6, #0
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	bd70      	pop	{r4, r5, r6, pc}
 8008ae4:	220c      	movs	r2, #12
 8008ae6:	6002      	str	r2, [r0, #0]
 8008ae8:	e7f9      	b.n	8008ade <_calloc_r+0x12>
 8008aea:	462a      	mov	r2, r5
 8008aec:	4621      	mov	r1, r4
 8008aee:	f7fe f86d 	bl	8006bcc <memset>
 8008af2:	e7f5      	b.n	8008ae0 <_calloc_r+0x14>

08008af4 <__ascii_mbtowc>:
 8008af4:	b082      	sub	sp, #8
 8008af6:	b901      	cbnz	r1, 8008afa <__ascii_mbtowc+0x6>
 8008af8:	a901      	add	r1, sp, #4
 8008afa:	b142      	cbz	r2, 8008b0e <__ascii_mbtowc+0x1a>
 8008afc:	b14b      	cbz	r3, 8008b12 <__ascii_mbtowc+0x1e>
 8008afe:	7813      	ldrb	r3, [r2, #0]
 8008b00:	600b      	str	r3, [r1, #0]
 8008b02:	7812      	ldrb	r2, [r2, #0]
 8008b04:	1e10      	subs	r0, r2, #0
 8008b06:	bf18      	it	ne
 8008b08:	2001      	movne	r0, #1
 8008b0a:	b002      	add	sp, #8
 8008b0c:	4770      	bx	lr
 8008b0e:	4610      	mov	r0, r2
 8008b10:	e7fb      	b.n	8008b0a <__ascii_mbtowc+0x16>
 8008b12:	f06f 0001 	mvn.w	r0, #1
 8008b16:	e7f8      	b.n	8008b0a <__ascii_mbtowc+0x16>

08008b18 <_realloc_r>:
 8008b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1c:	4680      	mov	r8, r0
 8008b1e:	4615      	mov	r5, r2
 8008b20:	460c      	mov	r4, r1
 8008b22:	b921      	cbnz	r1, 8008b2e <_realloc_r+0x16>
 8008b24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b28:	4611      	mov	r1, r2
 8008b2a:	f7fe bf91 	b.w	8007a50 <_malloc_r>
 8008b2e:	b92a      	cbnz	r2, 8008b3c <_realloc_r+0x24>
 8008b30:	f7fe ff1a 	bl	8007968 <_free_r>
 8008b34:	2400      	movs	r4, #0
 8008b36:	4620      	mov	r0, r4
 8008b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b3c:	f000 f8c5 	bl	8008cca <_malloc_usable_size_r>
 8008b40:	4285      	cmp	r5, r0
 8008b42:	4606      	mov	r6, r0
 8008b44:	d802      	bhi.n	8008b4c <_realloc_r+0x34>
 8008b46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b4a:	d8f4      	bhi.n	8008b36 <_realloc_r+0x1e>
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4640      	mov	r0, r8
 8008b50:	f7fe ff7e 	bl	8007a50 <_malloc_r>
 8008b54:	4607      	mov	r7, r0
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d0ec      	beq.n	8008b34 <_realloc_r+0x1c>
 8008b5a:	42b5      	cmp	r5, r6
 8008b5c:	462a      	mov	r2, r5
 8008b5e:	4621      	mov	r1, r4
 8008b60:	bf28      	it	cs
 8008b62:	4632      	movcs	r2, r6
 8008b64:	f7ff ff86 	bl	8008a74 <memcpy>
 8008b68:	4621      	mov	r1, r4
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	f7fe fefc 	bl	8007968 <_free_r>
 8008b70:	463c      	mov	r4, r7
 8008b72:	e7e0      	b.n	8008b36 <_realloc_r+0x1e>

08008b74 <__ascii_wctomb>:
 8008b74:	4603      	mov	r3, r0
 8008b76:	4608      	mov	r0, r1
 8008b78:	b141      	cbz	r1, 8008b8c <__ascii_wctomb+0x18>
 8008b7a:	2aff      	cmp	r2, #255	@ 0xff
 8008b7c:	d904      	bls.n	8008b88 <__ascii_wctomb+0x14>
 8008b7e:	228a      	movs	r2, #138	@ 0x8a
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	f04f 30ff 	mov.w	r0, #4294967295
 8008b86:	4770      	bx	lr
 8008b88:	700a      	strb	r2, [r1, #0]
 8008b8a:	2001      	movs	r0, #1
 8008b8c:	4770      	bx	lr
	...

08008b90 <fiprintf>:
 8008b90:	b40e      	push	{r1, r2, r3}
 8008b92:	b503      	push	{r0, r1, lr}
 8008b94:	4601      	mov	r1, r0
 8008b96:	ab03      	add	r3, sp, #12
 8008b98:	4805      	ldr	r0, [pc, #20]	@ (8008bb0 <fiprintf+0x20>)
 8008b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b9e:	6800      	ldr	r0, [r0, #0]
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	f7ff fce5 	bl	8008570 <_vfiprintf_r>
 8008ba6:	b002      	add	sp, #8
 8008ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bac:	b003      	add	sp, #12
 8008bae:	4770      	bx	lr
 8008bb0:	20000018 	.word	0x20000018

08008bb4 <__swhatbuf_r>:
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bbc:	2900      	cmp	r1, #0
 8008bbe:	b096      	sub	sp, #88	@ 0x58
 8008bc0:	4615      	mov	r5, r2
 8008bc2:	461e      	mov	r6, r3
 8008bc4:	da0d      	bge.n	8008be2 <__swhatbuf_r+0x2e>
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008bcc:	f04f 0100 	mov.w	r1, #0
 8008bd0:	bf14      	ite	ne
 8008bd2:	2340      	movne	r3, #64	@ 0x40
 8008bd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008bd8:	2000      	movs	r0, #0
 8008bda:	6031      	str	r1, [r6, #0]
 8008bdc:	602b      	str	r3, [r5, #0]
 8008bde:	b016      	add	sp, #88	@ 0x58
 8008be0:	bd70      	pop	{r4, r5, r6, pc}
 8008be2:	466a      	mov	r2, sp
 8008be4:	f000 f848 	bl	8008c78 <_fstat_r>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	dbec      	blt.n	8008bc6 <__swhatbuf_r+0x12>
 8008bec:	9901      	ldr	r1, [sp, #4]
 8008bee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008bf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bf6:	4259      	negs	r1, r3
 8008bf8:	4159      	adcs	r1, r3
 8008bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bfe:	e7eb      	b.n	8008bd8 <__swhatbuf_r+0x24>

08008c00 <__smakebuf_r>:
 8008c00:	898b      	ldrh	r3, [r1, #12]
 8008c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c04:	079d      	lsls	r5, r3, #30
 8008c06:	4606      	mov	r6, r0
 8008c08:	460c      	mov	r4, r1
 8008c0a:	d507      	bpl.n	8008c1c <__smakebuf_r+0x1c>
 8008c0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	6123      	str	r3, [r4, #16]
 8008c14:	2301      	movs	r3, #1
 8008c16:	6163      	str	r3, [r4, #20]
 8008c18:	b003      	add	sp, #12
 8008c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c1c:	ab01      	add	r3, sp, #4
 8008c1e:	466a      	mov	r2, sp
 8008c20:	f7ff ffc8 	bl	8008bb4 <__swhatbuf_r>
 8008c24:	9f00      	ldr	r7, [sp, #0]
 8008c26:	4605      	mov	r5, r0
 8008c28:	4639      	mov	r1, r7
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f7fe ff10 	bl	8007a50 <_malloc_r>
 8008c30:	b948      	cbnz	r0, 8008c46 <__smakebuf_r+0x46>
 8008c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c36:	059a      	lsls	r2, r3, #22
 8008c38:	d4ee      	bmi.n	8008c18 <__smakebuf_r+0x18>
 8008c3a:	f023 0303 	bic.w	r3, r3, #3
 8008c3e:	f043 0302 	orr.w	r3, r3, #2
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	e7e2      	b.n	8008c0c <__smakebuf_r+0xc>
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	6020      	str	r0, [r4, #0]
 8008c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	9b01      	ldr	r3, [sp, #4]
 8008c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c56:	b15b      	cbz	r3, 8008c70 <__smakebuf_r+0x70>
 8008c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f000 f81d 	bl	8008c9c <_isatty_r>
 8008c62:	b128      	cbz	r0, 8008c70 <__smakebuf_r+0x70>
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	f023 0303 	bic.w	r3, r3, #3
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
 8008c6e:	81a3      	strh	r3, [r4, #12]
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	431d      	orrs	r5, r3
 8008c74:	81a5      	strh	r5, [r4, #12]
 8008c76:	e7cf      	b.n	8008c18 <__smakebuf_r+0x18>

08008c78 <_fstat_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4d07      	ldr	r5, [pc, #28]	@ (8008c98 <_fstat_r+0x20>)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	4608      	mov	r0, r1
 8008c82:	4611      	mov	r1, r2
 8008c84:	602b      	str	r3, [r5, #0]
 8008c86:	f7f9 fab7 	bl	80021f8 <_fstat>
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	d102      	bne.n	8008c94 <_fstat_r+0x1c>
 8008c8e:	682b      	ldr	r3, [r5, #0]
 8008c90:	b103      	cbz	r3, 8008c94 <_fstat_r+0x1c>
 8008c92:	6023      	str	r3, [r4, #0]
 8008c94:	bd38      	pop	{r3, r4, r5, pc}
 8008c96:	bf00      	nop
 8008c98:	200006b8 	.word	0x200006b8

08008c9c <_isatty_r>:
 8008c9c:	b538      	push	{r3, r4, r5, lr}
 8008c9e:	4d06      	ldr	r5, [pc, #24]	@ (8008cb8 <_isatty_r+0x1c>)
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	602b      	str	r3, [r5, #0]
 8008ca8:	f7f9 fab6 	bl	8002218 <_isatty>
 8008cac:	1c43      	adds	r3, r0, #1
 8008cae:	d102      	bne.n	8008cb6 <_isatty_r+0x1a>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	b103      	cbz	r3, 8008cb6 <_isatty_r+0x1a>
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	200006b8 	.word	0x200006b8

08008cbc <abort>:
 8008cbc:	b508      	push	{r3, lr}
 8008cbe:	2006      	movs	r0, #6
 8008cc0:	f000 f834 	bl	8008d2c <raise>
 8008cc4:	2001      	movs	r0, #1
 8008cc6:	f7f9 fa47 	bl	8002158 <_exit>

08008cca <_malloc_usable_size_r>:
 8008cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cce:	1f18      	subs	r0, r3, #4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	bfbc      	itt	lt
 8008cd4:	580b      	ldrlt	r3, [r1, r0]
 8008cd6:	18c0      	addlt	r0, r0, r3
 8008cd8:	4770      	bx	lr

08008cda <_raise_r>:
 8008cda:	291f      	cmp	r1, #31
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4605      	mov	r5, r0
 8008ce0:	460c      	mov	r4, r1
 8008ce2:	d904      	bls.n	8008cee <_raise_r+0x14>
 8008ce4:	2316      	movs	r3, #22
 8008ce6:	6003      	str	r3, [r0, #0]
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cec:	bd38      	pop	{r3, r4, r5, pc}
 8008cee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008cf0:	b112      	cbz	r2, 8008cf8 <_raise_r+0x1e>
 8008cf2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008cf6:	b94b      	cbnz	r3, 8008d0c <_raise_r+0x32>
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	f000 f831 	bl	8008d60 <_getpid_r>
 8008cfe:	4622      	mov	r2, r4
 8008d00:	4601      	mov	r1, r0
 8008d02:	4628      	mov	r0, r5
 8008d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d08:	f000 b818 	b.w	8008d3c <_kill_r>
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d00a      	beq.n	8008d26 <_raise_r+0x4c>
 8008d10:	1c59      	adds	r1, r3, #1
 8008d12:	d103      	bne.n	8008d1c <_raise_r+0x42>
 8008d14:	2316      	movs	r3, #22
 8008d16:	6003      	str	r3, [r0, #0]
 8008d18:	2001      	movs	r0, #1
 8008d1a:	e7e7      	b.n	8008cec <_raise_r+0x12>
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008d22:	4620      	mov	r0, r4
 8008d24:	4798      	blx	r3
 8008d26:	2000      	movs	r0, #0
 8008d28:	e7e0      	b.n	8008cec <_raise_r+0x12>
	...

08008d2c <raise>:
 8008d2c:	4b02      	ldr	r3, [pc, #8]	@ (8008d38 <raise+0xc>)
 8008d2e:	4601      	mov	r1, r0
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	f7ff bfd2 	b.w	8008cda <_raise_r>
 8008d36:	bf00      	nop
 8008d38:	20000018 	.word	0x20000018

08008d3c <_kill_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4d07      	ldr	r5, [pc, #28]	@ (8008d5c <_kill_r+0x20>)
 8008d40:	2300      	movs	r3, #0
 8008d42:	4604      	mov	r4, r0
 8008d44:	4608      	mov	r0, r1
 8008d46:	4611      	mov	r1, r2
 8008d48:	602b      	str	r3, [r5, #0]
 8008d4a:	f7f9 f9f5 	bl	8002138 <_kill>
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	d102      	bne.n	8008d58 <_kill_r+0x1c>
 8008d52:	682b      	ldr	r3, [r5, #0]
 8008d54:	b103      	cbz	r3, 8008d58 <_kill_r+0x1c>
 8008d56:	6023      	str	r3, [r4, #0]
 8008d58:	bd38      	pop	{r3, r4, r5, pc}
 8008d5a:	bf00      	nop
 8008d5c:	200006b8 	.word	0x200006b8

08008d60 <_getpid_r>:
 8008d60:	f7f9 b9e2 	b.w	8002128 <_getpid>

08008d64 <_init>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	bf00      	nop
 8008d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6a:	bc08      	pop	{r3}
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	4770      	bx	lr

08008d70 <_fini>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	bf00      	nop
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr
